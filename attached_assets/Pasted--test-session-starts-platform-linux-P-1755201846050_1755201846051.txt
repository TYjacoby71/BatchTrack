============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 8 items                                                              

tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_decorator_allows_with_permission PASSED [ 12%]
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_returns_json_for_api FAILED [ 25%]
tests/test_auth_permissions.py::TestAuthPermissions::test_any_permission_required_decorator PASSED [ 37%]
tests/test_auth_permissions.py::TestAuthPermissions::test_tier_required_decorator PASSED [ 50%]
tests/test_auth_permissions.py::TestAuthPermissions::test_user_has_any_permission_method PASSED [ 62%]
tests/test_auth_permissions.py::TestAuthPermissions::test_api_unauth_returns_json_401 FAILED [ 75%]
tests/test_auth_permissions.py::TestAuthPermissions::test_web_unauth_redirects_to_login PASSED [ 87%]
tests/test_auth_permissions.py::TestAuthPermissions::test_csrf_token_available_in_templates FAILED [100%]

=================================== FAILURES ===================================
______ TestAuthPermissions.test_permission_required_returns_json_for_api _______

self = <tests.test_auth_permissions.TestAuthPermissions object at 0x7f58d4465210>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>

    def test_permission_required_returns_json_for_api(self, app, client):
        """Test that API endpoints return JSON when permission denied"""
        with app.app_context():
            @app.route('/api/test-perm')
            @permission_required('test.permission')
            def api_test_route():
                return {'status': 'success'}
    
            response = client.get('/api/test-perm')
            # Should return JSON unauthorized response
            assert response.status_code == 401
            assert response.is_json
            json_data = response.get_json()
>           assert json_data['error'] == 'unauthorized'
E           AssertionError: assert 'Authentication required' == 'unauthorized'
E             
E             - unauthorized
E             + Authentication required

tests/test_auth_permissions.py:36: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_____________ TestAuthPermissions.test_api_unauth_returns_json_401 _____________

self = <tests.test_auth_permissions.TestAuthPermissions object at 0x7f58d4466010>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>

    def test_api_unauth_returns_json_401(self, app, client):
        """Test that API endpoints return 401 JSON when unauthorized"""
        with app.app_context():
            @app.route("/api/_perm_test")
            @permission_required("some.permission")
            def _p():
                return {"ok": True}
    
            resp = client.get("/api/_perm_test", headers={"Accept": "application/json"})
            assert resp.status_code == 401
            assert resp.is_json
            json_data = resp.get_json()
>           assert json_data.get("error") == "unauthorized"
E           AssertionError: assert 'Authentication required' == 'unauthorized'
E             
E             - unauthorized
E             + Authentication required

tests/test_auth_permissions.py:80: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
__________ TestAuthPermissions.test_csrf_token_available_in_templates __________

self = <tests.test_auth_permissions.TestAuthPermissions object at 0x7f58d4467410>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User test@example.com>

    def test_csrf_token_available_in_templates(self, app, client, test_user):
        """Test that csrf_token is available in templates for an authenticated user"""
        with app.app_context():
            from flask import render_template_string
            from flask_login import login_user
    
            # Log the user in before the request
>           login_user(test_user)

tests/test_auth_permissions.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/flask_login/utils.py:184: in login_user
    session["_user_id"] = user_id
.pythonlibs/lib/python3.11/site-packages/werkzeug/local.py:318: in __get__
    obj = instance._get_current_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _get_current_object() -> T:
        try:
            obj = local.get()
        except LookupError:
>           raise RuntimeError(unbound_message) from None
E           RuntimeError: Working outside of request context.
E           
E           This typically means that you attempted to use functionality that needed
E           an active HTTP request. Consult the documentation on testing for
E           information about how to avoid this problem.

.pythonlibs/lib/python3.11/site-packages/werkzeug/local.py:519: RuntimeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
=============================== warnings summary ===============================
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_decorator_allows_with_permission
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_returns_json_for_api
tests/test_auth_permissions.py::TestAuthPermissions::test_any_permission_required_decorator
tests/test_auth_permissions.py::TestAuthPermissions::test_tier_required_decorator
tests/test_auth_permissions.py::TestAuthPermissions::test_user_has_any_permission_method
tests/test_auth_permissions.py::TestAuthPermissions::test_api_unauth_returns_json_401
tests/test_auth_permissions.py::TestAuthPermissions::test_web_unauth_redirects_to_login
tests/test_auth_permissions.py::TestAuthPermissions::test_csrf_token_available_in_templates
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_returns_json_for_api - AssertionError: assert 'Authentication required' == 'unauthorized'
FAILED tests/test_auth_permissions.py::TestAuthPermissions::test_api_unauth_returns_json_401 - AssertionError: assert 'Authentication required' == 'unauthorized'
FAILED tests/test_auth_permissions.py::TestAuthPermissions::test_csrf_token_available_in_templates - RuntimeError: Working outside of request context.
=================== 3 failed, 5 passed, 8 warnings in 16.41s ===================