============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 24 items                                            

tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_exists PASSED [  4%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_login_endpoint_exists PASSED [  8%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_callback_endpoint_exists PASSED [ 12%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_state_validation_path PASSED [ 16%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_methods_exist PASSED [ 20%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_configuration_status FAILED [ 25%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_callback_invalid_state PASSED [ 29%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_single_entry_point_exists PASSED [ 33%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order PASSED [ 37%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_stock_check_accuracy PASSED [ 41%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly PASSED [ 45%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_creation_flow PASSED [ 50%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_generation_constraints FAILED [ 54%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_service_exists PASSED [ 58%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_creation_validation FAILED [ 62%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_endpoint_exists PASSED [ 66%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_tier_bypass_behavior PASSED [ 70%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_organization_tier_assignment PASSED [ 75%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_permission_gating_exists FAILED [ 79%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_service_delegation PASSED [ 83%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_exists PASSED [ 87%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_signature_verification_path_exists PASSED [ 91%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_idempotency_behavior PASSED [ 95%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_methods_exist PASSED [100%]

========================== FAILURES ===========================
_ TestGoogleOAuthCharacterization.test_oauth_configuration_status _

self = <tests.test_google_oauth.TestGoogleOAuthCharacterization object at 0x7f04a09d4c50>
app = <Flask 'app'>

    def test_oauth_configuration_status(self, app):
        """Test OAuth configuration detection"""
        with app.app_context():
            status = OAuthService.get_configuration_status()
    
            # Should have required keys
            assert 'is_configured' in status
>           assert 'missing_keys' in status
E           AssertionError: assert 'missing_keys' in {'client_id_length': 72, 'client_secret_length': 35, 'has_client_id': True, 'has_client_secret': True, ...}

tests/test_google_oauth.py:77: AssertionError
--------------------- Captured log setup ----------------------
INFO     app:unit_utils.py:20 BatchTrack startup
_ TestProductSKUCharacterization.test_sku_generation_constraints _

self = <tests.test_product_sku.TestProductSKUCharacterization object at 0x7f04a09e3150>
app = <Flask 'app'>

    def test_sku_generation_constraints(self, app):
        """Test current SKU generation and constraints."""
        with app.app_context():
            # This test characterizes the NotNullViolation issue mentioned
            # in the engineer's assessment
    
            # Verify Product model exists and has expected fields
            product = Product()
            assert hasattr(product, 'name')
            assert hasattr(product, 'organization_id')
    
            # Verify ProductSKU model exists and has expected fields
            sku = ProductSKU()
>           assert hasattr(sku, 'name')  # This was causing NotNullViolation
E           assert False
E            +  where False = hasattr(<[AttributeError("'ProductSKU' object has no attribute 'id'") raised in repr()] ProductSKU object at 0x7f049d883e50>, 'name')

tests/test_product_sku.py:36: AssertionError
--------------------- Captured log setup ----------------------
INFO     app:unit_utils.py:20 BatchTrack startup
_ TestProductSKUCharacterization.test_sku_creation_validation _

self = <tests.test_product_sku.TestProductSKUCharacterization object at 0x7f04a09e3e10>
app = <Flask 'app'>

    def test_sku_creation_validation(self, app):
        """Test current SKU creation validation rules."""
        with app.app_context():
            # This characterizes the current validation to prevent
            # regressions during refactoring
    
            # TODO: Add actual SKU creation test with validation
            # For now, just ensure the models are properly structured
>           assert Product.__tablename__ == 'products'
E           AssertionError: assert 'product' == 'products'
E             
E             - products
E             ?        -
E             + product

tests/test_product_sku.py:54: AssertionError
--------------------- Captured log setup ----------------------
INFO     app:unit_utils.py:20 BatchTrack startup
_ TestSignupTierCharacterization.test_permission_gating_exists _

self = <tests.test_signup_tiers.TestSignupTierCharacterization object at 0x7f04a07ee010>
app = <Flask 'app'>

    def test_permission_gating_exists(self, app):
        """Test that permission gating system exists."""
        with app.app_context():
            # Verify permission system components exist
>           from app.utils.authorization import has_permission
E           ImportError: cannot import name 'has_permission' from 'app.utils.authorization' (/home/runner/workspace/app/utils/authorization.py)

tests/test_signup_tiers.py:44: ImportError
--------------------- Captured log setup ----------------------
INFO     app:unit_utils.py:20 BatchTrack startup
====================== warnings summary =======================
tests/test_google_oauth.py: 7 warnings
tests/test_inventory_fifo.py: 4 warnings
tests/test_product_sku.py: 4 warnings
tests/test_signup_tiers.py: 5 warnings
tests/test_stripe_webhooks.py: 4 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================== short test summary info ===================
FAILED tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_configuration_status - AssertionError: assert 'missing_keys' in {'client_id_lengt...
FAILED tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_generation_constraints - assert False
FAILED tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_creation_validation - AssertionError: assert 'product' == 'products'
FAILED tests/test_signup_tiers.py::TestSignupTierCharacterization::test_permission_gating_exists - ImportError: cannot import name 'has_permission' from 'app...
========= 4 failed, 20 passed, 24 warnings in 26.38s ==========
