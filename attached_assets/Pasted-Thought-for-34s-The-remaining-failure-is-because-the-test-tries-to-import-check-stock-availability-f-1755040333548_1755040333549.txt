Thought for 34s
The remaining failure is because the test tries to import check_stock_availability from app.services.stock_check, but that function doesn’t exist (yet). Let’s add a tiny compatibility shim that the test expects.

Drop this into app/services/stock_check.py (or add it to the file if it already exists):

python
Copy
Edit
# app/services/stock_check.py
from datetime import date, datetime
from sqlalchemy import and_, or_
from flask_login import current_user

from app.models.inventory import InventoryItem, InventoryHistory
try:
    # Only needed when checking product items
    from app.models.product import ProductSKUHistory
except Exception:  # pragma: no cover (tests may not need products)
    ProductSKUHistory = None  # type: ignore

def _fresh_filter(model):
    """Return SQLAlchemy filter for 'not expired'."""
    today = date.today()
    return or_(getattr(model, "expiration_date").is_(None),
               getattr(model, "expiration_date") >= today)

def _scoped(query, model):
    """Apply org scoping when a user is authenticated."""
    if current_user and getattr(current_user, "is_authenticated", False):
        return query.filter(getattr(model, "organization_id") == current_user.organization_id)
    return query

def _entries_for_item(inventory_item_id: int, include_expired: bool):
    item = InventoryItem.query.get(inventory_item_id)
    if not item:
        return [], None

    if item.type == "product" and ProductSKUHistory is not None:
        q = ProductSKUHistory.query.filter(
            and_(ProductSKUHistory.inventory_item_id == inventory_item_id,
                 ProductSKUHistory.remaining_quantity > 0)
        )
        if not include_expired:
            q = q.filter(_fresh_filter(ProductSKUHistory))
        q = _scoped(q, ProductSKUHistory)
        return q.all(), item

    # ingredients/containers
    q = InventoryHistory.query.filter(
        and_(InventoryHistory.inventory_item_id == inventory_item_id,
             InventoryHistory.remaining_quantity > 0)
    )
    if not include_expired:
        q = q.filter(_fresh_filter(InventoryHistory))
    q = _scoped(q, InventoryHistory)
    return q.all(), item

def check_stock_availability(inventory_item_id: int,
                             requested_qty: float | None = None,
                             include_expired: bool = False):
    """
    Compatibility helper used by tests.
    Returns (is_available: bool, available_quantity: float).

    - Counts only *fresh* lots by default (exclude expired).
    - Respects organization scoping when a user is authenticated.
    - Works for both raw inventory (InventoryHistory) and products (ProductSKUHistory).
    """
    entries, _ = _entries_for_item(inventory_item_id, include_expired)
    available = float(sum(float(getattr(e, "remaining_quantity", 0.0)) for e in entries))
    if requested_qty is None:
        return (available > 0.0, available)
    return (available >= float(requested_qty), available)

# Optional convenience alias (not required by tests, but handy)
def get_available_quantity(inventory_item_id: int, include_expired: bool = False) -> float:
    _, qty = check_stock_availability(inventory_item_id, None, include_expired=include_expired)
    return qty
Why this works:

Mirrors our FIFO rules (fresh lots only by default).

Applies org scoping like the rest of the services.

Supports both ingredient/container (InventoryHistory) and product (ProductSKUHistory) paths.

After saving, run the full suite again—your single failing test should pass just like the others.









Sources
