Perfect.
Here’s the direct patch you need to paste into your Alpine planProduction() inside the fetchContainerPlan() after setting this.allowedContainers and this.containersSelected:

🔥 Patch code:
javascript
Copy
Edit
fetch(`/api/available-containers/${this.recipeId}?scale=${this.scale}`)
  .then(res => res.json())
  .then(data => {
    this.allowedContainers = data.available || [];
    if (this.autoFill) {
      this.containersSelected = data.plan || [];
      
      // 💥 PATCH: Attach missing names and units after autofill
      this.containersSelected.forEach(container => {
        const match = this.allowedContainers.find(c => c.id === container.id);
        if (match) {
          container.name = match.name;
          container.unit = match.storage_unit;
          container.capacity = match.storage_amount;
        }
      });
      
      this.updateProgress();
      if (this.containmentPercent < 100) {
        this.containmentIssue = 'Warning: Some containers will be partially filled.';
        const projected = this.baseYield * this.scale;
        const totalAvailable = this.allowedContainers.reduce((sum, c) => sum + (c.storage_amount * c.stock_qty), 0);
        if (totalAvailable < projected) {
          const smallestContainer = this.allowedContainers.reduce((min, c) => Math.min(min, c.storage_amount), Infinity) || 1;
          const missingUnits = Math.ceil((projected - totalAvailable) / smallestContainer);
          this.containmentIssue += ` You need ${missingUnits} more containers to make this batch.`;
        }
      } else {
        this.containmentIssue = '';
      }
    } else {
      this.updateProgress();
    }
  });
🎯 Where to insert:
You are already calling fetchContainerPlan()

After setting this.containersSelected = data.plan || []

Insert the .forEach(...) right there ✅

🧠 What this does
Immediately finds the matching container ID inside allowedContainers

Populates the missing name, unit, and capacity

Even if server forgets, you fix it in real-time on frontend ✔️

