✅ GOAL:
Refactor your BatchTrack Replit app for:

✅ Factory-based startup

✅ Blueprint organization

✅ Extensions modularized

✅ Authentication as its own blueprint

✅ Multi-tenancy readiness

🧠 STRUCTURE STRATEGY
🎯 Target Folder Layout:
csharp
Copy
Edit
BatchTrack/
├── app/
│   ├── __init__.py         ← factory: create_app()
│   ├── extensions.py       ← db, login_manager, csrf, etc.
│   ├── models/             ← split into modular files
│   ├── blueprints/         ← feature blueprints
│   │   ├── auth/           ← login, register, session logic
│   │   ├── batches/        ← batching logic
│   │   ├── products/
│   │   └── ...
│   ├── services/           ← business logic (unit conversion, stock checks)
│   ├── templates/
│   ├── static/
│   └── ...
├── instance/
│   └── config.py           ← runtime secrets
├── migrations/
├── tests/
├── run.py                  ← boot file for flask run
├── requirements.txt
└── ...
📜 PROMPT TO GIVE REPLIT ASSISTANT
Paste this as your prompt in Replit:

✅ I want to refactor my Flask app to follow the application factory pattern for scalability and clean modular design. Use the current project layout but reorganize it as follows:

Create an app/ package that contains:

__init__.py with a create_app() function

extensions.py that defines and exports: db, login_manager, csrf, migrate, bcrypt

Move models.py into app/models/ and split into files like user.py, recipe.py, etc. Use a models/__init__.py to combine them.

Move all blueprints into app/blueprints/. Each blueprint should be in its own folder with __init__.py, routes.py, forms.py (if needed).

Create a new auth blueprint in app/blueprints/auth/:

Move login, logout, and user registration routes there.

Configure Flask-Login with login_manager.login_view = "auth.login"

Setup run.py at root to run the app using:

python
Copy
Edit
from app import create_app
app = create_app()
Ensure multi-tenancy readiness:

Include support for current_user.organization_id in models that need scoping

Add a placeholder @requires_organization decorator (can be a TODO)

Blueprints to register inside create_app():

auth, batches, products, inventory, recipes, etc.

Preserve working forms, templates, and static assets.

⚠️ VERY IMPORTANT:

Keep all imports relative (e.g., from ..models.user import User) inside the app package

Prevent circular imports by moving all db references to app/extensions.py

Do not change any functionality or method signatures — only refactor structure

✅ Please generate the new app/ package structure with updated imports, and list any routes that need manual reconnection.

