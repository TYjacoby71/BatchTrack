============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 2 items                                                              

tests/test_audit_canonicalization.py::test_api_reservation_routes_uses_canonical_audit FAILED [ 50%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order FAILED [100%]

======================================= FAILURES =======================================
___________________ test_api_reservation_routes_uses_canonical_audit ___________________

app = <Flask 'app'>

    def test_api_reservation_routes_uses_canonical_audit(app):
        """Test that API reservation routes use canonical audit helper"""
        with app.app_context():
            with patch('app.services.inventory_adjustment.record_audit_entry') as mock_audit:
    
                # Mock the route function that writes audit entries
>               from app.blueprints.api.reservation_routes import _write_unreserved_audit

tests/test_audit_canonicalization.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/blueprints/api/__init__.py:2: in <module>
    from .routes import api_bp
app/blueprints/api/routes.py:69: in <module>
    from .stock_routes import stock_api_bp
app/blueprints/api/stock_routes.py:3: in <module>
    from ...services.stock_check.core import UniversalStockCheckService
app/services/stock_check/__init__.py:9: in <module>
    from .core import UniversalStockCheckService
app/services/stock_check/core.py:12: in <module>
    from .handlers import IngredientHandler, ContainerHandler, ProductHandler
app/services/stock_check/handlers/__init__.py:6: in <module>
    from .ingredient_handler import IngredientHandler
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    Ingredient-specific stock checking handler
    """
    
    import logging
    from typing import Optional
    
    from app.models import InventoryItem
    from ...services.unit_conversion import ConversionEngine
E   ModuleNotFoundError: No module named 'app.services.services'

app/services/stock_check/handlers/ingredient_handler.py:10: ModuleNotFoundError
---------------------------------- Captured log setup ----------------------------------
WARNING  app.blueprints_registry:blueprints_registry.py:12 Public API registration failed: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:36 Failed to register recipes_bp from app.blueprints.recipes.routes: cannot import name 'check_organization_access' from 'app.utils.authorization' (/home/runner/workspace/app/utils/authorization.py)
WARNING  app.blueprints_registry:blueprints_registry.py:55 Failed to register app_routes_bp from app.routes.app_routes: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:55 Failed to register api_bp from app.blueprints.api.routes: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:91 Product blueprints failed: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:117 API blueprints failed: No module named 'app.services.services'
INFO     app:unit_utils.py:28 BatchTrack startup
_____________ TestInventoryFIFOCharacterization.test_fifo_deduction_order ______________

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7f2b485af690>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f2b48d11150>
test_user = <User testuser_1755645904284316>, test_org = <Organization 3>

    def test_fifo_deduction_order(self, app, db_session, test_user, test_org):
        """Test FIFO deduction follows first-in-first-out order."""
        with app.test_request_context():
            login_user(test_user)
    
            # Create inventory item
            item = InventoryItem(
                name="Test Ingredient",
                type="ingredient",
                unit="g",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Add stock in layers (oldest first)
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type="restock",
                notes="First batch",
                created_by=test_user.id
            )
    
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=50.0,
                change_type="restock",
                notes="Second batch",
                created_by=test_user.id
            )
    
            # Verify total
            db_session.refresh(item)
            assert item.quantity == 150.0
    
            # Deduct and verify FIFO order
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=-75.0,
                change_type="batch",
                notes="FIFO test deduction",
                created_by=test_user.id
            )
    
            # Verify available quantity matches
>           from app.services.stock_check import check_stock_availability

tests/test_inventory_fifo.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app/services/stock_check/__init__.py:9: in <module>
    from .core import UniversalStockCheckService
app/services/stock_check/core.py:12: in <module>
    from .handlers import IngredientHandler, ContainerHandler, ProductHandler
app/services/stock_check/handlers/__init__.py:6: in <module>
    from .ingredient_handler import IngredientHandler
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    """
    Ingredient-specific stock checking handler
    """
    
    import logging
    from typing import Optional
    
    from app.models import InventoryItem
    from ...services.unit_conversion import ConversionEngine
E   ModuleNotFoundError: No module named 'app.services.services'

app/services/stock_check/handlers/ingredient_handler.py:10: ModuleNotFoundError
---------------------------------- Captured log setup ----------------------------------
WARNING  app.blueprints_registry:blueprints_registry.py:12 Public API registration failed: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:36 Failed to register recipes_bp from app.blueprints.recipes.routes: cannot import name 'check_organization_access' from 'app.utils.authorization' (/home/runner/workspace/app/utils/authorization.py)
WARNING  app.blueprints_registry:blueprints_registry.py:55 Failed to register app_routes_bp from app.routes.app_routes: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:55 Failed to register api_bp from app.blueprints.api.routes: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:91 Product blueprints failed: No module named 'app.services.services'
WARNING  app.blueprints_registry:blueprints_registry.py:117 API blueprints failed: No module named 'app.services.services'
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:33 CANONICAL INVENTORY ADJUSTMENT: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:46 INITIAL STOCK: Detected item 1 has no FIFO history, delegating to creation logic
INFO     app.services.inventory_adjustment._fifo_ops:_fifo_ops.py:237 FIFO: Updating inventory item 1 quantity: 0.0 → 100.0
INFO     app.services.inventory_adjustment._audit:_audit.py:102 Recorded audit entry for item 1: initial_stock
INFO     app.services.inventory_adjustment._core:_core.py:33 CANONICAL INVENTORY ADJUSTMENT: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._fifo_ops:_fifo_ops.py:237 FIFO: Updating inventory item 1 quantity: 100.0 → 150.0
ERROR    app.services.inventory_adjustment._audit:_audit.py:107 Failed to record audit entry for item 1: (builtins.ValueError) could not convert string to float: 'Second batch'
[SQL: INSERT INTO unified_inventory_history (inventory_item_id, timestamp, change_type, quantity_change, unit, unit_cost, remaining_quantity, fifo_reference_id, fifo_code, batch_id, created_by, notes, quantity_used, used_for_batch_id, is_perishable, shelf_life_days, expiration_date, location_id, location_name, temperature_at_time, quality_status, compliance_status, quality_checked_by, customer, sale_price, order_id, reservation_id, is_reserved, sale_location, marketplace_order_id, marketplace_source, batch_number, lot_number, container_id, fifo_source, organization_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
[parameters: [{'remaining_quantity': 0.0, 'inventory_item_id': 1, 'organization_id': 3, 'timestamp': datetime.datetime(2025, 8, 19, 23, 25, 4, 412265), 'change_type ... (513 characters truncated) ...  None, 'shelf_life_days': None, 'order_id': None, 'created_by': None, 'fifo_source': None, 'notes': None, 'lot_number': None, 'expiration_date': None}]]
INFO     app.services.inventory_adjustment._core:_core.py:33 CANONICAL INVENTORY ADJUSTMENT: item_id=1, quantity=-75.0, change_type=batch, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
ERROR    app.services.inventory_adjustment._audit:_audit.py:107 Failed to record audit entry for item 1: (builtins.ValueError) could not convert string to float: 'FIFO test deduction'
[SQL: INSERT INTO unified_inventory_history (inventory_item_id, timestamp, change_type, quantity_change, unit, unit_cost, remaining_quantity, fifo_reference_id, fifo_code, batch_id, created_by, notes, quantity_used, used_for_batch_id, is_perishable, shelf_life_days, expiration_date, location_id, location_name, temperature_at_time, quality_status, compliance_status, quality_checked_by, customer, sale_price, order_id, reservation_id, is_reserved, sale_location, marketplace_order_id, marketplace_source, batch_number, lot_number, container_id, fifo_source, organization_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
[parameters: [{'remaining_quantity': 0.0, 'inventory_item_id': 1, 'organization_id': 3, 'timestamp': datetime.datetime(2025, 8, 19, 23, 25, 4, 453783), 'change_type ... (518 characters truncated) ...  None, 'shelf_life_days': None, 'order_id': None, 'created_by': None, 'fifo_source': None, 'notes': None, 'lot_number': None, 'expiration_date': None}]]
=================================== warnings summary ===================================
tests/test_audit_canonicalization.py::test_api_reservation_routes_uses_canonical_audit
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_audit_canonicalization.py::test_api_reservation_routes_uses_canonical_audit
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order
  /home/runner/workspace/app/services/inventory_adjustment/_audit.py:77: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    item = InventoryItem.query.get(item_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== short test summary info ================================
FAILED tests/test_audit_canonicalization.py::test_api_reservation_routes_uses_canonical_audit - ModuleNotFoundError: No module named 'app.services.services'
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order - ModuleNotFoundError: No module named 'app.services.services'
============================ 2 failed, 7 warnings in 6.87s =============================
