: entry.fifo_code,
app/blueprints/expiration/services.py:239:                            'lot_number': entry.fifo_code,
app/blueprints/expiration/services.py:333:                'lot_number': sku_entry.fifo_code or f"LOT-{sku_entry.id}"
app/blueprints/expiration/services.py:340:        expired_fifo_entries = ExpirationService._query_fifo_entries(expired=True)
app/blueprints/expiration/services.py:351:            'fifo_entries': expired_fifo_entries,
app/blueprints/expiration/services.py:359:        expiring_fifo_entries = ExpirationService._query_fifo_entries(days_ahead=days_ahead)
app/blueprints/expiration/services.py:370:            'fifo_entries': expiring_fifo_entries,
app/blueprints/expiration/services.py:375:    def update_fifo_expiration_data(inventory_item_id: int, shelf_life_days: int):
app/blueprints/expiration/services.py:532:            'expired_count': len(expired_items['fifo_entries']) + len(expired_items['product_inventory']),
app/blueprints/expiration/services.py:533:            'expiring_soon_count': len(expiring_soon['fifo_entries']) + len(expiring_soon['product_inventory']),
app/blueprints/expiration/services.py:534:            'total_expiration_issues': len(expired_items['fifo_entries']) + len(expired_items['product_inventory']) + len(expiring_soon['fifo_entries']) + len(expiring_soon['product_inventory'])
app/blueprints/expiration/services.py:539:        """Mark items as expired - handles sync errors by directly adjusting FIFO entries"""
app/blueprints/expiration/services.py:541:            if item_type == 'fifo':
app/blueprints/expiration/services.py:543:                fifo_entry = InventoryHistory.query.get(item_id)
app/blueprints/expiration/services.py:544:                if not fifo_entry:
app/blueprints/expiration/services.py:547:                quantity_to_expire = quantity or fifo_entry.remaining_quantity
app/blueprints/expiration/services.py:550:                item = InventoryItem.query.get(fifo_entry.inventory_item_id)
app/blueprints/expiration/services.py:556:                    inventory_item_id=fifo_entry.inventory_item_id,
app/blueprints/expiration/services.py:560:                    unit=fifo_entry.unit,
app/blueprints/expiration/services.py:561:                    unit_cost=fifo_entry.unit_cost,
app/blueprints/expiration/services.py:565:                    is_perishable=fifo_entry.is_perishable,
app/blueprints/expiration/services.py:566:                    shelf_life_days=fifo_entry.shelf_life_days,
app/blueprints/expiration/services.py:572:                old_remaining = fifo_entry.remaining_quantity
app/blueprints/expiration/services.py:573:                fifo_entry.remaining_quantity = 0.0
app/blueprints/expiration/services.py:677:                    'fifo_code': item.fifo_code or f"#{item.id}"
app/blueprints/expiration/services.py:91:    def get_effective_expiration_date(fifo_entry) -> Optional[datetime]:
app/blueprints/expiration/services.py:98:        if not fifo_entry.is_perishable:
app/blueprints/fifo/__init__.py:16:Use app.services.inventory_adjustment.process_inventory_adjustment() instead.
app/blueprints/fifo/__init__.py:23:        "Direct import of fifo.services is deprecated. "
app/blueprints/fifo/__init__.py:24:        "Use app.services.inventory_adjustment.process_inventory_adjustment() instead.",
app/blueprints/fifo/__init__.py:3:fifo_bp = Blueprint('fifo', __name__, template_folder='templates')
app/blueprints/fifo/services.py:10:Use app.services.inventory_adjustment.process_inventory_adjustment() instead.
app/blueprints/fifo/services.py:117:    def get_expired_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:164:    def get_all_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:205:    def calculate_deduction_plan(inventory_item_id, quantity, change_type):
app/blueprints/fifo/services.py:207:        Calculate FIFO deduction plan without executing it
app/blueprints/fifo/services.py:208:        Returns: (success, deduction_plan, available_quantity)
app/blueprints/fifo/services.py:210:        # PRODUCTION SAFETY: Only allow expired inventory deduction for disposal operations
app/blueprints/fifo/services.py:215:            expired_entries = _FIFOService.get_expired_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:221:                deduction_plan = []
app/blueprints/fifo/services.py:226:                    deduction = min(entry.remaining_quantity, remaining)
app/blueprints/fifo/services.py:227:                    remaining -= deduction
app/blueprints/fifo/services.py:228:                    deduction_plan.append((entry.id, deduction, entry.unit_cost))
app/blueprints/fifo/services.py:22:# FifoInventoryGenerator removed - using generate_fifo_code directly
app/blueprints/fifo/services.py:230:                return True, deduction_plan, expired_total
app/blueprints/fifo/services.py:234:        fifo_entries = _FIFOService.get_fifo_entries(inventory_item_id)  # Already excludes expired
app/blueprints/fifo/services.py:235:        available_quantity = sum(entry.remaining_quantity for entry in fifo_entries)
app/blueprints/fifo/services.py:240:        for entry in fifo_entries:
app/blueprints/fifo/services.py:256:        deduction_plan = []
app/blueprints/fifo/services.py:258:        for entry in fifo_entries:
app/blueprints/fifo/services.py:261:            deduction = min(entry.remaining_quantity, remaining)
app/blueprints/fifo/services.py:262:            remaining -= deduction
app/blueprints/fifo/services.py:263:            deduction_plan.append((entry.id, deduction, entry.unit_cost))
app/blueprints/fifo/services.py:265:        return True, deduction_plan, available_quantity
app/blueprints/fifo/services.py:268:    def execute_deduction_plan(deduction_plan, inventory_item_id=None):
app/blueprints/fifo/services.py:269:        """Execute a deduction plan by updating remaining quantities"""
app/blueprints/fifo/services.py:26:__all__ = []  # No public exports - use inventory_adjustment service
app/blueprints/fifo/services.py:275:        for entry_id, deduct_amount, _ in deduction_plan:
app/blueprints/fifo/services.py:280:                    entry.remaining_quantity -= deduct_amount
app/blueprints/fifo/services.py:288:                    entry.remaining_quantity -= deduct_amount
app/blueprints/fifo/services.py:297:    def add_fifo_entry(inventory_item_id, quantity, change_type, unit, notes=None,
app/blueprints/fifo/services.py:29:    """TEMP compatibility shim - use process_inventory_adjustment instead"""
app/blueprints/fifo/services.py:300:                      source=None, fifo_reference_id=None, **kwargs):
app/blueprints/fifo/services.py:317:                fifo_code = f"BCH-{batch.label_code}"
app/blueprints/fifo/services.py:319:                fifo_code = generate_fifo_code(change_type, quantity, batch_id)
app/blueprints/fifo/services.py:321:            fifo_code = generate_fifo_code(change_type, quantity, batch_id)
app/blueprints/fifo/services.py:32:    def deduct_fifo(*args, **kwargs):
app/blueprints/fifo/services.py:33:        from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/fifo/services.py:341:                fifo_code=fifo_code,
app/blueprints/fifo/services.py:34:        return process_inventory_adjustment(*args, **kwargs)
app/blueprints/fifo/services.py:357:                quantity_used=0.0,  # Additions don't consume inventory
app/blueprints/fifo/services.py:364:                fifo_code=fifo_code,
app/blueprints/fifo/services.py:374:    def create_deduction_history(inventory_item_id, deduction_plan, change_type, notes,
app/blueprints/fifo/services.py:377:        Create history entries for deductions using FIFO order
app/blueprints/fifo/services.py:37:    def get_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:385:        for entry_id, deduction_amount, unit_cost in deduction_plan:
app/blueprints/fifo/services.py:387:            quantity_used_value = deduction_amount if change_type in ['spoil', 'trash', 'batch', 'use'] else 0.0
app/blueprints/fifo/services.py:389:            # Generate FIFO code for deduction
app/blueprints/fifo/services.py:38:        return _FIFOService.get_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:390:            fifo_code = generate_fifo_code(change_type, 0, batch_id)
app/blueprints/fifo/services.py:400:                    quantity_change=-deduction_amount,
app/blueprints/fifo/services.py:403:                    fifo_reference_id=entry_id,
app/blueprints/fifo/services.py:409:                    fifo_code=fifo_code,
app/blueprints/fifo/services.py:41:    def calculate_deduction_plan(inventory_item_id, quantity, change_type):
app/blueprints/fifo/services.py:420:                    quantity_change=-deduction_amount,
app/blueprints/fifo/services.py:423:                    fifo_reference_id=entry_id,
app/blueprints/fifo/services.py:429:                    fifo_code=fifo_code,
app/blueprints/fifo/services.py:42:        return _FIFOService.calculate_deduction_plan(inventory_item_id, quantity, change_type)
app/blueprints/fifo/services.py:445:        # Find the original deduction entries for this batch
app/blueprints/fifo/services.py:446:        original_deductions = InventoryHistory.query.filter(
app/blueprints/fifo/services.py:450:            InventoryHistory.fifo_reference_id.isnot(None)
app/blueprints/fifo/services.py:457:        for deduction in original_deductions:
app/blueprints/fifo/services.py:461:            original_fifo_entry = InventoryHistory.query.get(deduction.fifo_reference_id)
app/blueprints/fifo/services.py:462:            if original_fifo_entry:
app/blueprints/fifo/services.py:463:                credit_amount = min(remaining_to_credit, abs(deduction.quantity_change))
app/blueprints/fifo/services.py:466:                original_fifo_entry.remaining_quantity += credit_amount
app/blueprints/fifo/services.py:478:                    fifo_reference_id=original_fifo_entry.id,
app/blueprints/fifo/services.py:479:                    note=f"{notes} (Credited to FIFO #{original_fifo_entry.id})",
app/blueprints/fifo/services.py:47:    """DEPRECATED: Use app.services.inventory_adjustment.process_inventory_adjustment instead"""
app/blueprints/fifo/services.py:481:                    quantity_used=0.0,  # Credits don't consume inventory
app/blueprints/fifo/services.py:490:            excess_history = _FIFOService.add_fifo_entry(
app/blueprints/fifo/services.py:507:    def recount_fifo(inventory_item_id, new_quantity, note, user_id):
app/blueprints/fifo/services.py:509:        DEPRECATED: Recount logic moved to centralized inventory adjustment service.
app/blueprints/fifo/services.py:50:    def _deduct_fifo(inventory_item_id, quantity, change_type=None, notes=None, batch_id=None, created_by=None):
app/blueprints/fifo/services.py:510:        This function should not be called directly - use process_inventory_adjustment with change_type='recount'
app/blueprints/fifo/services.py:512:        raise ValueError("Direct FIFO recount calls are deprecated. Use centralized inventory_adjustment service with change_type='recount'")
app/blueprints/fifo/services.py:514:# Removed deprecated process_adjustment_via_fifo - use inventory_adjustment service
app/blueprints/fifo/services.py:516:def get_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:517:    return _FIFOService.get_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:519:def get_expired_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:51:        """DEPRECATED: Use process_inventory_adjustment instead"""
app/blueprints/fifo/services.py:520:    return _FIFOService.get_expired_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:524:def recount_fifo(inventory_item_id, new_quantity, note, user_id):
app/blueprints/fifo/services.py:525:    return _FIFOService.recount_fifo(inventory_item_id, new_quantity, note, user_id)
app/blueprints/fifo/services.py:527:def update_fifo_perishable_status(inventory_item_id, shelf_life_days):
app/blueprints/fifo/services.py:52:        logger.warning("_FIFOService._deduct_fifo is deprecated. Use process_inventory_adjustment instead.")
app/blueprints/fifo/services.py:530:    ExpirationService.update_fifo_expiration_data(inventory_item_id, shelf_life_days)
app/blueprints/fifo/services.py:53:        from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/fifo/services.py:54:        return process_inventory_adjustment(
app/blueprints/fifo/services.py:56:            quantity=-abs(quantity),  # Ensure negative for deduction
app/blueprints/fifo/services.py:64:    def get_fifo_entries(inventory_item_id):
app/blueprints/fifo/services.py:7:This module is INTERNAL to app.services.inventory_adjustment only.
app/blueprints/inventory/routes.py:123:    if fifo_filter:
app/blueprints/inventory/routes.py:164:                         fifo_filter=fifo_filter,
app/blueprints/inventory/routes.py:242:        # Use centralized inventory adjustment service for proper FIFO tracking
app/blueprints/inventory/routes.py:243:        from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/inventory/routes.py:245:        success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:284:@inventory_bp.route('/adjust/<int:id>', methods=['POST'])
app/blueprints/inventory/routes.py:286:def adjust_inventory(id):
app/blueprints/inventory/routes.py:349:                note=notes or 'Initial stock creation via adjustment modal',
app/blueprints/inventory/routes.py:351:                quantity_used=0.0,  # Restocks don't consume inventory - always 0
app/blueprints/inventory/routes.py:371:            from app.services.inventory_adjustment import validate_inventory_fifo_sync
app/blueprints/inventory/routes.py:372:            is_valid, error_msg, inv_qty, fifo_total = validate_inventory_fifo_sync(id)
app/blueprints/inventory/routes.py:374:                flash(f'Pre-adjustment validation failed: {error_msg}', 'error')
app/blueprints/inventory/routes.py:377:            # Use centralized adjustment service for regular adjustments
app/blueprints/inventory/routes.py:378:            from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/inventory/routes.py:393:            success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:406:                flash('Inventory adjusted successfully')
app/blueprints/inventory/routes.py:408:                flash('Error adjusting inventory', 'error')
app/blueprints/inventory/routes.py:411:        print(f"DEBUG: ValueError in adjust_inventory: {str(e)}")
app/blueprints/inventory/routes.py:415:        print(f"DEBUG: ImportError in adjust_inventory: {str(e)}")
app/blueprints/inventory/routes.py:419:        print(f"DEBUG: Unexpected error in adjust_inventory: {str(e)}")
app/blueprints/inventory/routes.py:471:                                note=f'Unit converted from {item.unit} to {new_unit}. Quantity adjusted from {request.form.get("original_quantity", item.quantity)} {item.unit} to {converted_quantity} {new_unit}',
app/blueprints/inventory/routes.py:473:                                quantity_used=0.0  # Unit conversions don't consume inventory - always 0
app/blueprints/inventory/routes.py:506:                ExpirationService.update_fifo_expiration_data(item.id, shelf_life_days)
app/blueprints/inventory/routes.py:514:            fifo_entries = InventoryHistory.query.filter(
app/blueprints/inventory/routes.py:521:            for entry in fifo_entries:
app/blueprints/inventory/routes.py:529:        from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/inventory/routes.py:531:        success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:543:        item.quantity = new_quantity  # Update main inventory quantity after successful FIFO adjustment
app/blueprints/inventory/routes.py:557:            quantity_used=0.0  # Cost overrides don't consume inventory - always null
app/blueprints/inventory/routes.py:5:from ...utils.fifo_generator import get_change_type_prefix, int_to_base36
app/blueprints/inventory/routes.py:637:        from app.services.inventory_adjustment import validate_inventory_fifo_sync
app/blueprints/inventory/routes.py:638:        is_valid, error_msg, inv_qty, fifo_total = validate_inventory_fifo_sync(id)
app/blueprints/inventory/routes.py:646:            'fifo_valid': is_valid,
app/blueprints/inventory/routes.py:647:            'fifo_error': error_msg,
app/blueprints/inventory/routes.py:649:            'fifo_total': fifo_total,
app/blueprints/inventory/routes.py:85:    fifo_filter = request.args.get('fifo') == 'true'
app/blueprints/products/api.py:237:# Inventory adjustments are handled by product_inventory_routes.py
app/blueprints/products/product_inventory_routes.py:135:        # Use centralized inventory adjustment service for ALL operations including recount
app/blueprints/products/product_inventory_routes.py:153:            success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:15:@product_inventory_bp.route('/adjust/<int:inventory_item_id>', methods=['POST'])
app/blueprints/products/product_inventory_routes.py:170:                flash('Product inventory adjusted successfully', 'success')
app/blueprints/products/product_inventory_routes.py:172:                flash('Error adjusting product inventory', 'error')
app/blueprints/products/product_inventory_routes.py:175:            logger.error(f"ValueError in SKU inventory adjustment: {str(e)}")
app/blueprints/products/product_inventory_routes.py:179:        error_msg = f'Error adjusting inventory: {str(e)}'
app/blueprints/products/product_inventory_routes.py:17:def adjust_sku_inventory(inventory_item_id):
app/blueprints/products/product_inventory_routes.py:180:        logger.error(f"Exception in SKU inventory adjustment: {error_msg}")
app/blueprints/products/product_inventory_routes.py:18:    """SKU inventory adjustment - uses centralized inventory adjustment service"""
app/blueprints/products/product_inventory_routes.py:193:@product_inventory_bp.route('/fifo-status/<int:sku_id>')
app/blueprints/products/product_inventory_routes.py:195:def get_sku_fifo_status(sku_id):
app/blueprints/products/product_inventory_routes.py:302:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:351:        # Use centralized inventory adjustment which properly calls FIFO service
app/blueprints/products/product_inventory_routes.py:352:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:404:        # Use centralized inventory adjustment which properly calls FIFO service
app/blueprints/products/product_inventory_routes.py:405:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:464:        # Use centralized inventory adjustment for reservation
app/blueprints/products/product_inventory_routes.py:465:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:532:        # Use the centralized inventory adjustment service which properly calls FIFO service
app/blueprints/products/product_inventory_routes.py:533:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:6:from ...services.inventory_adjustment import process_inventory_adjustment
app/blueprints/products/product_inventory_routes.py:7:from app.services.inventory_adjustment import process_inventory_adjustment
app/blueprints/products/product_inventory_routes.py:91:        # For deduction types, ensure quantity is positive here but will be made negative by centralized service
app/blueprints/products/product_inventory_routes.py:94:                logger.error(f"Quantity should be positive for deduction type: {change_type}")
app/blueprints/products/product_inventory_routes.py:95:                raise ValueError('Quantity should be positive for deduction operations')
app/blueprints/products/products.py:474:# Legacy adjust_sku route removed - use product_inventory routes instead
app/blueprints/products/reservation_routes.py:158:            print(f"  - Source FIFO ID: {reservation.source_fifo_id}")
app/blueprints/products/reservation_routes.py:163:            if reservation.source_fifo_id:
app/blueprints/products/reservation_routes.py:168:                    fifo_entry = ProductSKUHistory.query.get(reservation.source_fifo_id)
app/blueprints/products/reservation_routes.py:169:                    print(f"  - FIFO Entry (ProductSKUHistory): {fifo_entry}")
app/blueprints/products/reservation_routes.py:170:                    if fifo_entry:
app/blueprints/products/reservation_routes.py:171:                        print(f"    - Lot Number: {fifo_entry.lot_number if hasattr(fifo_entry, 'lot_number') else 'N/A'}")
app/blueprints/products/reservation_routes.py:172:                        print(f"    - Remaining Quantity: {fifo_entry.remaining_quantity}")
app/blueprints/products/reservation_routes.py:174:                    fifo_entry = InventoryHistory.query.get(reservation.source_fifo_id)
app/blueprints/products/reservation_routes.py:175:                    print(f"  - FIFO Entry (InventoryHistory): {fifo_entry}")
app/blueprints/products/reservation_routes.py:176:                    if fifo_entry:
app/blueprints/products/reservation_routes.py:177:                        print(f"    - Lot Number: {fifo_entry.lot_number if hasattr(fifo_entry, 'lot_number') else 'N/A'}")
app/blueprints/products/reservation_routes.py:178:                        print(f"    - Remaining Quantity: {fifo_entry.remaining_quantity}")
app/blueprints/products/reservation_routes.py:180:                print(f"  - WARNING: No source_fifo_id recorded for this reservation!")
app/blueprints/products/reservation_routes.py:50:            if reservation.source_fifo_id:
app/blueprints/products/reservation_routes.py:55:                fifo_entry = None
app/blueprints/products/reservation_routes.py:57:                    fifo_entry = ProductSKUHistory.query.get(reservation.source_fifo_id)
app/blueprints/products/reservation_routes.py:59:                    fifo_entry = InventoryHistory.query.get(reservation.source_fifo_id)
app/blueprints/products/reservation_routes.py:61:                if fifo_entry and hasattr(fifo_entry, 'lot_number') and fifo_entry.lot_number:
app/blueprints/products/reservation_routes.py:62:                    lot_number = fifo_entry.lot_number
app/blueprints/products/sku.py:112:                fifo_entries = ProductSKUHistory.query.filter(
app/blueprints/products/sku.py:119:                for entry in fifo_entries:
app/blueprints/products/sku.py:134:# Legacy adjustment route removed - all adjustments must go through centralized service
app/blueprints/products/sku.py:265:        # Add adjustment record for the merge
app/blueprints/products/sku.py:266:        process_inventory_adjustment(
app/blueprints/products/sku.py:41:                         fifo_filter=request.args.get('fifo', 'false').lower() == 'true',
app/blueprints/products/sku.py:6:from ...services.inventory_adjustment import process_inventory_adjustment
app/blueprints/products/sku.py:91:                    fifo_entries = ProductSKUHistory.query.filter(
app/blueprints/products/sku.py:99:                    for entry in fifo_entries:
app/blueprints/settings/routes.py:62:            'enable_fifo_tracking': True,
app/filters/product_filters.py:16:        # Parse FIFO deduction format: "FIFO deduction: 2.0 count of Base. Items used: 1. Reason: sale"
app/filters/product_filters.py:17:        fifo_match = re.search(r'FIFO deduction:\s*([\d.]+)\s*\w+', note)
app/filters/product_filters.py:18:        if fifo_match:
app/filters/product_filters.py:19:            data['quantity'] = fifo_match.group(1)
app/filters/product_filters.py:69:    @app.template_filter('get_fifo_summary')
app/filters/product_filters.py:70:    def get_fifo_summary_filter(inventory_id):
app/__init__.py:237:        'developer_bp', 'app_routes_bp', 'fifo_bp', 'api_bp', 'admin_bp'
app/__init__.py:295:        ('fifo_bp', 'blueprints.fifo', 'fifo_bp'),
app/models/inventory.py:102:    quantity_used = db.Column(db.Float, default=0.0)  # Track actual consumption vs deduction
app/models/inventory.py:119:    action = db.Column(db.String(32), nullable=False)  # deduct, credit
app/models/inventory.py:97:    fifo_reference_id = db.Column(db.Integer, db.ForeignKey('inventory_history.id'), nullable=True)
app/models/inventory.py:98:    fifo_code = db.Column(db.String(32), nullable=True)  # Base32 encoded unique identifier
app/models/product.py:112:    fifo_id = db.Column(db.String(32), nullable=True)
app/models/product.py:212:        fifo_entries = ProductSKUHistory.query.filter_by(
app/models/product.py:218:        if not fifo_entries:
app/models/product.py:224:        for entry in fifo_entries:
app/models/product.py:274:        db.UniqueConstraint('product_id', 'variant_id', 'size_label', 'fifo_id', name='unique_sku_combination'),
app/models/product.py:327:    fifo_code = db.Column(db.String(64), nullable=True)
app/models/product.py:328:    fifo_reference_id = db.Column(db.Integer, db.ForeignKey('product_sku_history.id'), nullable=True)
app/models/product.py:329:    fifo_source = db.Column(db.String(128), nullable=True)
app/models/product.py:372:    fifo_reference = db.relationship('ProductSKUHistory', remote_side=[id])
app/models/product.py:379:        db.Index('idx_fifo_code', 'fifo_code'),
app/models/reservation.py:29:    source_fifo_id = db.Column(db.Integer, nullable=True)  # Reference to the original FIFO entry
app/models/statistics.py:26:    inventory_adjustments = db.Column(db.Integer, default=0)
app/models/statistics.py:80:        user_adjustments = InventoryHistory.query.filter(
app/models/statistics.py:84:        self.inventory_adjustments = user_adjustments.count()
app/services/combined_inventory_alerts.py:20:            'expired_fifo_entries': expired_items.get('fifo_entries', []),
app/services/combined_inventory_alerts.py:22:            'expiring_fifo_entries': expiring_items.get('fifo_entries', []),
app/services/combined_inventory_alerts.py:24:            'expired_total': len(expired_items.get('fifo_entries', [])) + len(expired_items.get('product_inventory', [])),
app/services/combined_inventory_alerts.py:25:            'expiring_soon_total': len(expiring_items.get('fifo_entries', [])) + len(expiring_items.get('product_inventory', [])),
app/services/inventory_adjustment.py:114:        all_fifo_entries = InventoryHistory.query.filter(
app/services/inventory_adjustment.py:122:        print(f"DEBUG Ingredient FIFO entries found: {len(all_fifo_entries)} for item {item_id}")
app/services/inventory_adjustment.py:124:        fifo_total = sum(entry.remaining_quantity for entry in all_fifo_entries)
app/services/inventory_adjustment.py:129:    if abs(current_qty - fifo_total) > 0.001:
app/services/inventory_adjustment.py:130:        error_msg = f"SYNC ERROR: {item_name} inventory ({current_qty}) != FIFO total ({fifo_total}) [includes frozen expired]"
app/services/inventory_adjustment.py:131:        return False, error_msg, current_qty, fifo_total
app/services/inventory_adjustment.py:133:    return True, "", current_qty, fifo_total
app/services/inventory_adjustment.py:135:def process_inventory_adjustment(item_id, quantity, change_type, unit=None, notes=None, 
app/services/inventory_adjustment.py:139:    CANONICAL ENTRY POINT for all inventory adjustments.
app/services/inventory_adjustment.py:145:        item_id: InventoryItem.id to adjust
app/services/inventory_adjustment.py:146:        quantity: Amount to adjust (positive=add, negative=deduct)
app/services/inventory_adjustment.py:156:        bool: True if adjustment succeeded, False otherwise
app/services/inventory_adjustment.py:15:def validate_inventory_fifo_sync(inventory_item_id, expected_total=None):
app/services/inventory_adjustment.py:174:        logger.warning("CANONICAL ENTRY: zero quantity adjustment requested")
app/services/inventory_adjustment.py:180:            is_valid, error_msg, inv_qty, fifo_total = validate_inventory_fifo_sync(item_id, item_type)
app/services/inventory_adjustment.py:182:                raise ValueError(f"Pre-adjustment validation failed - FIFO sync error: {error_msg}")
app/services/inventory_adjustment.py:207:            return handle_recount_adjustment(item_id, quantity, notes, created_by, item_type)
app/services/inventory_adjustment.py:211:            # Handle reservation creation - deduct from available inventory
app/services/inventory_adjustment.py:215:            # This should not be called directly through inventory adjustment
app/services/inventory_adjustment.py:260:            success, deduction_plan, available_qty = FIFOService.calculate_deduction_plan(
app/services/inventory_adjustment.py:26:        fifo_total = db.session.query(func.sum(InventoryHistory.remaining_quantity)).filter(
app/services/inventory_adjustment.py:273:                # Create reservation tracking with FIFO lot details BEFORE executing deductions
app/services/inventory_adjustment.py:277:                    for fifo_entry_id, qty_deducted, cost_per_unit in deduction_plan:
app/services/inventory_adjustment.py:280:                            quantity=qty_deducted,
app/services/inventory_adjustment.py:282:                            source_fifo_id=fifo_entry_id,
app/services/inventory_adjustment.py:292:                    # If reservation creation fails, don't execute FIFO deductions
app/services/inventory_adjustment.py:295:            # Execute the deduction plan using FIFO service ONLY after reservations are created successfully
app/services/inventory_adjustment.py:296:            FIFOService.execute_deduction_plan(deduction_plan, item_id)
app/services/inventory_adjustment.py:298:            # Use FIFO service for all deductions - it routes to the correct history table
app/services/inventory_adjustment.py:299:            FIFOService.create_deduction_history(
app/services/inventory_adjustment.py:300:                item_id, deduction_plan, change_type, notes, 
app/services/inventory_adjustment.py:339:                FIFOService.add_fifo_entry(
app/services/inventory_adjustment.py:34:        is_valid = abs(float(fifo_total) - float(target_quantity)) < 0.001
app/services/inventory_adjustment.py:373:        # Validate inventory/FIFO sync after adjustment
app/services/inventory_adjustment.py:374:        is_valid, error_msg, inv_qty, fifo_total = validate_inventory_fifo_sync(item_id, item_type)
app/services/inventory_adjustment.py:378:            raise ValueError(f"Inventory adjustment failed validation: {error_msg}")
app/services/inventory_adjustment.py:37:            'fifo_total': float(fifo_total),
app/services/inventory_adjustment.py:381:        final_is_valid, final_error_msg, final_inv_qty, final_fifo_total = validate_inventory_fifo_sync(item_id, item_type)
app/services/inventory_adjustment.py:385:            raise ValueError(f"Post-adjustment validation failed - FIFO sync error: {final_error_msg}")
app/services/inventory_adjustment.py:39:            'difference': float(fifo_total) - float(target_quantity),
app/services/inventory_adjustment.py:400:def handle_recount_adjustment(item_id, target_quantity, notes=None, created_by=None, item_type='ingredient'):
app/services/inventory_adjustment.py:420:        all_fifo_entries = FIFOService.get_all_fifo_entries(item_id)
app/services/inventory_adjustment.py:421:        current_fifo_total = sum(entry.remaining_quantity for entry in all_fifo_entries)
app/services/inventory_adjustment.py:426:        fifo_change = target_quantity - current_fifo_total
app/services/inventory_adjustment.py:431:        print(f"  Current FIFO Total: {current_fifo_total} (change: {fifo_change})")
app/services/inventory_adjustment.py:433:        # Use same unit logic as other adjustments
app/services/inventory_adjustment.py:436:        # Handle FIFO adjustments first
app/services/inventory_adjustment.py:437:        if fifo_change != 0:
app/services/inventory_adjustment.py:438:            if fifo_change < 0:
app/services/inventory_adjustment.py:439:                # Need to reduce FIFO - deduct from existing lots
app/services/inventory_adjustment.py:440:                deduction_needed = abs(fifo_change)
app/services/inventory_adjustment.py:442:                # Protect against going negative - can't deduct more than we have
app/services/inventory_adjustment.py:443:                if deduction_needed > current_fifo_total:
app/services/inventory_adjustment.py:444:                    print(f"RECOUNT: Capping deduction at available FIFO total ({current_fifo_total})")
app/services/inventory_adjustment.py:445:                    deduction_needed = current_fifo_total
app/services/inventory_adjustment.py:447:                if deduction_needed > 0:
app/services/inventory_adjustment.py:448:                    # Calculate deduction plan using oldest first (standard FIFO)
app/services/inventory_adjustment.py:449:                    success, deduction_plan, _ = FIFOService.calculate_deduction_plan(
app/services/inventory_adjustment.py:450:                        item_id, deduction_needed, 'recount'
app/services/inventory_adjustment.py:454:                        # Execute deductions
app/services/inventory_adjustment.py:455:                        FIFOService.execute_deduction_plan(deduction_plan, item_id)
app/services/inventory_adjustment.py:457:                        # Create deduction history entries
app/services/inventory_adjustment.py:458:                        FIFOService.create_deduction_history(
app/services/inventory_adjustment.py:459:                            item_id, deduction_plan, 'recount', notes or "Recount deduction",
app/services/inventory_adjustment.py:462:                        print(f"RECOUNT: Deducted {deduction_needed} from FIFO lots")
app/services/inventory_adjustment.py:464:                        print(f"RECOUNT: Could not calculate deduction plan")
app/services/inventory_adjustment.py:467:                addition_needed = fifo_change
app/services/inventory_adjustment.py:48:def validate_inventory_fifo_sync(item_id, item_type=None):
app/services/inventory_adjustment.py:515:                        FIFOService.add_fifo_entry(
app/services/inventory_adjustment.py:51:    Returns: (is_valid, error_message, inventory_qty, fifo_total)
app/services/inventory_adjustment.py:520:                            notes=f"Recount addition: {notes or 'Physical count adjustment'}",
app/services/inventory_adjustment.py:528:                    FIFOService.add_fifo_entry(
app/services/inventory_adjustment.py:533:                        notes=f"Recount addition - new lot: {notes or 'Physical count adjustment'}",
app/services/inventory_adjustment.py:542:        # 1. FIFOService.create_deduction_history() for deductions (already creates proper FIFO entries)
app/services/inventory_adjustment.py:543:        # 2. FIFOService.add_fifo_entry() for new lots (already creates proper FIFO entries)
app/services/inventory_adjustment.py:552:        final_fifo_entries = FIFOService.get_all_fifo_entries(item_id)
app/services/inventory_adjustment.py:553:        final_fifo_total = sum(entry.remaining_quantity for entry in final_fifo_entries)
app/services/inventory_adjustment.py:557:        print(f"  FIFO Total: {final_fifo_total}")
app/services/inventory_adjustment.py:558:        print(f"  Sync Status: {'✓' if abs(item.quantity - final_fifo_total) < 0.001 else '✗'}")
app/services/inventory_adjustment.py:572:    def adjust_inventory(*args, **kwargs):
app/services/inventory_adjustment.py:573:        """Legacy method - use process_inventory_adjustment instead"""
app/services/inventory_adjustment.py:574:        return process_inventory_adjustment(*args, **kwargs)
app/services/inventory_adjustment.py:577:    def process_inventory_adjustment(*args, **kwargs):
app/services/inventory_adjustment.py:578:        return process_inventory_adjustment(*args, **kwargs)
app/services/inventory_adjustment.py:581:    def validate_inventory_fifo_sync(*args, **kwargs):
app/services/inventory_adjustment.py:582:        return validate_inventory_fifo_sync(*args, **kwargs)
app/services/inventory_adjustment.py:78:        all_fifo_entries = ProductSKUHistory.query.filter(
app/services/inventory_adjustment.py:86:        print(f"DEBUG ProductSKU FIFO entries found: {len(all_fifo_entries)} for item {item_id}")
app/services/inventory_adjustment.py:88:        fifo_total = sum(entry.remaining_quantity for entry in all_fifo_entries)
app/services/inventory_adjustment.py:94:        if fifo_total == 0 and current_qty > 0:
app/services/inventory_adjustment.py:96:            return True, "", current_qty, fifo_total
app/services/pos_integration.py:103:                source_fifo_id=source_fifo_id,
app/services/pos_integration.py:117:            FIFOService.add_fifo_entry(
app/services/pos_integration.py:127:                fifo_reference_id=source_fifo_id
app/services/pos_integration.py:18:        Reserve inventory using new reservation model - acts like regular deduction
app/services/pos_integration.py:193:                FIFOService.add_fifo_entry(
app/services/pos_integration.py:202:                    fifo_reference_id=reservation.source_fifo_id
app/services/pos_integration.py:67:            fifo_entries = FIFOService.get_fifo_entries(item_id)
app/services/pos_integration.py:68:            source_fifo_id = None
app/services/pos_integration.py:71:            if fifo_entries:
app/services/pos_integration.py:73:                oldest_entry = fifo_entries[0]
app/services/pos_integration.py:74:                source_fifo_id = oldest_entry.id
app/services/pos_integration.py:78:            deduction_success = process_inventory_adjustment(
app/services/pos_integration.py:7:from .inventory_adjustment import process_inventory_adjustment
app/services/pos_integration.py:87:            if not deduction_success:
app/services/pos_integration.py:88:                return False, "Failed to deduct from available inventory"
app/services/pos_integration.py:8:from app.services.inventory_adjustment import process_inventory_adjustment
app/services/product_service.py:158:                'fifo_id': sku.fifo_id
app/services/reservation_service.py:11:    def create_reservation(inventory_item_id, quantity, order_id, source_fifo_id, unit_cost, customer=None, sale_price=None, notes="", source="manual"):
app/services/reservation_service.py:13:        Create a new product reservation by deducting from specific FIFO lot
app/services/reservation_service.py:14:        This should only be called AFTER FIFO deduction has been calculated and executed
app/services/reservation_service.py:40:            source_fifo_id=source_fifo_id,  # Track which FIFO lot this came from
app/services/reservation_service.py:5:from ..utils import generate_fifo_code
app/services/reservation_service.py:76:            source_entry = ProductSKUHistory.query.get(reservation.source_fifo_id)
app/services/reservation_service.py:78:                print(f"Warning: Source FIFO entry {reservation.source_fifo_id} not found for reservation")
app/services/reservation_service.py:83:            print(f"Credited {reservation.quantity} back to lot {reservation.source_fifo_id}")
app/services/reservation_service.py:93:                notes=f"Released reservation - credited back to lot {reservation.source_fifo_id}",
app/services/reservation_service.py:96:                fifo_reference_id=reservation.source_fifo_id,
app/services/reservation_service.py:97:                fifo_code=generate_fifo_code('unreserved'),
app/services/statistics_service.py:78:    def increment_inventory_adjustment(user_id, organization_id):
app/services/statistics_service.py:79:        """Increment inventory adjustment count"""
app/services/statistics_service.py:82:            user_stats.inventory_adjustments += 1
app/services/statistics_service.py:86:            print(f"Error updating inventory adjustment statistics: {e}")
app/services/stock_check.py:36:        from ..services.inventory_adjustment import process_inventory_adjustment
app/services/stock_check.py:37:        available_entries = FIFOService.get_fifo_entries(ingredient.id)  # This already excludes expired
app/services/stock_check.py:41:        # The get_fifo_entries method already filters out expired entries, but this confirms it
app/static/js/batches/fifo_modal.js:120:                        <a href="/inventory/view/${inventory_item.id}#fifo-entry-${usage.fifo_id}" 
app/static/js/batches/fifo_modal.js:121:                           target="_blank" class="fifo-ingredient-link">
app/static/js/batches/fifo_modal.js:122:                            #${usage.fifo_id}
app/static/js/batches/fifo_modal.js:12:    document.getElementById('fifoModalContent').innerHTML = `
app/static/js/batches/fifo_modal.js:142:    document.getElementById('fifoModalContent').innerHTML = html;
app/static/js/batches/fifo_modal.js:175:            ingredient.fifo_usage.forEach(usage => {
app/static/js/batches/fifo_modal.js:185:                        <td><small class="text-muted">#${usage.fifo_id}</small></td>
app/static/js/batches/fifo_modal.js:205:    document.getElementById('fifoModalContent').innerHTML = html;
app/static/js/batches/fifo_modal.js:215:async function getLifeRemaining(fifoId) {
app/static/js/batches/fifo_modal.js:217:        const response = await fetch(`/expiration/api/life-remaining/${fifoId}`);
app/static/js/batches/fifo_modal.js:227:    document.getElementById('fifoModalContent').innerHTML = `
app/static/js/batches/fifo_modal.js:29:    const modal = new bootstrap.Modal(document.getElementById('fifoInsightModal'));
app/static/js/batches/fifo_modal.js:32:    document.getElementById('fifoModalTitle').textContent = 'Batch Inventory Summary';
app/static/js/batches/fifo_modal.js:35:    document.getElementById('fifoModalContent').innerHTML = `
app/static/js/batches/fifo_modal.js:53:        const response = await fetch(`/api/fifo-details/${inventoryId}?batch_id=${batchId}`);
app/static/js/batches/fifo_modal.js:6:    const modal = new bootstrap.Modal(document.getElementById('fifoInsightModal'));
app/static/js/batches/fifo_modal.js:9:    document.getElementById('fifoModalTitle').textContent = `FIFO Details: ${ingredientName}`;
app/static/js/inventory/inventory_adjust.js:10:    const adjustmentForms = document.querySelectorAll('.adjustment-form');
app/static/js/inventory/inventory_adjust.js:12:    adjustmentForms.forEach(form => {
app/static/js/inventory/inventory_adjust.js:1:// Inventory adjustment functionality
app/static/js/inventory/inventory_adjust.js:85:    return changeTypeSelect ? changeTypeSelect.value : 'adjustment';
app/static/js/inventory/inventory_adjust.js:9:    // Initialize any inventory adjustment specific functionality here
app/static/js/inventory/inventory_view.js:107:    // Check URL for fifo filter parameter and set checkbox state
app/static/js/inventory/inventory_view.js:109:    if (urlParams.get('fifo') === 'true') {
app/static/js/inventory/inventory_view.js:110:        document.getElementById('fifoFilter').checked = true;
app/static/js/inventory/inventory_view.js:116:    const fifoFilter = document.getElementById('fifoFilter');
app/static/js/inventory/inventory_view.js:122:    if (fifoFilter.checked) {
app/static/js/inventory/inventory_view.js:123:        url.searchParams.set('fifo', 'true');
app/static/js/inventory/inventory_view.js:125:        url.searchParams.delete('fifo');
app/static/js/products/product_inventory.js:102:            showNotification(data.error || 'Failed to adjust inventory', 'error');
app/static/js/products/product_inventory.js:107:        console.error('Error adjusting inventory:', error);
app/static/js/products/product_inventory.js:162:window.adjustSkuInventory = adjustSkuInventory;
app/static/js/products/product_inventory.js:35:function adjustSkuInventory(skuId, data) {
app/static/js/products/product_inventory.js:36:    return fetch(`/products/inventory/adjust/${skuId}`, {
app/static/js/products/product_inventory.js:51:        console.error('Error adjusting SKU inventory:', error);
app/static/js/products/product_inventory.js:84:function adjustSkuInventory(skuId, adjustmentData) {
app/static/js/products/product_inventory.js:85:    const url = `/api/products/sku/${skuId}/adjust`;
app/static/js/products/product_inventory.js:93:        body: JSON.stringify(adjustmentData)
app/static/js/products/product_inventory.js:98:            showNotification('Inventory adjusted successfully', 'success');
app/static/style.css:651:/* Responsive adjustments */
app/static/style.css:831:.fifo-ingredient-link {
app/static/style.css:836:.fifo-ingredient-link:hover {
app/static/style.css:841:.fifo-ingredient-link:focus {
app/static/style.css:846:#fifoInsightModal .table th {
app/static/style.css:854:#fifoInsightModal .table td {
app/static/style.css:862:#fifoInsightModal .table td strong {
app/static/style.css:867:#fifoInsightModal .table-hover tbody tr:hover {
app/static/style.css:871:#fifoInsightModal .badge {
app/static/style.css:876:#fifoInsightModal h6 {
app/templates/batches/batch_in_progress.html:373:{% include 'components/batch/fifo_insight_modal.html' %}
app/templates/batches/batch_in_progress.html:382:<script src="{{ url_for('static', filename='js/batches/fifo_modal.js') }}"></script>
app/templates/batches/view_batch.html:487:{% include 'components/batch/fifo_insight_modal.html' %}
app/templates/batches/view_batch.html:489:<script src="{{ url_for('static', filename='js/batches/fifo_modal.js') }}"></script>
app/templates/components/batch/fifo_insight_modal.html:10:        <div id="fifoModalContent">
app/templates/components/batch/fifo_insight_modal.html:2:<div class="modal fade" id="fifoInsightModal" tabindex="-1">
app/templates/components/batch/fifo_insight_modal.html:6:        <h5 class="modal-title" id="fifoModalTitle">FIFO Inventory Details</h5>
app/templates/components/sku/history_table.html:117:                            {% if entry.fifo_code %}
app/templates/components/sku/history_table.html:118:                                <small class="font-monospace">{{ entry.fifo_code }}</small>
app/templates/components/sku/history_table.html:227:                                            data-bs-target="#adjustFifoModal"
app/templates/components/sku/history_table.html:251:                        <a class="page-link" href="{{ url_for('products.view_sku', sku_id=sku.id, page=history_pagination.prev_num, fifo=request.args.get('fifo')) }}">Previous</a>
app/templates/components/sku/history_table.html:259:                                <a class="page-link" href="{{ url_for('products.view_sku', sku_id=sku.id, page=page_num, fifo=request.args.get('fifo')) }}">{{ page_num }}</a>
app/templates/components/sku/history_table.html:275:                        <a class="page-link" href="{{ url_for('products.view_sku', sku_id=sku.id, page=history_pagination.next_num, fifo=request.args.get('fifo')) }}">Next</a>
app/templates/components/sku/history_table.html:30:                    {% if not fifo_filter or entry.remaining_quantity > 0 %}
app/templates/components/sku/history_table.html:52:                            {% if entry.fifo_reference_id %}
app/templates/components/sku/history_table.html:53:                                {% set ref_entry = history|selectattr('id', 'equalto', entry.fifo_reference_id)|first %}
app/templates/components/sku/history_table.html:54:                                {% if ref_entry and ref_entry.fifo_code %}
app/templates/components/sku/history_table.html:55:                                    <a href="#entry-{{ entry.fifo_reference_id }}" class="text-primary">
app/templates/components/sku/history_table.html:56:                                        <small class="font-monospace">{{ ref_entry.fifo_code }}</small>
app/templates/components/sku/history_table.html:58:                                {% elif entry.fifo_source %}
app/templates/components/sku/history_table.html:59:                                    <a href="#entry-{{ entry.fifo_reference_id }}" class="text-primary">
app/templates/components/sku/history_table.html:60:                                        {{ entry.fifo_source }}
app/templates/components/sku/history_table.html:63:                                    <a href="#entry-{{ entry.fifo_reference_id }}" class="text-primary">
app/templates/components/sku/history_table.html:64:                                        Ref #{{ entry.fifo_reference_id }}
app/templates/components/sku/modals.html:103:            <form method="POST" id="adjustFifoForm" action="{{ url_for('product_inventory.adjust_sku_inventory', inventory_item_id=sku.inventory_item_id) }}">
app/templates/components/sku/modals.html:105:                <input type="hidden" name="action" value="adjust_fifo">
app/templates/components/sku/modals.html:111:                            <option value="">Select adjustment type</option>
app/templates/components/sku/modals.html:140:                            <span id="quantityHelp">Select an adjustment type to see quantity instructions.</span>
app/templates/components/sku/modals.html:214:    // Handle FIFO adjustment type changes
app/templates/components/sku/modals.html:226:            // Update quantity help text based on adjustment type
app/templates/components/sku/modals.html:250:                        quantityHelp.textContent = 'Select an adjustment type to see quantity instructions.';
app/templates/components/sku/modals.html:295:// Function for opening FIFO adjustment modal with specific action categories
app/templates/components/sku/modals.html:297:    const modal = document.getElementById('adjustFifoModal');
app/templates/components/sku/modals.html:96:<div class="modal fade" id="adjustFifoModal" tabindex="-1">
app/templates/developer/edit_tier.html:420:        'inventory.adjust',
app/templates/developer/edit_tier.html:421:        'inventory.fifo',
app/templates/expiration/alerts.html:105:                                            <button class="btn btn-outline-danger btn-sm" onclick="markAsExpired('fifo', {{ item.fifo_id }})">
app/templates/expiration/alerts.html:131:                    {% if expiring_soon.fifo_entries %}
app/templates/expiration/alerts.html:132:                        <span class="badge bg-warning text-dark">{{ expiring_soon.fifo_entries|length }}</span>
app/templates/expiration/alerts.html:136:                    {% if expiring_soon.fifo_entries %}
app/templates/expiration/alerts.html:151:                                    {% for item in expiring_soon.fifo_entries %}
app/templates/expiration/alerts.html:160:                                                    {{ item.fifo_code or item.lot_number or ('LOT-' + item.fifo_id|string) }}
app/templates/expiration/alerts.html:163:                                                <span class="text-muted">{{ item.fifo_code or ('LOT-' + item.fifo_id|string) }}</span>
app/templates/expiration/alerts.html:168:                                        <td><small class="text-muted">#{{ item.fifo_id }}</small></td>
app/templates/expiration/alerts.html:16:                {% if expired.fifo_entries|length + expiring_soon.fifo_entries|length > 0 %}
app/templates/expiration/alerts.html:17:                <span class="badge bg-danger ms-2">{{ expired.fifo_entries|length + expiring_soon.fifo_entries|length }}</span>
app/templates/expiration/alerts.html:39:                            <h3 class="text-danger mb-2">{{ expired.fifo_entries|length }}</h3>
app/templates/expiration/alerts.html:47:                            <h3 class="text-warning mb-2">{{ expiring_soon.fifo_entries|length }}</h3>
app/templates/expiration/alerts.html:61:                    {% if expired.fifo_entries %}
app/templates/expiration/alerts.html:62:                        <span class="badge bg-danger">{{ expired.fifo_entries|length }}</span>
app/templates/expiration/alerts.html:66:                    {% if expired.fifo_entries %}
app/templates/expiration/alerts.html:82:                                    {% for item in expired.fifo_entries %}
app/templates/expiration/alerts.html:90:                                                    {{ item.fifo_code or item.lot_number or ('LOT-' + item.fifo_id|string) }}
app/templates/expiration/alerts.html:93:                                                <span class="text-muted">{{ item.fifo_code or ('LOT-' + item.fifo_id|string) }}</span>
app/templates/expiration/alerts.html:98:                                        <td><small class="text-muted">#{{ item.fifo_id }}</small></td>
app/templates/inventory/components/adjustment_form.html:7:    <form method="POST" action="{{ url_for('inventory.adjust_inventory', id=item.id) }}">
app/templates/inventory/components/history_table.html:103:                          <a href="{{ url_for('inventory.view_inventory', id=item.id) }}#entry-{{ entry.fifo_reference_id }}">
app/templates/inventory/components/history_table.html:104:                            {{ get_change_type_prefix('restock') }}-{{ int_to_base36(entry.fifo_reference_id).zfill(6) }}
app/templates/inventory/components/history_table.html:125:                        {% if entry.fifo_code %}
app/templates/inventory/components/history_table.html:127:                            {{ entry.fifo_code }}
app/templates/inventory/components/history_table.html:29:                           <div class='fifo-prefix-guide'>
app/templates/inventory/components/history_table.html:88:                      {% if entry.fifo_reference_id %}
app/templates/inventory/components/history_table.html:89:                        {% set ref_entry = history|selectattr('id', 'equalto', entry.fifo_reference_id)|first %}
app/templates/inventory/components/history_table.html:91:                          <a href="{{ url_for('inventory.view_inventory', id=item.id) }}#entry-{{ entry.fifo_reference_id }}">
app/templates/inventory/components/history_table.html:94:                        {% elif ref_entry and ref_entry.fifo_code %}
app/templates/inventory/components/history_table.html:95:                          <a href="{{ url_for('inventory.view_inventory', id=item.id) }}#entry-{{ entry.fifo_reference_id }}">
app/templates/inventory/components/history_table.html:96:                            {{ ref_entry.fifo_code }}
app/templates/inventory/components/history_table.html:99:                          <a href="{{ url_for('inventory.view_inventory', id=item.id) }}#entry-{{ entry.fifo_reference_id }}">
app/templates/inventory_list.html:100:            return fetch('/inventory/adjust/' + row.id, {
app/templates/inventory_list.html:468:            return fetch('/inventory/adjust/' + row.id, {
app/templates/inventory/view.html:121:        <form id="initialInventoryForm" method="POST" action="{{ url_for('inventory.adjust_inventory', id=item.id) }}">
app/templates/inventory/view.html:63:                      <button class="btn btn-outline-danger btn-sm" onclick="markAsExpired('fifo', {{ entry.id }})">
app/templates/inventory/view.html:76:        {% include "inventory/components/adjustment_form.html" %}
app/templates/inventory/view.html:84:                <input class="form-check-input" type="checkbox" id="fifoFilter" onchange="toggleFifoFilter()">
app/templates/inventory/view.html:85:                <label class="form-check-label" for="fifoFilter">
app/templates/layout.html:333:    <script src="{{ url_for('static', filename='js/inventory/inventory_adjust.js') }}"></script>
app/templates/legal/cookie_policy.html:73:                <p>By continuing to use our website, you consent to our use of cookies as described in this policy. You can withdraw consent at any time by adjusting your browser settings or contacting us.</p>
app/templates/products/view_product.html:266:          <p class="text-muted">Try adjusting your search criteria</p>
app/templates/products/view_product.html:423:/* Responsive adjustments */
app/templates/products/view_sku.html:162:                        <input class="form-check-input" type="checkbox" id="fifoFilter" {{ 'checked' if fifo_filter else '' }} onchange="toggleFifoFilter()">
app/templates/products/view_sku.html:163:                        <label class="form-check-label" for="fifoFilter">
app/templates/products/view_sku.html:279:    const checkbox = document.getElementById('fifoFilter');
app/templates/products/view_sku.html:283:        url.searchParams.set('fifo', 'true');
app/templates/products/view_sku.html:285:        url.searchParams.delete('fifo');
app/templates/products/view_sku.html:62:    fetch("{{ url_for('product_inventory.adjust_sku_inventory', inventory_item_id=sku.inventory_item_id) }}", {
app/templates/products/view_sku.html:75:        alert('Error processing adjustment');
app/templates/products/view_variation.html:249:        <p>To add or adjust stock for this variant, please use the SKU management page.</p>
app/templates/products/view_variation.html:266:  // Handle deduct modal data - with proper null checks
app/templates/products/view_variation.html:267:  const deductModal = document.getElementById('deductModal');
app/templates/products/view_variation.html:268:  if (deductModal) {
app/templates/products/view_variation.html:269:    deductModal.addEventListener('show.bs.modal', function (event) {
app/templates/products/view_variation.html:276:      const deductVariantEl = document.getElementById('deductVariant');
app/templates/products/view_variation.html:277:      const deductSizeEl = document.getElementById('deductSize');
app/templates/products/view_variation.html:279:      if (deductVariantEl) deductVariantEl.value = variant || '';
app/templates/products/view_variation.html:280:      if (deductSizeEl) deductSizeEl.value = size || '';
app/templates/recipe_list.html:288:            <p class="text-muted">Try adjusting your search criteria</p>
app/utils/fifo_generator.py:101:def validate_fifo_code(fifo_code):
app/utils/fifo_generator.py:103:    parsed = parse_fifo_code(fifo_code)
app/utils/fifo_generator.py:10:def get_fifo_prefix(change_type, is_lot=False):
app/utils/fifo_generator.py:146:    """Legacy function - use get_fifo_prefix instead"""
app/utils/fifo_generator.py:147:    return get_fifo_prefix(change_type, False)
app/utils/fifo_generator.py:14:    - Action prefixes: Events that consume or adjust quantity
app/utils/fifo_generator.py:150:def generate_fifo_id(change_type):
app/utils/fifo_generator.py:151:    """Legacy function - use generate_fifo_code instead"""
app/utils/fifo_generator.py:152:    return generate_fifo_code(change_type)
app/utils/fifo_generator.py:37:def generate_fifo_code(change_type, remaining_quantity=0, batch_label=None):
app/utils/fifo_generator.py:69:        prefix = get_fifo_prefix(change_type, is_lot)
app/utils/fifo_generator.py:76:def generate_batch_fifo_code(batch_label, change_type='finished_batch'):
app/utils/fifo_generator.py:80:def parse_fifo_code(fifo_code):
app/utils/fifo_generator.py:87:    if not fifo_code or '-' not in fifo_code:
app/utils/fifo_generator.py:90:    parts = fifo_code.split('-', 1)
app/utils/__init__.py:2:from .fifo_generator import generate_fifo_code
