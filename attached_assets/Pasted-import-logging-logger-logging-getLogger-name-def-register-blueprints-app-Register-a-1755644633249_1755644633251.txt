import logging
logger = logging.getLogger(__name__)

def register_blueprints(app):
    """Register all application blueprints"""

    # Public API that must be before auth
    try:
        from app.blueprints.api.public import public_api
        app.register_blueprint(public_api)
    except Exception as e:
        logger.warning(f"Public API registration failed: {e}")

    # Core blueprints
    _core_registrations = [
        ("app.blueprints.auth.routes", "auth_bp", "/auth"),
        ("app.blueprints.recipes.routes", "recipes_bp", "/recipes"),
        ("app.blueprints.inventory.routes", "inventory_bp", "/inventory"),
        ("app.blueprints.batches.routes", "batches_bp", "/batches"),
        ("app.blueprints.batches.finish_batch", "finish_batch_bp", "/batches"),
        ("app.blueprints.batches.cancel_batch", "cancel_batch_bp", "/batches"),
        ("app.blueprints.batches.start_batch", "start_batch_bp", "/start-batch"),
        ("app.blueprints.conversion.routes", "conversion_bp", "/conversion"),
        ("app.blueprints.expiration.routes", "expiration_bp", "/expiration"),
        ("app.blueprints.settings.routes", "settings_bp", "/settings"),
        ("app.blueprints.timers.routes", "timers_bp", "/timers"),
        ("app.blueprints.organization.routes", "organization_bp", "/organization"),
    ]

    for module_path, bp_name, prefix in _core_registrations:
        try:
            module = __import__(module_path, fromlist=[bp_name])
            bp = getattr(module, bp_name)
            app.register_blueprint(bp, url_prefix=prefix)
        except Exception as e:
            logger.warning(f"Failed to register {bp_name} from {module_path}: {e}")

    # Standalone blueprints
    _standalone_blueprints = [
        ("app.blueprints.developer.routes", "developer_bp"),
        ("app.routes.app_routes", "app_routes_bp"),
        ("app.blueprints.fifo", "fifo_bp"),
        ("app.blueprints.api.routes", "api_bp"),
        ("app.blueprints.admin.admin_routes", "admin_bp"),
        ("app.routes.waitlist_routes", "waitlist_bp"),
        ("app.routes.legal_routes", "legal_bp"),
    ]

    for module_path, bp_name in _standalone_blueprints:
        try:
