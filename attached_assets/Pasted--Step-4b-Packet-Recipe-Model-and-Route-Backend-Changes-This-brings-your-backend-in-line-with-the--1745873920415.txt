ðŸ“¦ Step 4b Packet: Recipe Model and Route Backend Changes
This brings your backend in line with the new Recipe Edit page form fields you just installed.

ðŸ“‚ File 1: /models/recipe.py â€” Update Recipe Model
âœ… Add these fields to your Recipe model:

python
Copy
Edit
class Recipe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)

    # --- New Fields ---
    predicted_yield = db.Column(db.Float, default=0.0)  # Example: 24.0
    predicted_yield_unit = db.Column(db.String(50), default="oz")  # Example: 'oz', 'ml', 'count'

    requires_containers = db.Column(db.Boolean, default=False)  # Does this recipe need containers?
    allowed_containers = db.Column(db.PickleType, default=list)  # List of container IDs (simple and flexible)
    # (PickleType lets you store Python lists directly)

    # --- Existing Fields (Ingredients, Instructions, etc) ---
    # ingredients = relationship('Ingredient', backref='recipe')
    # instructions = db.Column(db.Text)
    # etc...

    def __repr__(self):
        return f'<Recipe {self.name}>'
ðŸ§  Why This Structure?

Field	Purpose
predicted_yield	How much product the recipe produces at scale 1x
predicted_yield_unit	Unit type â€” oz, ml, g, count
requires_containers	Boolean flag to trigger container selection logic
allowed_containers	List of container IDs allowed (stored easily)
âœ… No complex new tables needed.
âœ… Simple scalable logic.

ðŸ“‚ File 2: /routes/recipes.py â€” Update Create/Edit Recipe Routes
âœ… Modify the POST handlers for new recipe creation and editing.

Inside your create_recipe and edit_recipe routes,
add these when processing the form data:

python
Copy
Edit
# Capture new predicted yield fields
recipe.predicted_yield = float(request.form.get('predicted_yield') or 0.0)
recipe.predicted_yield_unit = request.form.get('predicted_yield_unit') or ""

# Capture requires_containers toggle
recipe.requires_containers = True if request.form.get('requires_containers') else False

# Capture allowed containers (only if containers are required)
if recipe.requires_containers:
    allowed = request.form.getlist('allowed_containers')
    recipe.allowed_containers = [int(container_id) for container_id in allowed]
else:
    recipe.allowed_containers = []
ðŸ“‹ Notes:
request.form.get('predicted_yield') â€” safe even if empty.

request.form.getlist('allowed_containers') â€” grabs multiple selected container IDs.

Always save allowed_containers as a list of ints so matching later is easy (not strings).

ðŸ“œ Full Summary of What This Packet Does:
âœ… Adds missing backend fields to Recipe model (predicted_yield, predicted_yield_unit, requires_containers, allowed_containers).
âœ… Modifies create/edit routes to process the new form fields correctly.
âœ… Enables strict/flex Plan Production logic later without hacky workarounds.

ðŸ“£ Replit Upload Instructions for This Packet:

Step	Action
1	Update /models/recipe.py with new fields
2	Update /routes/recipes.py POST handlers for create and edit to capture the new form fields
3	Confirm database migration or test data reset if necessary (since model changed)
âš¡ Short Recap:

Step	Status
Recipe Edit Page Form Updated	âœ… Done
Recipe Model Backend Updated (this packet)	âœ… Now ready
Recipe Create/Edit Route Updated	âœ… Now ready
âœ… You can now correctly save and edit:

Projected Yield

Whether Containers are Needed

Which Containers are Allowed

