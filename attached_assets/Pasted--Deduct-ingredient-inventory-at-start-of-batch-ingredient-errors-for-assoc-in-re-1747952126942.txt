
    # Deduct ingredient inventory at start of batch
    ingredient_errors = []

    for assoc in recipe.recipe_ingredients:
        ingredient = assoc.inventory_item
        if not ingredient:
            continue

        required_amount = assoc.amount * scale

        try:
            conversion_result = ConversionEngine.convert_units(
                required_amount,
                assoc.unit,
                ingredient.unit,
                ingredient_id=ingredient.id,
                density=ingredient.density or (ingredient.category.default_density if ingredient.category else None)
            )
            required_converted = conversion_result['converted_value']

            if ingredient.intermediate:
                # Handle FIFO deduction for intermediate ingredients
                success, used_batches = FIFOService.deduct_intermediate_fifo(
                    ingredient.name,
                    ingredient.unit,
                    required_converted
                )
                if not success:
                    ingredient_errors.append(f"Not enough {ingredient.name} in stock (FIFO).")
                    continue

                # Create BatchIngredient records for each used batch
                for batch_id, amount in used_batches:
                    batch_ingredient = BatchIngredient(
                        batch_id=new_batch.id,
                        ingredient_id=ingredient.id,
                        amount_used=amount,
                        unit=ingredient.unit,
                        cost_per_unit=ingredient.cost_per_unit,
                        source_batch_id=batch_id
                    )
                    db.session.add(batch_ingredient)
            else:
                # Regular inventory deduction using FIFO
                from blueprints.fifo.services import deduct_fifo
                success, deductions = deduct_fifo(
                    ingredient.id,
                    required_converted,
                    'batch',
                    f"Used in batch {label_code}",
                    batch_id=new_batch.id
                )
                
                if not success:
                    ingredient_errors.append(f"Not enough {ingredient.name} in stock (FIFO).")
                    continue

                # Create BatchIngredient records for each FIFO deduction
                for entry_id, deduct_amount, unit_cost in deductions:
                    batch_ingredient = BatchIngredient(
                        batch_id=new_batch.id,
                        ingredient_id=ingredient.id,
                        amount_used=deduct_amount,
                        unit=ingredient.unit,
                        cost_per_unit=unit_cost
                    )
                    db.session.add(batch_ingredient)
        except ValueError as e: