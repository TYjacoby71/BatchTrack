
"""rename is_reference_category to is_global_category

Revision ID: 20250913_01_rename_reference_category_to_global  
Revises: 20250911_06_fix_inventory_name_constraint
Create Date: 2025-09-13 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '20250913_01_rename_reference_category_to_global'
down_revision = '20250911_06_fix_inventory_name_constraint'
branch_labels = None
depends_on = None


def table_exists(table_name):
    """Check if table exists"""
    bind = op.get_bind()
    result = bind.execute(text(f"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '{table_name}')"))
    return result.fetchone()[0]


def column_exists(table_name, column_name):
    """Check if column exists in table"""
    bind = op.get_bind()
    result = bind.execute(text(f"SELECT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = '{table_name}' AND column_name = '{column_name}')"))
    return result.fetchone()[0]


def upgrade():
    """Rename is_reference_category to is_global_category for clarity"""
    print("ðŸ”„ Renaming is_reference_category to is_global_category...")
    
    if table_exists('ingredient_category'):
        # Add the new column
        if not column_exists('ingredient_category', 'is_global_category'):
            print("   Adding is_global_category column...")
            op.add_column('ingredient_category', sa.Column('is_global_category', sa.Boolean, default=False))
            
        # Copy data from old column to new column
        if column_exists('ingredient_category', 'is_reference_category'):
            print("   Copying data from is_reference_category to is_global_category...")
            bind = op.get_bind()
            bind.execute(text("""
                UPDATE ingredient_category 
                SET is_global_category = is_reference_category 
                WHERE is_reference_category IS NOT NULL
            """))
            
            # Drop the old column
            print("   Dropping is_reference_category column...")
            op.drop_column('ingredient_category', 'is_reference_category')
        else:
            # Set default values for global categories
            print("   Setting default values for global categories...")
            bind = op.get_bind()
            bind.execute(text("""
                UPDATE ingredient_category 
                SET is_global_category = true 
                WHERE organization_id IS NULL AND is_active = true
            """))
    
    print("âœ… Successfully renamed field to is_global_category")


def downgrade():
    """Revert is_global_category back to is_reference_category"""
    print("ðŸ”„ Reverting is_global_category to is_reference_category...")
    
    if table_exists('ingredient_category'):
        # Add the old column back
        if not column_exists('ingredient_category', 'is_reference_category'):
            op.add_column('ingredient_category', sa.Column('is_reference_category', sa.Boolean, default=False))
            
        # Copy data back
        if column_exists('ingredient_category', 'is_global_category'):
            bind = op.get_bind()
            bind.execute(text("""
                UPDATE ingredient_category 
                SET is_reference_category = is_global_category 
                WHERE is_global_category IS NOT NULL
            """))
            
            # Drop the new column
            op.drop_column('ingredient_category', 'is_global_category')
    
    print("âœ… Successfully reverted to is_reference_category")
