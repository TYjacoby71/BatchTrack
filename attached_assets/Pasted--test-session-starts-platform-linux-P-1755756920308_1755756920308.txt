============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 58 items                                                                     

tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_decorator_allows_with_permission PASSED [  1%]
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_returns_json_for_api PASSED [  3%]
tests/test_auth_permissions.py::TestAuthPermissions::test_any_permission_required_decorator PASSED [  5%]
tests/test_auth_permissions.py::TestAuthPermissions::test_tier_required_decorator PASSED [  6%]
tests/test_auth_permissions.py::TestAuthPermissions::test_user_has_any_permission_method PASSED [  8%]
tests/test_auth_permissions.py::TestAuthPermissions::test_api_unauth_returns_json_401 PASSED [ 10%]
tests/test_auth_permissions.py::TestAuthPermissions::test_web_unauth_redirects_to_login PASSED [ 12%]
tests/test_auth_permissions.py::TestAuthPermissions::test_csrf_token_available_in_templates PASSED [ 13%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling PASSED [ 15%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] PASSED [ 17%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] PASSED [ 18%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] PASSED [ 20%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] PASSED [ 22%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing PASSED [ 24%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade PASSED [ 25%]
tests/test_expiration_canonicalization.py::test_expiration_service_uses_canonical_adjustment PASSED [ 27%]
tests/test_expiration_canonicalization.py::TestExpirationCanonicalService::test_mark_fifo_expired_calls_canonical_service PASSED [ 29%]
tests/test_expiration_canonicalization.py::TestExpirationCanonicalService::test_mark_product_expired_calls_canonical_service PASSED [ 31%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_exists PASSED [ 32%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_login_endpoint_exists PASSED [ 34%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_callback_endpoint_exists PASSED [ 36%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_state_validation_path PASSED [ 37%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_methods_exist PASSED [ 39%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_configuration_status PASSED [ 41%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_callback_invalid_state PASSED [ 43%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_single_entry_point_exists PASSED [ 44%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order FAILED [ 46%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly FAILED [ 48%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service PASSED [ 50%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_recount_adjustment_uses_canonical_service PASSED [ 51%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_fifo_ops_uses_canonical_service PASSED [ 53%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_batch_integration_uses_canonical_service PASSED [ 55%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_reservation_service_uses_canonical_service PASSED [ 56%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_pos_integration_uses_canonical_service PASSED [ 58%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_inventory_routes_use_canonical_service PASSED [ 60%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_expiration_service_uses_canonical_service PASSED [ 62%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_no_direct_quantity_modifications PASSED [ 63%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_canonical_service_handles_all_operation_types PASSED [ 65%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_fifo_service_integration PASSED [ 67%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_inventory_alerts_read_only_access PASSED [ 68%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_product_service_uses_canonical_for_modifications PASSED [ 70%]
tests/test_pos_integration_canonicalization.py::test_pos_sale_uses_canonical_service PASSED [ 72%]
tests/test_pos_integration_canonicalization.py::TestPOSIntegrationCanonicalService::test_reserve_inventory_calls_canonical_service FAILED [ 74%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_creation_flow PASSED [ 75%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_generation_constraints PASSED [ 77%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_service_exists PASSED [ 79%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_creation_validation PASSED [ 81%]
tests/test_reservation_canonicalization.py::test_credit_specific_lot_called_on_reservation_release PASSED [ 82%]
tests/test_reservation_canonicalization.py::test_record_audit_entry_called_for_unreserved_audit FAILED [ 84%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_endpoint_exists PASSED [ 86%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_tier_bypass_behavior PASSED [ 87%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_organization_tier_assignment PASSED [ 89%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_permission_gating_exists PASSED [ 91%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_service_delegation PASSED [ 93%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_exists PASSED [ 94%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_signature_verification_path_exists PASSED [ 96%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_idempotency_behavior PASSED [ 98%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_methods_exist PASSED [100%]

======================================= FAILURES =======================================
_____________ TestInventoryFIFOCharacterization.test_fifo_deduction_order ______________

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7f2c7e011850>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f2c7ed25610>
test_user = <User testuser_1755756858227091>, test_org = <Organization 3>

    def test_fifo_deduction_order(self, app, db_session, test_user, test_org):
        """Test FIFO deduction follows first-in-first-out order."""
        with app.test_request_context():
            login_user(test_user)
    
            # Create inventory item
            item = InventoryItem(
                name="Test Ingredient",
                type="ingredient",
                unit="g",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Add stock in layers (oldest first)
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type="restock",
                notes="First batch",
                created_by=test_user.id
            )
    
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=50.0,
                change_type="restock",
                notes="Second batch",
                created_by=test_user.id
            )
    
            # Verify total
>           db_session.refresh(item)

tests/test_inventory_fifo.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py:1765: in refresh
    return self._proxied.refresh(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3147: in refresh
    self._expire_state(state, attribute_names)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3273: in _expire_state
    self._validate_persistent(state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.Session object at 0x7f2c7b207110>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f2c7a8eff50>

    def _validate_persistent(self, state: InstanceState[Any]) -> None:
        if not self.identity_map.contains_state(state):
>           raise sa_exc.InvalidRequestError(
                "Instance '%s' is not persistent within this Session"
                % state_str(state)
            )
E           sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7f2c7b1fdb10>' is not persistent within this Session

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4139: InvalidRequestError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
ERROR    app.services.inventory_adjustment._core:_core.py:42 Inventory item not found: 1
____ TestInventoryFIFOCharacterization.test_inventory_adjustment_delegates_properly ____

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7f2c7e013990>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f2c7ed25610>
test_user = <User testuser_1755756860427734>, test_org = <Organization 3>

    def test_inventory_adjustment_delegates_properly(self, app, db_session, test_user, test_org):
        """Verify inventory adjustment service delegates to proper internal systems."""
        with app.test_request_context():
            login_user(test_user)
    
            item = InventoryItem(
                name="Test Product",
                type="product",
                unit="ml",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Test product addition (should use ProductSKUHistory)
            success, message = process_inventory_adjustment(
                item_id=item.id,
                quantity=250.0,
                change_type="finished_batch",
                notes="Batch completion",
                created_by=test_user.id
            )
    
>           assert success is True
E           assert False is True

tests/test_inventory_fifo.py:97: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=250.0, change_type=finished_batch, caller=tests/test_inventory_fifo.py:test_inventory_adjustment_delegates_properly
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
__ TestPOSIntegrationCanonicalService.test_reserve_inventory_calls_canonical_service ___

self = <tests.test_pos_integration_canonicalization.TestPOSIntegrationCanonicalService object at 0x7f2c7e052410>
mock_user = <MagicMock name='current_user' id='139829069519632'>
mock_reservation = <MagicMock name='Reservation' id='139829023319440'>
mock_item = <MagicMock name='InventoryItem' id='139829012855376'>
mock_process = <MagicMock name='process_inventory_adjustment' id='139829023312080'>

    @patch('app.services.pos_integration.process_inventory_adjustment')
    @patch('app.services.pos_integration.InventoryItem')
    @patch('app.services.pos_integration.Reservation')
    @patch('app.services.pos_integration.current_user')
    def test_reserve_inventory_calls_canonical_service(self, mock_user, mock_reservation, mock_item, mock_process):
        """Test that inventory reservation calls process_inventory_adjustment"""
        # Mock the original inventory item
        mock_original_item = MagicMock()
        mock_original_item.id = 1
        mock_original_item.name = "Test Product"
        mock_original_item.type = 'product'
        mock_original_item.unit = 'piece'
        mock_original_item.cost_per_unit = 10.0
        mock_original_item.available_quantity = 50.0
        mock_original_item.organization_id = 1
    
        # Mock reserved item
        mock_reserved_item = MagicMock()
        mock_reserved_item.id = 2
        mock_reserved_item.quantity = 0.0
    
        mock_item.query.get.return_value = mock_original_item
        mock_item.query.filter_by.return_value.first.return_value = mock_reserved_item
    
        mock_user.id = 1
        mock_user.is_authenticated = True
        mock_user.organization_id = 1
    
        # Mock process_inventory_adjustment to succeed
        mock_process.return_value = True
    
        # Call the service
        success, message = POSIntegrationService.reserve_inventory(
            item_id=1,
            quantity=5.0,
            order_id="ORD-123",
            source="shopify",
            notes="Test reservation"
        )
    
        # Verify canonical service was called for deduction
        expected_calls = [
            # First call for deduction from original item
            ((), {
                'item_id': 1,
                'quantity': 5.0,
                'change_type': 'reserved',
                'notes': 'Reserved for order ORD-123 (shopify). Test reservation',
                'order_id': 'ORD-123',
                'created_by': 1
            }),
            # Second call for allocation to reserved item
            ((), {
                'item_id': 2,
                'quantity': 5.0,
                'change_type': 'reserved_allocation',
                'unit': 'piece',
                'notes': 'Reserved for order ORD-123. Test reservation',
                'created_by': 1,
                'cost_override': 10.0
            })
        ]
    
>       assert mock_process.call_count == 2
E       AssertionError: assert 0 == 2
E        +  where 0 = <MagicMock name='process_inventory_adjustment' id='139829023312080'>.call_count

tests/test_pos_integration_canonicalization.py:114: AssertionError
_________________ test_record_audit_entry_called_for_unreserved_audit __________________

app = <Flask 'app'>

    def test_record_audit_entry_called_for_unreserved_audit(app):
        """Test that audit entries use the canonical record_audit_entry helper"""
        with app.app_context():
>           with patch('app.services.inventory_adjustment.record_audit_entry') as mock_audit:

tests/test_reservation_canonicalization.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f2c7a119210>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'app.services.inventory_adjustment' from '/home/runner/workspace/app/services/inventory_adjustment/__init__.py'> does not have the attribute 'record_audit_entry'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
=================================== warnings summary ===================================
tests/test_auth_permissions.py: 8 warnings
tests/test_billing_and_tier_enforcement.py: 7 warnings
tests/test_expiration_canonicalization.py: 3 warnings
tests/test_google_oauth.py: 7 warnings
tests/test_inventory_fifo.py: 3 warnings
tests/test_inventory_routes_canonicalization.py: 13 warnings
tests/test_pos_integration_canonicalization.py: 1 warning
tests/test_product_sku.py: 4 warnings
tests/test_reservation_canonicalization.py: 2 warnings
tests/test_signup_tiers.py: 5 warnings
tests/test_stripe_webhooks.py: 4 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_auth_permissions.py: 8 warnings
tests/test_billing_and_tier_enforcement.py: 7 warnings
tests/test_expiration_canonicalization.py: 1 warning
tests/test_google_oauth.py: 7 warnings
tests/test_inventory_fifo.py: 3 warnings
tests/test_pos_integration_canonicalization.py: 1 warning
tests/test_product_sku.py: 4 warnings
tests/test_reservation_canonicalization.py: 2 warnings
tests/test_signup_tiers.py: 5 warnings
tests/test_stripe_webhooks.py: 4 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
  /home/runner/workspace/app/models/models.py:323: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    role = Role.query.get(assignment.role_id)

tests/test_expiration_canonicalization.py::test_expiration_service_uses_canonical_adjustment
  /home/runner/workspace/app/blueprints/expiration/services.py:545: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    entry = InventoryHistory.query.get(entry_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== short test summary info ================================
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order - sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7f2c7b1fdb10>' is...
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly - assert False is True
FAILED tests/test_pos_integration_canonicalization.py::TestPOSIntegrationCanonicalService::test_reserve_inventory_calls_canonical_service - AssertionError: assert 0 == 2
FAILED tests/test_reservation_canonicalization.py::test_record_audit_entry_called_for_unreserved_audit - AttributeError: <module 'app.services.inventory_adjustment' from '/home/runner/work...
================ 4 failed, 54 passed, 102 warnings in 70.91s (0:01:10) =================
