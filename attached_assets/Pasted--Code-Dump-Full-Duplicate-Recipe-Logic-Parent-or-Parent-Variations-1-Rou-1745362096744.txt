**✅ Code Dump – Full Duplicate Recipe Logic (Parent or Parent + Variations)**

---

## 🔁 1. Route: Clone Prompt Page (Add to `routes/recipe_routes.py`)

```python
@recipes_bp.route('/<int:recipe_id>/prompt-clone')
@login_required
def prompt_clone(recipe_id):
    recipe = Recipe.query.get_or_404(recipe_id)
    return render_template("recipes/clone_prompt.html", recipe=recipe)
```

---

## 🧠 2. Route: Clone Single Recipe (Add or confirm in `routes/recipe_routes.py`)

```python
@recipes_bp.route('/<int:recipe_id>/clone', methods=['GET'])
@login_required
def clone_recipe(recipe_id):
    original = Recipe.query.get_or_404(recipe_id)
    cloned = Recipe(
        name=f"{original.name} Copy",
        instructions=original.instructions,
        label_prefix=original.label_prefix
    )
    db.session.add(cloned)
    db.session.flush()

    for assoc in original.recipe_ingredients:
        new_assoc = RecipeIngredient(
            recipe_id=cloned.id,
            inventory_item_id=assoc.inventory_item_id,
            amount=assoc.amount,
            unit=assoc.unit
        )
        db.session.add(new_assoc)

    db.session.commit()
    flash("Recipe duplicated.")
    return redirect(url_for('recipes.edit_recipe', recipe_id=cloned.id))
```

---

## 🌲 3. Route: Clone Recipe and All Variations

```python
@recipes_bp.route('/<int:recipe_id>/clone-all', methods=['GET'])
@login_required
def clone_recipe_with_variations(recipe_id):
    original = Recipe.query.get_or_404(recipe_id)

    def deep_clone(recipe, parent_id=None):
        cloned = Recipe(
            name=f"{recipe.name} Copy",
            instructions=recipe.instructions,
            label_prefix=recipe.label_prefix,
            parent_id=parent_id
        )
        db.session.add(cloned)
        db.session.flush()

        for assoc in recipe.recipe_ingredients:
            db.session.add(RecipeIngredient(
                recipe_id=cloned.id,
                inventory_item_id=assoc.inventory_item_id,
                amount=assoc.amount,
                unit=assoc.unit
            ))

        for variation in recipe.variations:
            deep_clone(variation, parent_id=cloned.id)

        return cloned

    deep_clone(original)
    db.session.commit()
    flash("Recipe and variations duplicated.")
    return redirect(url_for('recipes.list_recipes'))
```

---

## 📄 4. Template: Prompt Page (New File: `templates/recipes/clone_prompt.html`)

```jinja
{% extends "layout.html" %}
{% block content %}
<h2>Duplicate Recipe</h2>
<p>Would you like to duplicate just <strong>{{ recipe.name }}</strong> or include its variations?</p>

<a href="{{ url_for('recipes.clone_recipe', recipe_id=recipe.id) }}" class="btn btn-primary">
  Just this recipe
</a>

<a href="{{ url_for('recipes.clone_recipe_with_variations', recipe_id=recipe.id) }}" class="btn btn-secondary">
  This recipe and all variations
</a>
{% endblock %}
```

---

## 🔘 5. Add Button to `view_recipe.html`

```jinja
<a href="{{ url_for('recipes.prompt_clone', recipe_id=recipe.id) }}" class="btn btn-outline-primary">
  Duplicate Recipe
</a>
```

---

✅ Now users can:
- Choose to duplicate only the selected recipe
- OR duplicate the entire recipe tree with its variations

