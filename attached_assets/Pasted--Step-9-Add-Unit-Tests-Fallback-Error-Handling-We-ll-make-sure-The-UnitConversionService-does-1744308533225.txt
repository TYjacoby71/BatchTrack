✅ Step 9 — Add Unit Tests + Fallback Error Handling
We’ll make sure:

The UnitConversionService doesn’t crash on bad data.

You have basic tests for conversion and stock checking logic.

🛠️ Replit Command Prompt — Step 9
🧠 Replit, follow these instructions exactly. Create or edit only the files listed. Do not touch anything else. Add the following code blocks as-is.

📁 File: services/unit_conversion.py
📌 Wrap the convert method in fault logging fallback

python
Copy
Edit
from models import InventoryUnit
from fault_log_utils import log_fault

class UnitConversionService:
    @staticmethod
    def convert(amount, from_unit, to_unit, density=None):
        if from_unit == to_unit:
            return amount

        try:
            f = InventoryUnit.query.filter_by(name=from_unit).first()
            t = InventoryUnit.query.filter_by(name=to_unit).first()
            if not f or not t:
                raise ValueError(f"Unknown units: {from_unit}, {to_unit}")

            if f.type != t.type:
                if {'volume', 'weight'} <= {f.type, t.type} and density:
                    if f.type == 'volume':
                        return (amount * f.base_equivalent * density) / t.base_equivalent
                    else:
                        return (amount * f.base_equivalent / density) / t.base_equivalent
                raise ValueError(f"Cannot convert {f.type} to {t.type} without density")

            return (amount * f.base_equivalent) / t.base_equivalent

        except Exception as e:
            log_fault("UnitConversionService failed", {
                "amount": amount,
                "from": from_unit,
                "to": to_unit,
                "error": str(e)
            })
            return amount  # fallback to raw value
📁 File: tests/test_unit_conversion.py
🔁 Create or update file with this content:

python
Copy
Edit
from services.unit_conversion import UnitConversionService

def test_basic_conversion():
    result = UnitConversionService.convert(1000, "ml", "l")
    assert round(result, 2) == 1.0

def test_same_unit():
    result = UnitConversionService.convert(500, "g", "g")
    assert result == 500

def test_invalid_unit():
    try:
        UnitConversionService.convert(100, "ml", "unknown")
    except:
        assert True
📁 File: tests/test_check_stock.py
🔁 Create or update with:

python
Copy
Edit
from stock_check_utils import check_stock_for_recipe

def test_check_stock_empty_recipe():
    class DummyRecipe:
        recipe_ingredients = []
    results, ok = check_stock_for_recipe(DummyRecipe())
    assert results == []
    assert ok is True
✅ Let me know once tests are in, and I’ll give you Step 10: settings.json usage and UI toggle for per-page views or feature flags.







