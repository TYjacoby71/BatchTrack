# Step 4: Utility in services/stock_check_utils.py or services/uscs.py

from models import InventoryItem, Container
from services.unit_conversion import convert_units

def get_available_containers(recipe_yield, recipe_unit, scale=1.0):
    """
    Returns a list of in-stock containers and a best-fit plan to contain the projected yield.
    :param recipe_yield: base yield per recipe (e.g., 16 oz)
    :param recipe_unit: unit of the yield (e.g., 'oz')
    :param scale: batch scaling multiplier (default 1.0)
    :return: {"available": [...], "plan": [...]}
    """
    projected_volume = recipe_yield * scale

    # Step 1: Find in-stock containers
    in_stock = []
    inventory = InventoryItem.query.filter_by(type='container').all()

    for item in inventory:
        container = Container.query.get(item.container_id)
        if not container or item.quantity <= 0:
            continue

        converted_capacity = convert_units(container.storage_amount, container.storage_unit, recipe_unit)
        if converted_capacity is None:
            continue

        in_stock.append({
            "id": container.id,
            "name": container.name,
            "storage_amount": converted_capacity,
            "storage_unit": recipe_unit,
            "stock_qty": item.quantity
        })

    # Step 2: Sort largest to smallest
    sorted_containers = sorted(in_stock, key=lambda c: c['storage_amount'], reverse=True)

    # Step 3: Greedy fill logic
    plan = []
    remaining = projected_volume

    for c in sorted_containers:
        per_unit = c['storage_amount']
        max_needed = int(remaining // per_unit)
        if max_needed <= 0:
            continue
        use_qty = min(max_needed, c['stock_qty'])
        if use_qty > 0:
            plan.append({
                "id": c['id'],
                "name": c['name'],
                "capacity": per_unit,
                "unit": recipe_unit,
                "quantity": use_qty
            })
            remaining -= use_qty * per_unit

    return {
        "available": sorted_containers,
        "plan": plan
    }
