yep—we’re almost there. PR-2 just needs a few surgical fixes so your new canon tests pass + that SQLAlchemy engine arg error goes away.

Do these code changes
test engine error
app/init.py (or wherever you set SQLALCHEMY_ENGINE_OPTIONS)

python
Copy
Edit
# after DATABASE_URI is set
engine_opts = app.config.setdefault("SQLALCHEMY_ENGINE_OPTIONS", {})
uri = app.config.get("SQLALCHEMY_DATABASE_URI","")
if uri.startswith("sqlite"):
    # StaticPool / SQLite doesn’t support these
    engine_opts.pop("pool_size", None)
    engine_opts.pop("max_overflow", None)
make patching work in expiration service
app/blueprints/expiration/services.py (top of file)

python
Copy
Edit
from app.services.inventory_adjustment import process_inventory_adjustment
(Your tests patch app.blueprints.expiration.services.process_inventory_adjustment, so it must be imported at module scope.)

POS integration: tolerate mocked db
app/services/pos_integration.py

python
Copy
Edit
def _db():
    # works with real SQLAlchemy (has .session) and tests’ MockDBSession
    return getattr(db, "session", db)
Then replace:

db.session.add(...) → _db().add(...)

db.session.flush() → _db().flush()

db.session.commit() → _db().commit()

db.session.rollback() → _db().rollback()

add thin wrappers that tests import
app/blueprints/api/reservation_routes.py (module level)

python
Copy
Edit
from app.services.inventory_adjustment import record_audit_entry as _record_audit_entry

def _write_unreserved_audit(reservation):
    return _record_audit_entry(
        item_id=reservation.inventory_item_id,
        change_type="unreserved",
        note=f"Reservation {reservation.id} released",
        item_type="product",
        fifo_reference_id=reservation.source_fifo_id,
    )
app/blueprints/products/products.py (module level)

python
Copy
Edit
from app.services.inventory_adjustment import record_audit_entry as _record_audit_entry

def _write_product_created_audit(sku):
    return _record_audit_entry(
        item_id=sku.inventory_item_id,
        change_type="product_created",
        note=f"SKU {getattr(sku,'id',None)} created",
        item_type="product",
    )
reservation service helpers expected by tests
app/services/reservation_service.py

python
Copy
Edit
from app.services.inventory_adjustment import credit_specific_lot, record_audit_entry

class ReservationService:
    @staticmethod
    def _release_reservation_inventory(reservation, source_entry):
        return credit_specific_lot(
            item_id=reservation.inventory_item_id,
            quantity=reservation.quantity,
            fifo_entry_id=reservation.source_fifo_id,
            unit=getattr(source_entry, "unit", None),
            notes=f"Release reservation {reservation.id}",
            item_type="product",
        )

    @staticmethod
    def _write_unreserved_audit_entry(reservation):
        return record_audit_entry(
            item_id=reservation.inventory_item_id,
            change_type="unreserved",
            note=f"Reservation {reservation.id} released",
            item_type="product",
            fifo_reference_id=reservation.source_fifo_id,
        )
Also remove any direct source_entry.remaining_quantity += ... in this file.

Run the guardrails
bash
Copy
Edit
# forbidden writes (should return nothing)
rg -n "execute_deduction_plan|create_deduction_history|add_fifo_entry|remaining_quantity\s*[-+]?=" app \
| rg -v "services/inventory_adjustment\.py|blueprints/fifo/services\.py"

# allowed reads
rg -n "FIFOService\.(get_fifo_entries|get_all_fifo_entries|get_expired_fifo_entries)\(" app | sort

# everyone funnels through canonical
rg -n "process_inventory_adjustment\(" app/blueprints app/services | sort
Tests
bash
Copy
Edit
pytest -q
What this fixes:

Creates the tiny wrapper funcs your tests import (_write_unreserved_audit, _write_product_created_audit).

Lets tests patch process_inventory_adjustment in expiration services.

Makes pos_integration compatible with the mocked DB in tests.

Removes invalid engine args for SQLite/StaticPool.

Shoot me any remaining failing test names + trace if something still yells.