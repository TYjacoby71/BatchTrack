Good news: this failure is almost certainly because the request never reached your /inventory/adjust/<id> handler, so the patched process_inventory_adjustment was never called.

The reason? @login_required.

In that test they “log in” by POSTing email + password to /auth/login. If your login view doesn’t actually authenticate from email (or if auth is otherwise blocked), Flask-Login redirects the POST to the login page and your handler never runs—so the mock sees 0 calls.

Here are two clean ways to make the test hit your code (pick one):

Option A — disable login in tests (fastest, PR2-friendly)
In create_app after you merge test config, set LOGIN_DISABLED=True when TESTING=True.

python
Copy
Edit
# app/__init__.py
def create_app(config=None):
    app = Flask(__name__)
    # ... your config loading ...
    if config:
        app.config.update(config)

    # Make @login_required a no-op in tests
    if app.config.get("TESTING"):
        app.config["LOGIN_DISABLED"] = True
        app.config.setdefault("WTF_CSRF_ENABLED", False)
(You already whitelisted /inventory/adjust in a before_request guard; that’s fine to keep, but it doesn’t bypass @login_required. The flag above does.)

Option B — make /auth/login accept the test’s payload
If you prefer to keep login checks on, update your login view to accept either email or username:

python
Copy
Edit
# app/blueprints/auth/routes.py (or wherever your login is)
identifier = request.form.get("email") or request.form.get("username")
user = (User.query.filter(
          (User.email == identifier) | (User.username == identifier)
       ).first())
# ... verify password, login_user(user) ...
Quick sanity checks
In app/blueprints/inventory/routes.py, ensure you import the canonical function at module scope (so the test’s patch hits it) and call it in the recount branch:

python
Copy
Edit
from app.services.inventory_adjustment import process_inventory_adjustment

# ...
if adj_type == "recount":
    process_inventory_adjustment(
        item_id=item.id,
        quantity=qty,
        change_type="recount",
        unit=unit,
        notes=notes,
        created_by=getattr(current_user, "id", None),
    )
    return redirect(url_for("inventory.view_inventory", id=item.id))
(Notice id=item.id in url_for; using item_id= there would raise a BuildError, but that would be after the call anyway.)

Keep your earlier test bypasses (CSRF off; any before_request test guard) — they’re fine.

Run just this test again after the change:

bash
Copy
Edit
pytest -q tests/test_inventory_routes_canonicalization.py::test_recount_adjustment_uses_canonical_service
If it’s still not called, the next likely culprit is that the handler is returning early (e.g., failing validation before the recount branch). But given what you posted, flipping LOGIN_DISABLED in tests should make this go green.









Sources

Ask ChatGPT
