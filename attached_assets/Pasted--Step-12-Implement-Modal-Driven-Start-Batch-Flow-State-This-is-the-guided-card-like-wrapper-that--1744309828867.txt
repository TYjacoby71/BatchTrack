‚úÖ Step 12 ‚Äî Implement Modal-Driven Start Batch Flow State
This is the guided card-like wrapper that lives in the homepage (homepage.html). It walks users through recipe ‚Üí scale ‚Üí stock check ‚Üí conditional start batch ‚Äî all inside a calm, visual modal.

üõ†Ô∏è Replit Command Prompt ‚Äî Step 12
üß† Replit, follow these exact instructions to modify homepage.html. Add the modal, cards, and JS that manage the Start Batch flow state. Do not change other routes or unrelated buttons.

üìÑ File: templates/homepage.html
‚úÖ Insert this block at the bottom of the page, just before {% endblock %}:
html
Copy
Edit
<!-- Start Batch Modal -->
<div class="modal fade" id="planBatchModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Start a New Batch</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">

        <!-- Flow State Wrapper -->
        <div id="flowStateWrapper">
          
          <!-- Step 1: Select Recipe + Scale -->
          <div class="card flow-step" id="step1" style="display: block;">
            <div class="card-body">
              <div class="mb-3">
                <label for="recipeSelect" class="form-label">Recipe</label>
                <select id="recipeSelect" class="form-select">
                  <option value="">Select a recipe</option>
                  {% for recipe in recipes %}
                  <option value="{{ recipe.id }}">{{ recipe.name }}</option>
                  {% endfor %}
                </select>
              </div>
              <div class="mb-3">
                <label for="scaleInput" class="form-label">Scale</label>
                <input type="number" id="scaleInput" class="form-control" value="1" min="0.1" step="0.1">
              </div>
              <button type="button" class="btn btn-primary" id="checkStockBtn">Check Stock</button>
            </div>
          </div>

          <!-- Step 2: Stock Check Results -->
          <div class="card flow-step" id="step2" style="display: none;">
            <div class="card-body">
              <div id="stockCheckResults"></div>
              <button type="button" class="btn btn-secondary" id="backToStep1">Back</button>
              <button type="button" class="btn btn-success" id="startBatchBtn" style="display: none;">Start Batch</button>
            </div>
          </div>

        </div>

      </div>
    </div>
  </div>
</div>

<!-- Trigger Button (add above this modal or near dashboard buttons) -->
<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#planBatchModal">
  Start Batch
</button>

<script>
function showStep(id) {
  document.querySelectorAll('.flow-step').forEach(card => card.style.display = 'none');
  document.getElementById(id).style.display = 'block';
}

document.getElementById('checkStockBtn').addEventListener('click', function () {
  const recipeId = document.getElementById('recipeSelect').value;
  const scale = document.getElementById('scaleInput').value;

  if (!recipeId || scale <= 0) {
    alert("Please select a recipe and enter a valid scale.");
    return;
  }

  this.disabled = true;
  this.innerText = 'Checking...';

  fetch('{{ url_for("home.check_stock") }}', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ recipe_id: recipeId, scale: scale })
  })
  .then(response => response.json())
  .then(data => {
    if (data.error) {
      alert("Error: " + data.error);
      return;
    }

    const html = ['<table class="table"><thead><tr><th>Ingredient</th><th>Needed</th><th>Available</th><th>Unit</th><th>Status</th></tr></thead><tbody>'];
    data.stock_check.forEach(item => {
      html.push(`<tr class="${item.status === 'NEEDED' ? 'table-danger' : item.status === 'LOW' ? 'table-warning' : 'table-success'}">
        <td>${item.name}</td>
        <td>${item.needed}</td>
        <td>${item.available}</td>
        <td>${item.unit}</td>
        <td>${item.status}</td>
      </tr>`);
    });
    html.push('</tbody></table>');

    document.getElementById('stockCheckResults').innerHTML = html.join('');
    document.getElementById('startBatchBtn').style.display = data.all_ok ? 'inline-block' : 'none';
    showStep('step2');
  })
  .finally(() => {
    this.disabled = false;
    this.innerText = 'Check Stock';
  });
});

document.getElementById('backToStep1').addEventListener('click', () => {
  showStep('step1');
});

document.getElementById('startBatchBtn').addEventListener('click', function () {
  const recipeId = document.getElementById('recipeSelect').value;
  const scale = document.getElementById('scaleInput').value;

  fetch('{{ url_for("batches.start_batch") }}', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ recipe_id: recipeId, scale: scale })
  })
  .then(response => response.json())
  .then(data => {
    if (data.error) {
      alert("Error: " + data.error);
    } else {
      window.location.href = '{{ url_for("batches.view_batch_in_progress") }}/' + data.batch_id;
    }
  });
});
</script>
‚úÖ Once this modal is in and styled with Bootstrap, you have a production-ready neurodivergent-friendly flow state builder.