app/models/reservation.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/reservation.py:        return datetime.utcnow() > self.expires_at
app/models/reservation.py:        self.released_at = datetime.utcnow()
app/models/reservation.py:        self.converted_at = datetime.utcnow()
app/models/reservation.py:        self.released_at = datetime.utcnow()
app/models/developer_permission.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/developer_role.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/user_role_assignment.py:    assigned_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/permission.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/unit.py:    timestamp = db.Column(db.DateTime, default=datetime.utcnow, nullable=True)
app/models/mixins.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=True)
app/models/mixins.py:    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=True)
app/models/product.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/product.py:    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
app/models/product.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/product.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/product.py:    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
app/models/product.py:    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
app/models/unified_inventory_history.py:    timestamp = db.Column(db.DateTime, default=datetime.utcnow, nullable=False, index=True)
app/models/role.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/user_preferences.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/user_preferences.py:    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
app/models/subscription_tier.py:    created_at = db.Column(db.DateTime, default=datetime.utcnow)
app/models/subscription_tier.py:    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
app/blueprints/products/sku.py:        target_sku.updated_at = datetime.utcnow()
app/blueprints/api/fifo_routes.py:                age_days = (datetime.utcnow() - entry.timestamp).days
app/blueprints/api/fifo_routes.py:            batch_start = batch.started_at if batch else datetime.utcnow()
app/blueprints/api/fifo_routes.py:            batch_start = batch.started_at if batch else datetime.utcnow()
app/blueprints/api/reservation_routes.py:            Reservation.expires_at < datetime.utcnow(),
app/blueprints/batches/finish_batch.py:        batch.completed_at = datetime.utcnow()
app/blueprints/inventory/routes.py:                         now=datetime.utcnow(),
app/blueprints/settings/routes.py:        user_prefs.updated_at = datetime.utcnow()
app/blueprints/developer/routes.py:            return datetime.utcnow()
app/blueprints/developer/routes.py:    thirty_days_ago = datetime.utcnow() - timedelta(days=30)
app/blueprints/developer/routes.py:        logging.warning(f"ORGANIZATION DELETION: Developer {current_user.username} is deleting organization '{org.name}' (ID: {org.id}) at {datetime.utcnow()}")
app/blueprints/developer/routes.py:                existing.assigned_at = datetime.utcnow()
app/services/inventory_adjustment/_fifo_ops.py:            timestamp=datetime.utcnow(),
app/services/inventory_adjustment/_creation_logic.py:                expiration_date = datetime.utcnow().date() + timedelta(days=shelf_life_days)
app/services/inventory_adjustment/_edit_logic.py:                item.expiration_date = datetime.utcnow().date() + timedelta(days=shelf_life_days)
app/services/inventory_adjustment/_audit.py:            timestamp=datetime.utcnow(),
app/services/offline_billing_service.py:            organization.last_online_sync = datetime.utcnow()
app/services/offline_billing_service.py:                organization.last_online_sync = datetime.utcnow()
app/services/stripe_service.py:            stripe_event.processed_at = datetime.utcnow()
app/services/batch_service/batch_operations.py:            batch.cancelled_at = datetime.utcnow()
app/services/pos_integration.py:                expires_at = datetime.utcnow() + timedelta(hours=expires_in_hours)
app/services/pos_integration.py:                    Reservation.expires_at < datetime.utcnow()
app/services/dashboard_alerts.py:        cutoff_time = datetime.utcnow() - timedelta(hours=24)
app/services/dashboard_alerts.py:            cutoff_time = datetime.utcnow() - timedelta(hours=24)
app/routes/waitlist_routes.py:            'timestamp': datetime.utcnow().isoformat(),
app/management.py:                                    # For functions like datetime.utcnow, make nullable for safety
