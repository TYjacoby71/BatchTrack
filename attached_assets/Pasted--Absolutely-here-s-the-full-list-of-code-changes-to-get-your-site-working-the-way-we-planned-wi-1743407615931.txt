ðŸ”¥ Absolutely â€” hereâ€™s the full list of code changes to get your site working the way we planned (with restored stock checks, QR generation, costing, and improved structure), while keeping it in your current Replit flat layout (no blueprints yet).

Youâ€™ll paste these changes into the Replit Assistant step-by-step. Letâ€™s do this right.

âœ… 1. Add check_stock() Route (Per-Recipe)
ðŸ§¾ Tell Replit:

Please add this route to main.py to check ingredient stock for a specific recipe:

python
Copy
Edit
@app.route('/check-stock/<string:recipe_name>', methods=['GET'])
def check_stock(recipe_name):
    data = load_data()
    recipe = next((r for r in data['recipes'] if r['name'] == recipe_name), None)
    if not recipe:
        return jsonify({"error": "Recipe not found"}), 404

    stock_check = []
    for item in recipe['ingredients']:
        ing = next((i for i in data['ingredients'] if i['name'] == item['name']), None)
        if not ing or float(ing['quantity']) < float(item['quantity']):
            stock_check.append({"ingredient": item['name'], "status": "Insufficient"})
        else:
            stock_check.append({"ingredient": item['name'], "status": "OK"})

    return jsonify({"stock_check": stock_check})
âœ… 2. Add /check-stock-bulk Route
ðŸ§¾ Tell Replit:

Please add this bulk stock check route to main.py:

python
Copy
Edit
@app.route('/check-stock-bulk', methods=['GET', 'POST'])
def check_stock_bulk():
    data = load_data()

    def to_float(val):
        try:
            return float(val.strip())
        except:
            return 0.0

    if request.method == 'POST':
        recipe_ids = request.form.getlist('recipe_id')
        batch_counts = request.form.getlist('batch_count')
        usage = {}

        for r_id, count in zip(recipe_ids, batch_counts):
            recipe = next((r for r in data['recipes'] if str(r['id']) == r_id), None)
            if recipe:
                for item in recipe['ingredients']:
                    qty = to_float(item['quantity']) * to_float(count)
                    usage[item['name']] = usage.get(item['name'], 0) + qty

        stock_report = []
        for name, needed in usage.items():
            current = next((i for i in data['ingredients'] if i['name'] == name), {"quantity": "0"})
            current_qty = to_float(current['quantity'])
            stock_report.append({
                "name": name,
                "needed": round(needed, 2),
                "available": round(current_qty, 2),
                "status": "OK" if current_qty >= needed else "LOW"
            })

        return render_template('stock_bulk_result.html', stock_report=stock_report)

    return render_template('check_stock_bulk.html', recipes=data['recipes'])
âœ… 3. Add QR Code Generator
ðŸ§¾ Tell Replit:

Add this function to main.py (or a helper file if one exists). Also install qrcode[pil] using pip.

python
Copy
Edit
import qrcode
import os

def generate_qr_for_batch(batch_id):
    url = f"https://yourdomain.com/feedback/{batch_id}"
    img = qrcode.make(url)
    img_path = f"static/qr/{batch_id}.png"
    os.makedirs(os.path.dirname(img_path), exist_ok=True)
    img.save(img_path)
    return img_path
Then, in your /start-batch route, after you log the batch, call:

python
Copy
Edit
qr_path = generate_qr_for_batch(batch_id)
new_batch["qr_code"] = qr_path
âœ… 4. Add Basic Error Page Template
ðŸ§¾ Tell Replit:

Create a new file templates/error.html with this content:

html
Copy
Edit
{% extends "layout.html" %}
{% block content %}
  <h2>Error</h2>
  <p>{{ message }}</p>
  <a href="/">Back to Home</a>
{% endblock %}
Then, in your routes, replace raw errors like:

python
Copy
Edit
return "Recipe not found", 404
with:

python
Copy
Edit
return render_template("error.html", message="Recipe not found"), 404
âœ… 5. Install Dependencies
ðŸ§¾ Tell Replit:

In the Shell, run:

bash
Copy
Edit
pip install flask qrcode[pil]
âœ… 6. Enable Logging (Optional but Smart)
ðŸ§¾ Tell Replit:

Add this near the top of main.py:

python
Copy
Edit
import logging
logging.basicConfig(level=logging.INFO)
Then you can log events like:

python
Copy
Edit
logging.info(f"Started batch {batch_id} with recipe {recipe['name']}")