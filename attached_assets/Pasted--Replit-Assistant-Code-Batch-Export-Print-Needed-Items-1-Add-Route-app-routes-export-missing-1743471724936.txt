üõ† Replit Assistant Code Batch: Export/Print Needed Items
üîÅ 1. Add Route: app/routes/export_missings.py
python
Copy
Edit
from flask import Blueprint, request, render_template, Response
import csv
from io import StringIO

export_bp = Blueprint('export', __name__)

@export_bp.route('/missing/export/csv', methods=['POST'])
def export_missing_csv():
    data = request.json  # expects {'items': [{'name': ..., 'total': ..., 'unit': ...}, ...]}
    if not data or 'items' not in data:
        return "No data provided", 400

    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Ingredient', 'Needed Quantity', 'Unit'])

    for item in data['items']:
        writer.writerow([item['name'], item['total'], item['unit']])

    response = Response(output.getvalue(), mimetype='text/csv')
    response.headers["Content-Disposition"] = "attachment; filename=missing_items.csv"
    return response

@export_bp.route('/missing/export/print', methods=['POST'])
def export_missing_print():
    items = request.json.get('items', [])
    return render_template("print_missing.html", items=items)
üß© 2. Register the Blueprint in app/__init__.py
Add:

python
Copy
Edit
from app.routes.export_missings import export_bp
app.register_blueprint(export_bp)
üñº 3. Add Template: templates/print_missing.html
html
Copy
Edit
{% extends "layout.html" %}
{% block content %}
<h2>üñ® Print List: Needed Items</h2>
<ul>
  {% for item in items %}
    <li>{{ item.name }} ‚Äî {{ item.total }} {{ item.unit }}</li>
  {% endfor %}
</ul>
<script>
  window.onload = function() { window.print(); }
</script>
{% endblock %}
üñ± 4. Add Export Buttons in check_stock_bulk.html
Below the summary list:

html
Copy
Edit
<form id="exportForm">
  <button type="button" onclick="downloadCSV()">‚¨á Export CSV</button>
  <button type="button" onclick="printList()">üñ® Print List</button>
</form>

<script>
function getItems() {
  const items = [];
  {% for name, info in missing_summary.items() %}
    items.push({ name: "{{ name }}", total: {{ info.total }}, unit: "{{ info.unit }}" });
  {% endfor %}
  return items;
}

function downloadCSV() {
  fetch('/missing/export/csv', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ items: getItems() })
  })
  .then(res => res.blob())
  .then(blob => {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = "missing_items.csv";
    a.click();
  });
}

function printList() {
  fetch('/missing/export/print', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ items: getItems() })
  })
  .then(res => res.text())
  .then(html => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(html);
    printWindow.document.close();
  });
}
</script>