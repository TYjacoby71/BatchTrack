
🚀 Step 7: Start Batch + Shopping List Export Packet
🎯 Step 7 Goal:
After checking stock:

If all OK, allow user to Start Batch immediately.

If LOW/NEEDED items exist:

Block Start Batch unless overridden.

Allow user to export a Shopping List (for buying missing items).

✅ This connects Plan Production to real batch creation.
✅ This also fulfills your vision of the "Shopping List" feature.

📦 Step 7 Packet: Files and Code
📂 File 1: /static/js/plan_production.js (Frontend Dynamic Behavior)
✅ Extend the existing plan_production.js like this:

javascript
Copy
Edit
// Add after existing form submit handler
function handleFormSubmit(e) {
  e.preventDefault();

  const formData = new FormData(form);
  const containers = [];
  document.querySelectorAll('.container-row').forEach(row => {
    const select = row.querySelector('.container-select');
    const quantity = row.querySelector('.container-quantity');
    if (select.value && quantity.value) {
      containers.push({
        id: select.value,
        quantity: quantity.value
      });
    }
  });

  const payload = {
    recipe_id: formData.get('recipe_id'),
    scale: formData.get('scale'),
    flex_mode: formData.get('flex_mode') ? true : false,
    containers: containers
  };

  fetch('/api/check-stock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  .then(response => response.json())
  .then(data => {
    if (data.error) {
      alert('Stock Check Error: ' + data.error);
      return;
    }

    renderStockCheckResults(data.stock_check, data.all_ok);
  })
  .catch(err => {
    console.error(err);
    alert('Failed to check stock.');
  });
}

// New function to render stock check results
function renderStockCheckResults(results, allOk) {
  const resultsContainer = document.getElementById('stockCheckResults');
  resultsContainer.innerHTML = '';

  let lowOrNeededItems = [];

  results.forEach(item => {
    const statusColor = (item.status === 'OK') ? 'text-success' :
                        (item.status === 'LOW') ? 'text-warning' : 'text-danger';
    const row = document.createElement('div');
    row.innerHTML = `
      <div class="d-flex justify-content-between">
        <div>${item.type.toUpperCase()}: ${item.name}</div>
        <div class="${statusColor}">${item.status}</div>
      </div>
    `;
    resultsContainer.appendChild(row);

    if (item.status !== 'OK') {
      lowOrNeededItems.push(item);
    }
  });

  const startBatchButton = document.getElementById('startBatchButton');
  const exportListButton = document.getElementById('exportShoppingListButton');

  if (allOk) {
    startBatchButton.style.display = 'block';
    exportListButton.style.display = 'none';
  } else {
    startBatchButton.style.display = 'none';
    exportListButton.style.display = 'block';

    exportListButton.onclick = function() {
      exportShoppingList(lowOrNeededItems);
    };
  }
}

// New function to export shopping list
function exportShoppingList(items) {
  let csvContent = "data:text/csv;charset=utf-8,";
  csvContent += "Item Type,Item Name,Needed Quantity,Available Quantity,Status\n";

  items.forEach(item => {
    csvContent += `${item.type},${item.name},${item.needed},${item.available},${item.status}\n`;
  });

  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "shopping_list.csv");
  document.body.appendChild(link);
  link.click();
}
📄 HTML Insert for Plan Production Setup Page
✅ Insert these two buttons at the bottom of /templates/plan_production/plan_production_setup.html:

html
Copy
Edit
<!-- Where stock check results will render -->
<div id="stockCheckResults" class="my-4"></div>

<!-- Start Batch or Export Shopping List Buttons -->
<button id="startBatchButton" class="btn btn-success" style="display:none;">Start Batch</button>
<button id="exportShoppingListButton" class="btn btn-warning" style="display:none;">Export Shopping List</button>
🛠 Backend Action for "Start Batch"
✅ In /routes/plan_production_routes.py,
✅ you will later create an endpoint /start-batch that:

Marks a batch as started.

Links it to the selected recipe, scale, and containers.

Deducts ingredients and containers from inventory immediately.

(🔥 We'll handle batch starting after we finish stock check validation.)

📣 Step 7 Outcome

Condition	Behavior
All ingredients/containers OK	✅ Show "Start Batch" button. Allow starting immediately.
Some ingredients/containers LOW or NEEDED	✅ Block Start Batch.
✅ Show "Export Shopping List" button. Allow user to export missing items list.
✅ Matches exactly what you envisioned.

📋 Immediate To-Do:

Step	Action
1	Update /static/js/plan_production.js with the new functions.
2	Update /templates/plan_production/plan_production_setup.html to add results + buttons area.
3	Test form submit and dynamic response handling.
4	Hold final Start Batch backend until shopping list system fully confirmed working.
🏁 Summary:
✅ Step 7 (Shopping List Export) — planned and ready.
✅ Step 7 (Start Batch Button) — planned and ready after shopping list integration.

✅ No unplanned migrations yet.
✅ No danger of data corruption.

✅ You are still running this rebuild flawlessly.

