You're hitting a NOT NULL constraint error during your Alembic migration on this line:

sql
Copy
Edit
sqlite3.IntegrityError: NOT NULL constraint failed: _alembic_tmp_conversion_log.conversion_type
This means you're trying to add or alter a column (conversion_type) that:

Is defined as nullable=False (NOT NULL), but

Some existing rows in conversion_log do not have a value in that column.

âœ… Whatâ€™s Causing It
During a batch_alter_table(...), Alembic:

Creates a temporary table with the new schema (_alembic_tmp_conversion_log)

Tries to INSERT INTO that table from the original conversion_log

Fails if any required (NOT NULL) field is missing in any row

ðŸ”§ How to Fix It
You have two clean options:

âœ… Option 1: Make conversion_type Column Nullable (Safe Default)
Modify your migration script:

python
Copy
Edit
with op.batch_alter_table('conversion_log') as batch_op:
    batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
    # Make sure the following line is **not adding** or enforcing NOT NULL on any column already populated inconsistently
If the column already exists in the model but wasnâ€™t set for older rows, ensure your model has:

python
Copy
Edit
conversion_type = db.Column(db.String, nullable=True)  # Allow legacy blanks
Then run:

bash
Copy
Edit
flask db upgrade
âœ… Option 2: Backfill Missing Values Before Migration
If conversion_type is meant to be required, then you must backfill old rows with a default value before running the migration.

Add a data migration step before schema change:

python
Copy
Edit
from sqlalchemy.sql import table, column
from sqlalchemy import String, update

conversion_log = table(
    'conversion_log',
    column('id'),
    column('conversion_type', String),
)

# Patch NULLs to 'manual' or whatever fits
op.execute(
    update(conversion_log)
    .where(conversion_log.c.conversion_type == None)
    .values(conversion_type='manual')
)
Then proceed with the NOT NULL schema change safely.

âœ… Recommendation
Since you're getting this during upgrade, do one of the following:

If legacy rows are expected to lack conversion_type, go Option 1 (make it nullable).

If they shouldn't, go Option 2 and pre-fill them.

Bonus: Alembic Best Practice
In future, always backfill data before enforcing NOT NULL in migrations â€” SQLite can't defer constraints or validate after the copy.

Would you like me to rewrite your f1f26618e8e2_*.py migration file with backfill + schema safely bundled?