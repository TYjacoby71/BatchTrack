============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 4 items                                                              

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] PASSED [ 25%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] PASSED [ 50%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] FAILED [ 75%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] PASSED [100%]

======================= FAILURES ========================
_ TestBillingAndTierEnforcement.test_billing_status_enforcement[suspended-302] _

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7f8accff5f10>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User testuser_1755635125351100>
billing_status = 'suspended', expected_status_code = 302

    @pytest.mark.parametrize("billing_status, expected_status_code", [
        ('active', 200),
        ('past_due', 302),
        ('suspended', 302),
        ('canceled', 302),
    ])
    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE - Use fresh database queries to avoid session issues
            from app.models import Organization
            from app.models.subscription_tier import SubscriptionTier
    
            # Get fresh objects from the database
            fresh_user = db.session.get(User, test_user.id)
            fresh_org = db.session.get(Organization, fresh_user.organization_id)
    
            # Update the organization's billing status
            fresh_org.billing_status = billing_status
    
            # THE FIX: This block ensures the user is on a tier that REQUIRES a billing check.
            if not fresh_org.subscription_tier or fresh_org.subscription_tier.is_billing_exempt:
                # Find a non-exempt tier in the DB or create one for the test
                non_exempt_tier = SubscriptionTier.query.filter_by(billing_provider='stripe').first()
                if not non_exempt_tier:
                    non_exempt_tier = SubscriptionTier(
                        name="Paid Tier",
                        billing_provider='stripe',  # This sets is_billing_exempt=False automatically
                        user_limit=10
                    )
                    db.session.add(non_exempt_tier)
                    db.session.flush()  # Get the ID
    
                fresh_org.subscription_tier_id = non_exempt_tier.id
    
            # CRITICAL: Force commit to ensure changes are persisted
            db.session.commit()
    
            # Verify the billing status was actually set by querying fresh from DB
            verification_org = db.session.get(Organization, fresh_org.id)
            assert verification_org.billing_status == billing_status, f"Expected {billing_status}, got {verification_org.billing_status}"
    
            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200
    
            # ACT
            # Log the user in and try to access the protected route
            with client.session_transaction() as sess:
                sess['_user_id'] = str(fresh_user.id)
                sess['_fresh'] = True
    
            # Debug: Verify the org and tier are set up correctly
            print(f"DEBUG: User {fresh_user.id}, Org billing_status={verification_org.billing_status}")
            print(f"DEBUG: Tier exempt={verification_org.subscription_tier.is_billing_exempt if verification_org.subscription_tier else 'None'}")
    
            response = client.get('/_protected_dashboard')
    
            # ASSERT
            assert response.status_code == expected_status_code
    
            # If redirected, ensure it's to the correct billing page
            if expected_status_code == 302:
>               assert '/billing/upgrade' in response.location or '/billing' in response.location
E               AssertionError: assert ('/billing/upgrade' in '/auth/login' or '/billing' in '/auth/login')
E                +  where '/auth/login' = <WrapperTestResponse streamed [302 FOUND]>.location
E                +  and   '/auth/login' = <WrapperTestResponse streamed [302 FOUND]>.location

tests/test_billing_and_tier_enforcement.py:135: AssertionError
------------------ Captured log setup -------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
----------------- Captured stdout call ------------------
DEBUG: User 2, Org billing_status=suspended
DEBUG: Tier exempt=False
--- EXECUTING CORRECT MIDDLEWARE ---
MIDDLEWARE DEBUG: Processing GET /_protected_dashboard, endpoint=_protected_dashboard
MIDDLEWARE DEBUG: User authenticated=True
DEBUG: User 2, Org billing_status=suspended
DEBUG: Tier exempt=False
------------------- Captured log call -------------------
WARNING  app.middleware:middleware.py:119 Billing access denied for org 2: organization_suspended
=================== warnings summary ====================
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================ short test summary info ================
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] - AssertionError: assert ('/billing/upgrade' in '/auth...
======== 1 failed, 3 passed, 8 warnings in 9.97s ========
