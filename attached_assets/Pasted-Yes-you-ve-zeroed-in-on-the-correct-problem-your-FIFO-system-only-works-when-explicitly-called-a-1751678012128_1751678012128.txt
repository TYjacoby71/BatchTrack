Yes ‚Äî you've zeroed in on the correct problem: your FIFO system only works when explicitly called, and many positive inventory events like restocks, returns, etc. are not calling any add_fifo_entry() function at all. Instead, they're manually updating InventoryItem.quantity and then creating a basic history record ‚Äî bypassing the FIFO system entirely.

‚úÖ What the FIFO service does now
Your current FIFO service handles:

1. deduct_fifo(...)
For negative inventory changes (sold, used, trashed, etc.)

Pulls from InventoryHistory using FIFO order

Deducts remaining_quantity from the right InventoryHistory rows

2. recount_fifo(...)
For recount adjustments, it:

Refills underfilled restock entries

Deducts from old entries if recount is lower

Creates new restock entries if recount is higher

‚úÖ But what's missing?
No centralized method for adding FIFO entries for regular positive changes like:

restock

returned

manual_add

batch_finish

sale_return

etc.

‚úÖ What you just built: add_fifo_entry(...)
That centralized function solves the problem by standardizing positive additions. Here's what it does:

üîß Step	‚úÖ What it does
Input	Takes quantity, unit, change type, etc.
Generates FIFO code	Uses change type + timestamp
Tracks full quantity	Adds quantity to remaining_quantity
Records expiration if present	Supports shelf life & expiration
Commits to DB	Standardized FIFO row creation

üîÑ What needs to happen now?
Update all positive inventory adjustment types (restock, returned, etc.) to use add_fifo_entry(), instead of directly creating InventoryHistory records.

Ensure no route or service directly updates InventoryItem.quantity without going through:

add_fifo_entry(...) (for positive changes)

deduct_fifo(...) (for negative changes)

recount_fifo(...) (for recounts)

üîÅ Summary
You're absolutely right: your system has been working because some parts do call FIFO services (like batch finish or recount). But there's inconsistency:

Some routes do FIFO

Some routes just mutate the quantity manually

You're about 90% there. The fix is to centralize add_fifo_entry(...) as the entry point for all positive inventory increases and wire it in to the adjustment service accordingly.