def update_existing_users_with_roles():
    """Update existing users with database roles and user_type"""
    # Ensure we're in an application context
    from flask import current_app
    if not current_app:
        raise RuntimeError("update_existing_users_with_roles() must be called within Flask application context")

    # Get the required roles
    org_owner_role = Role.query.filter_by(name='organization_owner', is_system_role=True).first()
    production_manager_role = Role.query.filter_by(name='production_manager', is_system_role=True).first()
    operator_role = Role.query.filter_by(name='operator', is_system_role=True).first()

    if not org_owner_role:
        print("❌ Required roles not found. Please run consolidated permissions seeder first.")
        return

    # Update admin user
    admin_user = User.query.filter_by(username='admin').first()
    if admin_user:
        admin_user.user_type = 'customer'
        admin_user.is_organization_owner = True  # Make admin an organization owner
        if org_owner_role:
            admin_user.roles = [org_owner_role]
        db.session.add(admin_user)
        print(f"✅ Updated admin user with org_owner role")

    # Update manager user
    manager_user = User.query.filter_by(username='manager').first()
    if manager_user:
        if production_manager_role:
            manager_user.roles = [production_manager_role]
            print(f"✅ Updated manager user with production_manager role")
        else:
            print("⚠️  Production manager role not found, skipping role assignment")
        db.session.add(manager_user)

    # Update operator user
    operator_user = User.query.filter_by(username='operator').first()
    if operator_user:
        if operator_role:
            operator_user.roles = [operator_role]
            print(f"✅ Updated operator user with operator role")
        else:
            print("⚠️  Operator role not found, skipping role assignment")
        db.session.add(operator_user)

    # Update dev user
    dev_user = User.query.filter_by(username='dev').first()
    if dev_user:
        dev_user.user_type = 'developer'  # Dev should remain developer type
        dev_user.organization_id = None  # Developers don't belong to organizations
        dev_user.is_organization_owner = False
        dev_user.roles = []  # Developers don't have organization roles
        db.session.add(dev_user)
        print(f"✅ Updated dev user to developer type")

    db.session.commit()
    print("✅ Existing users updated with database roles and user_type")