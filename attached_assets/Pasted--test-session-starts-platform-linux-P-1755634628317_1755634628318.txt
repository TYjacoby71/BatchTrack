============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 7 items                                                              

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling ERROR [ 14%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] ERROR [ 28%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] ERROR [ 42%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] ERROR [ 57%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] ERROR [ 71%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing ERROR [ 85%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade ERROR [100%]

======================== ERRORS =========================
_ ERROR at setup of TestBillingAndTierEnforcement.test_tier_permission_is_the_hard_ceiling _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[active-200] _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[past_due-302] _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[suspended-302] _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[canceled-302] _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_developer_can_masquerade_regardless_of_billing _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_complete_security_cascade _

    @pytest.fixture(scope='function')  # Changed to function scope for isolation
    def app():
        """Create and configure a new app instance for each test."""
        # Create a temporary file to use as the database
        db_fd, db_path = tempfile.mkstemp()
    
        app = create_app({
            'TESTING': True,
            'DATABASE_URL': f'sqlite:///{db_path}',
            'WTF_CSRF_ENABLED': False,
            'SECRET_KEY': 'test-secret-key',
            'STRIPE_SECRET_KEY': 'sk_test_fake',
            'STRIPE_WEBHOOK_SECRET': 'whsec_test_fake',
            'LOGIN_DISABLED': False,  # Ensure authentication is active in tests
            'TESTING_DISABLE_AUTH': False  # Disable any test-specific auth bypass
            # Don't disable login - we need to test permissions properly
        })
    
        with app.app_context():
            db.create_all()
    
            # Create basic test data
>           _create_test_data()

tests/conftest.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/conftest.py:77: in _create_test_data
    tier = SubscriptionTier(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <SubscriptionTier Test Tier>
kwargs = {'billing_provider': 'exempt', 'description': 'Test tier for testing', 'is_billing_exempt': True, 'is_customer_facing': True, ...}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------ Captured log setup -------------------
ERROR    app.blueprints_registry:blueprints_registry.py:128 Failed to register billing blueprint: unexpected indent (billing_service.py, line 206)
INFO     app:unit_utils.py:28 BatchTrack startup
=================== warnings summary ====================
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================ short test summary info ================
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing - AttributeError: property 'key' of 'SubscriptionTier'...
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade - AttributeError: property 'key' of 'SubscriptionTier'...
============= 7 warnings, 7 errors in 8.30s =============
