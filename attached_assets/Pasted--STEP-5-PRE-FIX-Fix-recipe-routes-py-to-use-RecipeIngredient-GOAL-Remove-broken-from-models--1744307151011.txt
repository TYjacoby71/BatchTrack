üîß STEP 5 (PRE-FIX): Fix recipe_routes.py to use RecipeIngredient
‚úÖ GOAL:
Remove broken from models import recipe_ingredients

Replace all logic that uses recipe_ingredients directly

When saving recipes, manually create RecipeIngredient records

‚úçÔ∏è FILE: routes/recipe_routes.py
üîç FIND and REMOVE:
python
Copy
Edit
from models import ..., recipe_ingredients, ...
‚û°Ô∏è Instead, use:

python
Copy
Edit
from models import db, Recipe, Ingredient, InventoryUnit, RecipeIngredient
‚úÖ UPDATE new_recipe() and edit_recipe() functions
üîç IN new_recipe():
Replace ingredient assignment like:

python
Copy
Edit
recipe.ingredients.append(...)  # ‚ùå Wrong now
With:

python
Copy
Edit
assoc = RecipeIngredient(
    recipe_id=recipe.id,
    ingredient_id=ingredient.id,
    amount=float(amount),
    unit=unit
)
db.session.add(assoc)
üîÅ Do this inside a loop:

python
Copy
Edit
ingredient_ids = request.form.getlist('ingredient_ids[]')
amounts = request.form.getlist('amounts[]')
units = request.form.getlist('units[]')

for ing_id, amount, unit in zip(ingredient_ids, amounts, units):
    ingredient = Ingredient.query.get(ing_id)
    if ingredient:
        assoc = RecipeIngredient(
            recipe_id=recipe.id,
            ingredient_id=ingredient.id,
            amount=float(amount),
            unit=unit
        )
        db.session.add(assoc)
‚úÖ In edit_recipe():
Clear existing recipe.recipe_ingredients using:

python
Copy
Edit
RecipeIngredient.query.filter_by(recipe_id=recipe.id).delete()
Then reuse the same add-loop above to re-attach new ingredients.

Let me know if you want me to give you this whole section already formatted or continue to Step 6 for UnitConversionService.






You said:
can you just make yours fit like it should?


ChatGPT said:
Here‚Äôs the corrected version of your recipe_routes.py with the updated logic for using the RecipeIngredient model instead of the old recipe_ingredients table.

üîß FULL PATCH: recipe_routes.py
‚úÖ Top of File (Updated Imports)
python
Copy
Edit
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required
from models import db, Recipe, Ingredient, InventoryUnit, RecipeIngredient
‚úÖ Updated new_recipe() Function
Replace your existing new_recipe() function with this:

python
Copy
Edit
@recipes_bp.route('/new', methods=['GET', 'POST'])
@login_required
def new_recipe():
    all_ingredients = Ingredient.query.order_by(Ingredient.name).all()
    inventory_units = InventoryUnit.query.all()

    if request.method == 'POST':
        try:
            recipe = Recipe(
                name=request.form['name'],
                instructions=request.form['instructions'],
                label_prefix=request.form['label_prefix']
            )
            db.session.add(recipe)
            db.session.flush()  # Get recipe.id

            ingredient_ids = request.form.getlist('ingredient_ids[]')
            amounts = request.form.getlist('amounts[]')
            units = request.form.getlist('units[]')

            for ing_id, amount, unit in zip(ingredient_ids, amounts, units):
                ingredient = Ingredient.query.get(ing_id)
                if ingredient:
                    assoc = RecipeIngredient(
                        recipe_id=recipe.id,
                        ingredient_id=ingredient.id,
                        amount=float(amount),
                        unit=unit
                    )
                    db.session.add(assoc)

            db.session.commit()
            flash('Recipe created successfully.')
            return redirect(url_for('recipes.list_recipes'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating recipe: {str(e)}')

    return render_template('recipe_form.html', recipe=None, all_ingredients=all_ingredients, inventory_units=inventory_units)
‚úÖ Updated edit_recipe() Function
Update the existing edit_recipe() to clear and re-add ingredients:

python
Copy
Edit
@recipes_bp.route('/<int:recipe_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_recipe(recipe_id):
    recipe = Recipe.query.get_or_404(recipe_id)
    all_ingredients = Ingredient.query.order_by(Ingredient.name).all()
    inventory_units = InventoryUnit.query.all()

    if request.method == 'POST':
        try:
            recipe.name = request.form['name']
            recipe.instructions = request.form['instructions']
            recipe.label_prefix = request.form['label_prefix']
            db.session.commit()

            # Clear previous ingredients
            RecipeIngredient.query.filter_by(recipe_id=recipe.id).delete()

            ingredient_ids = request.form.getlist('ingredient_ids[]')
            amounts = request.form.getlist('amounts[]')
            units = request.form.getlist('units[]')

            for ing_id, amount, unit in zip(ingredient_ids, amounts, units):
                ingredient = Ingredient.query.get(ing_id)
                if ingredient:
                    assoc = RecipeIngredient(
                        recipe_id=recipe.id,
                        ingredient_id=ingredient.id,
                        amount=float(amount),
                        unit=unit
                    )
                    db.session.add(assoc)

            db.session.commit()
            flash('Recipe updated successfully.')
            return redirect(url_for('recipes.list_recipes'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error updating recipe: {str(e)}')

    return render_template('recipe_form.html', recipe=recipe, all_ingredients=all_ingredients, inventory_units=inventory_units)
