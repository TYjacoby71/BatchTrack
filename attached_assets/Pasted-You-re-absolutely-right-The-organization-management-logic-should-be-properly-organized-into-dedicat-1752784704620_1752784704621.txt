You're absolutely right! The organization management logic should be properly organized into dedicated modules. Looking at your current structure, I think the best approach is:

Organization management → stays in organization blueprint (already exists)
Authentication logic → stays in auth blueprint
Permission/Role management → move to auth blueprint as part of core authentication system
Let me reorganize this properly:

1. Move organization templates to proper folder structure
app/blueprints/organization/templates/organization/dashboard.html
Move org dashboard template to organization blueprint
2. Update organization blueprint to use its own templates
app/blueprints/organization/__init__.py
Update organization blueprint to register template folder
3. Update organization routes to use new template path
app/blueprints/organization/routes.py
Update template path to organization template
4. Create auth blueprint structure for permissions/roles
app/blueprints/auth/permissions.py
Create permission management routes in auth blueprint
5. Create auth templates for roles/permissions
app/blueprints/auth/templates/auth/permissions.html
Create permissions management template
6. Update auth blueprint init to include new routes
app/blueprints/auth/__init__.py
Register auth permissions routes
7. Update main app to register auth permissions routes
app/__init__.py
Register auth permissions blueprint
This reorganization gives you:

Organization Blueprint (/organization):

User management (invite, edit, delete users)
Organization settings
Subscription management
Activity reports
Templates in app/blueprints/organization/templates/organization/
Auth Blueprint (/auth):

Login/logout (existing)
Permission management (/auth/permissions) - system admin only
Role management (/auth/roles) - org owners and system admins
Templates in app/blueprints/auth/templates/auth/
This structure separates concerns properly:

Organization = business/tenant management