/nix/store/8b4vn1iyn6kqiisjvlmv67d1c0p3j6wj-gnugrep-3.11/bin/grep: warning: stray \ before -
app/models/statistics.py:            total_value = db.session.query(func.sum(InventoryItem.quantity * InventoryItem.cost_per_unit))\
app/models/product.py:        return self.quantity <= self.low_stock_threshold
app/models/product.py:        if self.quantity == 0:
app/models/product.py:        current_qty = self.inventory_item.quantity if self.inventory_item else 0.0
app/blueprints/products/product_variants.py:            size_groups[key]['total_quantity'] += sku.inventory_item.quantity
app/blueprints/products/product_variants.py:            size_groups[key]['total_quantity'] += sku.quantity
app/blueprints/products/product_variants.py:    has_inventory = any(sku.inventory_item.quantity > 0 for sku in skus)
app/blueprints/products/sku.py:    total_quantity = sku.inventory_item.quantity if sku.inventory_item else 0
app/blueprints/products/sku.py:        total_quantity = sum(sku.quantity for sku in skus)
app/blueprints/products/sku.py:        target_sku.inventory_item.quantity = total_quantity
app/blueprints/products/sku.py:        total_value = sum(sku.quantity * (sku.cost_per_unit or 0) for sku in skus)
app/blueprints/products/products.py:                                self.total_bulk += sku.inventory_item.quantity
app/blueprints/products/products.py:                                self.total_packaged += sku.inventory_item.quantity
app/blueprints/products/products.py:        total_inventory = sum((sku.inventory_item.quantity if sku.inventory_item else 0.0) for sku in skus)
app/blueprints/batches/finish_batch.py:            total_ingredient_cost += (ing.quantity_used or 0) * (ing.cost_per_unit or 0)
app/blueprints/batches/finish_batch.py:            total_ingredient_cost += (extra.quantity_used or 0) * (extra.cost_per_unit or 0)
app/blueprints/batches/finish_batch.py:        container_usage[container_id]['used'] += container.quantity_used or 0
app/blueprints/batches/finish_batch.py:        container_usage[container_id]['used'] += extra_container.quantity_used or 0
app/blueprints/inventory/routes.py:    total_value = sum(item.quantity * item.cost_per_unit for item in inventory_items)
app/blueprints/inventory/routes.py:            item.temp_available_quantity = float(item.quantity) - item.temp_expired_quantity
app/blueprints/inventory/routes.py:            item.temp_available_quantity = item.quantity
app/blueprints/inventory/routes.py:        item.temp_available_quantity = float(item.quantity) - item.temp_expired_quantity
app/blueprints/inventory/routes.py:        item.temp_available_quantity = item.quantity
app/blueprints/recipes/routes.py:            ingredients = [(ri.inventory_item_id, ri.quantity, ri.unit) for ri in new_recipe.recipe_ingredients]
app/services/inventory_adjustment/_validation.py:    inventory_qty = float(item.quantity)
app/services/inventory_adjustment/_recount_logic.py:            item.quantity = current_fifo_total
app/services/inventory_adjustment/_recount_logic.py:            original_quantity = lot.quantity_change
app/services/inventory_adjustment/_recount_logic.py:        item.quantity += delta_needed
app/services/inventory_adjustment/_fifo_ops.py:        item.quantity += quantity
app/services/inventory_adjustment/_fifo_ops.py:        item.quantity = current_fifo_total
app/services/inventory_adjustment/_fifo_ops.py:            item.quantity = float(item.quantity) + float(quantity)
app/services/recipe_service/_scaling.py:            original_quantity = recipe_ingredient.quantity
app/services/recipe_service/_batch_integration.py:            scaled_quantity = recipe_ingredient.quantity * scale
app/services/recipe_service/_production_planning.py:            scaled_quantity = recipe_ingredient.quantity * scale
app/services/recipe_service/_production_planning.py:                quantity_needed=recipe_ingredient.quantity * scale,
app/services/recipe_service/_production_planning.py:            scaled_quantity = recipe_ingredient.quantity * scale
app/services/recipe_service/_production_planning.py:            quantity_needed=recipe_ingredient.quantity * scale,
app/services/stock_check/handlers/product_handler.py:        available_quantity = product.quantity
app/services/stock_check/handlers/product_handler.py:        status = self._determine_status(available_quantity, request.quantity_needed)
app/services/stock_check/handlers/product_handler.py:            needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/product_handler.py:            formatted_needed=self._format_quantity_display(request.quantity_needed, request.unit),
app/services/stock_check/handlers/product_handler.py:            needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/product_handler.py:            formatted_needed=self._format_quantity_display(request.quantity_needed, request.unit),
app/services/stock_check/handlers/product_handler.py:            needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/product_handler.py:            formatted_needed=self._format_quantity_display(request.quantity_needed, request.unit),
app/services/stock_check/handlers/container_handler.py:        available_containers = container.quantity
app/services/stock_check/handlers/container_handler.py:                yield_in_container_units = request.quantity_needed
app/services/stock_check/handlers/ingredient_handler.py:            status = self._determine_status(available_converted, request.quantity_needed)
app/services/stock_check/handlers/ingredient_handler.py:                needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/ingredient_handler.py:                formatted_needed=self._format_quantity_display(request.quantity_needed, recipe_unit),
app/services/stock_check/handlers/ingredient_handler.py:                needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/ingredient_handler.py:                formatted_needed=self._format_quantity_display(request.quantity_needed, recipe_unit),
app/services/stock_check/handlers/ingredient_handler.py:            needed_quantity=request.quantity_needed,
app/services/stock_check/handlers/ingredient_handler.py:            formatted_needed=self._format_quantity_display(request.quantity_needed, request.unit),
app/services/stock_check/handlers/ingredient_handler.py:            quantity_needed = recipe_ingredient.quantity * scale
app/services/batch_integration_service.py:                capacity = (container.container.storage_amount or 0) * container.quantity_used
app/services/batch_integration_service.py:                capacity = (extra_container.container.storage_amount or 0) * extra_container.quantity_used
app/services/batch_integration_service.py:                quantity_delta=container.quantity_used,  # Positive to restore
app/services/batch_integration_service.py:        current_qty = container_record.quantity_used
app/services/batch_integration_service.py:        container_record.quantity_used = new_total
app/services/batch_integration_service.py:            quantity_delta=container_record.quantity_used,
app/services/batch_integration_service.py:                quantity_delta=-container_record.quantity_used,
app/services/batch_integration_service.py:        container_record.quantity_used = new_quantity
app/services/batch_service/core.py:                ingredient_total = sum((ing.quantity_used or 0) * (ing.cost_per_unit or 0) for ing in batch.batch_ingredients)
app/services/batch_service/core.py:                container_total = sum((c.quantity_used or 0) * (c.cost_each or 0) for c in batch.containers)
app/services/batch_service/core.py:                extras_total = sum((e.quantity_used or 0) * (e.cost_per_unit or 0) for e in batch.extra_ingredients)
app/services/batch_service/core.py:                extra_container_total = sum((e.quantity_used or 0) * (e.cost_each or 0) for e in batch.extra_containers)
app/services/batch_service/batch_operations.py:                required_amount = assoc.quantity * scale
app/services/batch_service/batch_operations.py:                        quantity=batch_ing.quantity_used,
app/services/batch_service/batch_operations.py:                        quantity=extra_ing.quantity_used,
app/services/batch_service/batch_operations.py:                        quantity=batch_container.quantity_used,
app/services/batch_service/batch_operations.py:                        quantity=extra_container.quantity_used,
app/services/batch_service/batch_management.py:            ingredient_total = sum((ing.quantity_used or 0) * (ing.cost_per_unit or 0) for ing in batch.batch_ingredients)
app/services/batch_service/batch_management.py:            container_total = sum((c.quantity_used or 0) * (c.cost_each or 0) for c in batch.containers)
app/services/batch_service/batch_management.py:            extras_total = sum((e.quantity_used or 0) * (e.cost_per_unit or 0) for e in batch.extra_ingredients)
app/services/batch_service/batch_management.py:            extra_container_total = sum((e.quantity_used or 0) * (e.cost_each or 0) for e in batch.extra_containers)
app/services/product_service.py:            InventoryItem.quantity <= ProductSKU.low_stock_threshold * threshold_multiplier,
app/services/product_service.py:        total_inventory = sum((sku.inventory_item.quantity if sku.inventory_item else 0.0) for sku in active_skus)
app/services/pos_integration.py:            reserved_item.quantity += quantity
app/services/pos_integration.py:                reserved_item.quantity -= reservation.quantity
app/services/pos_integration.py:                    quantity=-abs(reservation.quantity),  # Negative for deduction
app/services/pos_integration.py:                total_sold += reservation.quantity
app/services/pos_integration.py:                    reservation.reserved_item.quantity += reservation.quantity
app/services/pos_integration.py:                    quantity=abs(reservation.quantity),  # Positive for addition
app/services/pos_integration.py:                total_returned += reservation.quantity
app/services/pos_integration.py:        result = db.session.query(func.sum(Reservation.quantity)).filter(
app/services/reservation_service.py:                qty=reservation.quantity,
app/services/reservation_service.py:        reserved_item.quantity += quantity
app/services/reservation_service.py:                quantity=reservation.quantity,  # credit back
app/services/reservation_service.py:            reservation.product_item.quantity += reservation.quantity
app/services/reservation_service.py:            reservation.reserved_item.quantity -= reservation.quantity
app/services/reservation_service.py:            total_released += reservation.quantity
app/services/reservation_service.py:        product_item.quantity += reservation.quantity
app/services/reservation_service.py:        reserved_item.quantity -= reservation.quantity
app/services/reservation_service.py:        reserved_item.quantity -= reservation.quantity
app/services/reservation_service.py:        result = db.session.query(func.sum(Reservation.quantity)).filter(
app/services/reservation_service.py:            order_reservations[order_id]['quantity'] += reservation.quantity
app/services/reservation_service.py:            total_reserved += reservation.quantity
app/services/combined_inventory_alerts.py:                InventoryItem.quantity <= InventoryItem.low_stock_threshold,
app/services/combined_inventory_alerts.py:                InventoryItem.quantity <= InventoryItem.low_stock_threshold
app/services/combined_inventory_alerts.py:                InventoryItem.quantity == 0
