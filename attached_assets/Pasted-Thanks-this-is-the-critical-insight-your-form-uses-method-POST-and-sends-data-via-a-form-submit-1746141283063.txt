Thanks — this is the critical insight: your form uses method="POST" and sends data via a form submit, not a JavaScript fetch() request.

That means the backend is incorrectly treating the request as JSON, which is why your CSRF validation still fails and you keep getting a 400.

✅ What’s Wrong
Your route uses:

python
Copy
Edit
if request.is_json:
    data = request.get_json()
else:
    data = request.form
But Replit logs show your request comes from an HTML <form>, not from fetch(), so request.is_json is False — good. But…

Inside request.form, csrf_token is not being correctly passed, possibly because of how {{ csrf_token() }} is being double-called.

✅ 2-Step Tailored Fix for Your Live App
✅ Step 1: Fix the HTML
In templates/conversion/mappings.html, remove this:

html
Copy
Edit
<meta name="csrf-token" content="{{ csrf_token() }}">
And keep only:

html
Copy
Edit
<input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
Why? That <meta> tag is for JavaScript use. Your form doesn't use JS.

✅ Step 2: Fix Your Route Handler
In blueprints/conversion/routes.py, confirm this logic:

python
Copy
Edit
@conversion_bp.route('/custom-mappings', methods=['GET', 'POST'])
def manage_mappings():
    if request.method == 'POST':
        try:
            csrf_token = request.form.get("csrf_token")
            validate_csrf(csrf_token)
        except ValidationError:
            flash("Invalid CSRF token", "danger")
            return redirect(request.url)

        from_unit = request.form.get("from_unit")
        to_unit = request.form.get("to_unit")
        try:
            multiplier = float(request.form.get("multiplier", "0"))
        except:
            flash("Multiplier must be a number.", "danger")
            return redirect(request.url)

        if not from_unit or not to_unit or multiplier <= 0:
            flash("All fields are required.", "danger")
            return redirect(request.url)

        from_unit_obj = Unit.query.filter_by(name=from_unit).first()
        to_unit_obj = Unit.query.filter_by(name=to_unit).first()

        if not from_unit_obj or not to_unit_obj:
            flash("Units not found in database.", "danger")
            return redirect(request.url)

        from_unit_obj.base_unit = to_unit_obj.base_unit
        from_unit_obj.multiplier_to_base = multiplier * to_unit_obj.multiplier_to_base

        mapping = CustomUnitMapping(from_unit=from_unit, to_unit=to_unit, multiplier=multiplier)
        db.session.add(mapping)
        db.session.add(from_unit_obj)
        db.session.commit()

        flash("Custom mapping added successfully.", "success")
        return redirect(request.url)

    units = Unit.query.all()
    mappings = CustomUnitMapping.query.all()
    return render_template("conversion/mappings.html", units=units, mappings=mappings, csrf_token=generate_csrf())
✅ After That
Save & reload your form page.

Submit a valid mapping (bucket → lb, multiplier 1).

Watch logs. It should now return 302 (redirect) instead of 400.

