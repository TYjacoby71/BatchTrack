   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
__________ TestInventoryBasicOperations.test_simple_restock_operation __________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e4bd0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_simple_restock_operation(self, app, db_session, setup_basic_data):
        """Test basic restock operation"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Perform restock
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            notes='Basic restock test',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:163: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_simple_restock_operation
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
________ TestInventoryBasicOperations.test_multiple_restock_operations _________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e5290>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_multiple_restock_operations(self, app, db_session, setup_basic_data):
        """Test multiple restock operations build up inventory"""
        data = setup_basic_data
        item = data['ingredient']
    
        # First restock
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=30.0,
            change_type='restock',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:190: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=30.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_multiple_restock_operations
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
____________ TestInventoryBasicOperations.test_simple_use_deduction ____________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e5990>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_simple_use_deduction(self, app, db_session, setup_basic_data):
        """Test basic 'use' deduction"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add stock first
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Use some inventory
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='use',
            notes='Basic use test',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:238: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_simple_use_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=use, caller=tests/test_inventory_basic_operations.py:test_simple_use_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_______________ TestInventoryBasicOperations.test_sale_deduction _______________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e60d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_sale_deduction(self, app, db_session, setup_basic_data):
        """Test basic sale deduction"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Record sale
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=10.0,
            change_type='sale',
            notes='Basic sale',
            sale_price=25.0,
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:273: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_sale_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=sale, caller=tests/test_inventory_basic_operations.py:test_sale_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_____________ TestInventoryBasicOperations.test_spoilage_deduction _____________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e6810>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_spoilage_deduction(self, app, db_session, setup_basic_data):
        """Test basic spoilage deduction"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=80.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Record spoilage
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=15.0,
            change_type='spoil',
            notes='Expired inventory',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:306: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=80.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_spoilage_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=15.0, change_type=spoil, caller=tests/test_inventory_basic_operations.py:test_spoilage_deduction
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
____________ TestInventoryBasicOperations.test_fifo_deduction_order ____________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e6f50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_fifo_deduction_order(self, app, db_session, setup_basic_data):
        """Test that deductions follow FIFO (first-in-first-out) order"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add stock in two batches at different times
        process_inventory_adjustment(
            item_id=item.id,
            quantity=60.0,
            change_type='restock',
            notes='First batch',
            created_by=data['user'].id
        )
    
        # Small delay to ensure different timestamps
        import time
        time.sleep(0.01)
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=40.0,
            change_type='restock',
            notes='Second batch',
            created_by=data['user'].id
        )
    
        # Use 70 units (should consume first batch completely + 10 from second)
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=70.0,
            change_type='use',
            notes='FIFO test',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:347: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=60.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=40.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=70.0, change_type=use, caller=tests/test_inventory_basic_operations.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_______ TestInventoryBasicOperations.test_inventory_fifo_sync_validation _______

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e7690>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_inventory_fifo_sync_validation(self, app, db_session, setup_basic_data):
        """Test that inventory quantities stay in sync with FIFO totals"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Perform multiple operations
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=30.0,
            change_type='use',
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Validate sync
        is_valid, error, inventory_qty, fifo_total = validate_inventory_fifo_sync(item.id)
        assert is_valid is True
        assert inventory_qty == fifo_total
>       assert inventory_qty == 95.0  # 100 - 30 + 25
E       assert 0.0 == 95.0

tests/test_inventory_basic_operations.py:393: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=30.0, change_type=use, caller=tests/test_inventory_basic_operations.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
______________ TestInventoryBasicOperations.test_recount_increase ______________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25173e7d90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_recount_increase(self, app, db_session, setup_basic_data):
        """Test recount that increases inventory"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Recount to higher amount
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=75.0,  # Target quantity
            change_type='recount',
            notes='Found more during count',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_recount_increase
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=75.0, change_type=recount, caller=tests/test_inventory_basic_operations.py:test_recount_increase
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
______________ TestInventoryBasicOperations.test_recount_decrease ______________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ec510>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_recount_decrease(self, app, db_session, setup_basic_data):
        """Test recount that decreases inventory"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=80.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Recount to lower amount
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=65.0,  # Target quantity
            change_type='recount',
            notes='Some missing during count',
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:444: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=80.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_recount_decrease
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=65.0, change_type=recount, caller=tests/test_inventory_basic_operations.py:test_recount_decrease
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_____ TestInventoryBasicOperations.test_insufficient_inventory_protection ______

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ecc50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_insufficient_inventory_protection(self, app, db_session, setup_basic_data):
        """Test protection against overdraft (insufficient inventory)"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add small amount of stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=20.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Try to deduct more than available
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=30.0,  # More than the 20 available
            change_type='sale',
            created_by=data['user'].id
        )
    
        # Should fail
>       assert success is False
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is False

tests/test_inventory_basic_operations.py:473: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=20.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_insufficient_inventory_protection
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=30.0, change_type=sale, caller=tests/test_inventory_basic_operations.py:test_insufficient_inventory_protection
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_________ TestInventoryBasicOperations.test_nonexistent_item_handling __________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ed3d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_nonexistent_item_handling(self, app, db_session, setup_basic_data):
        """Test handling of operations on nonexistent items"""
        data = setup_basic_data
    
        success = process_inventory_adjustment(
            item_id=99999,  # Non-existent ID
            quantity=10.0,
            change_type='restock',
            created_by=data['user'].id
        )
>       assert success is False
E       AssertionError: assert (False, 'Inventory item not found') is False

tests/test_inventory_basic_operations.py:489: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=99999, quantity=10.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_nonexistent_item_handling
ERROR    app.services.inventory_adjustment._core:_core.py:42 Inventory item not found: 99999
____ TestInventoryBasicOperations.test_basic_adjustment_types[restock-50.0] ____

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee1d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'restock', adjustment_qty = 50.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_ TestInventoryBasicOperations.test_basic_adjustment_types[manual_addition-25.0] _

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee310>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'manual_addition', adjustment_qty = 25.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=manual_addition, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
___ TestInventoryBasicOperations.test_basic_adjustment_types[returned-15.0] ____

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee450>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'returned', adjustment_qty = 15.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=15.0, change_type=returned, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
______ TestInventoryBasicOperations.test_basic_adjustment_types[use-30.0] ______

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee590>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'use', adjustment_qty = 30.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=30.0, change_type=use, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_____ TestInventoryBasicOperations.test_basic_adjustment_types[sale-20.0] ______

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee6d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'sale', adjustment_qty = 20.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=20.0, change_type=sale, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_____ TestInventoryBasicOperations.test_basic_adjustment_types[spoil-10.0] _____

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171ee810>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}
change_type = 'spoil', adjustment_qty = 10.0

    @pytest.mark.parametrize("change_type,adjustment_qty", [
        ("restock", 50.0),
        ("manual_addition", 25.0),
        ("returned", 15.0),
        ("use", 30.0),
        ("sale", 20.0),
        ("spoil", 10.0),
    ])
    def test_basic_adjustment_types(self, app, db_session, setup_basic_data, change_type, adjustment_qty):
        """Parameterized test for basic adjustment types"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add initial stock for deductive operations
        if change_type in ['use', 'sale', 'spoil']:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            notes=f'Basic {change_type} test',
            created_by=data['user'].id
        )
    
        # All basic operations should succeed
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:525: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=spoil, caller=tests/test_inventory_basic_operations.py:test_basic_adjustment_types
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
__________ TestInventoryBasicOperations.test_audit_trail_completeness __________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171eeb50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_audit_trail_completeness(self, app, db_session, setup_basic_data):
        """Test that operations create proper audit trails"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Perform operation
        process_inventory_adjustment(
            item_id=item.id,
            quantity=45.0,
            change_type='restock',
            notes='Audit trail test',
            created_by=data['user'].id
        )
    
        # Verify audit trail
        history = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).first()
    
>       assert history.change_type == 'restock'
E       AttributeError: 'NoneType' object has no attribute 'change_type'

tests/test_inventory_basic_operations.py:554: AttributeError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=45.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_audit_trail_completeness
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
____________ TestInventoryBasicOperations.test_cost_tracking_basic _____________

self = <tests.test_inventory_basic_operations.TestInventoryBasicOperations object at 0x7f25171eeed0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
setup_basic_data = {'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'tier': <SubscriptionTier Basic Test Tier>, 'user': <User basic_test_user>}

    def test_cost_tracking_basic(self, app, db_session, setup_basic_data):
        """Test basic cost tracking in FIFO entries"""
        data = setup_basic_data
        item = data['ingredient']
    
        # Add stock with specific cost
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            cost_override=2.50,
            created_by=data['user'].id
        )
>       assert success is True
E       assert (False, "Error in initial stock creation: app.services.inventory_adjustment._fifo_ops._internal_add_fifo_entry_enhanced() got multiple values for keyword argument 'expiration_date'") is True

tests/test_inventory_basic_operations.py:574: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_basic_operations.py:test_cost_tracking_basic
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
_ TestInventoryRoutesCanonicalService.test_adjust_inventory_initial_stock_calls_canonical_service _

self = <tests.test_inventory_routes_canonicalization.TestInventoryRoutesCanonicalService object at 0x7f2517237190>
client = <FlaskClient <Flask 'app'>>, app = <Flask 'app'>

    def test_adjust_inventory_initial_stock_calls_canonical_service(self, client, app):
        """Test that initial stock adjustment for a new item uses the canonical service."""
        with app.app_context():
            # ARRANGE: Create a real, valid user and item for this test.
            # This is more robust than complex mocking.
            from app.models import db, InventoryItem, User, Organization, SubscriptionTier
    
            tier = SubscriptionTier(name="Test Tier", tier_type="monthly", user_limit=5)
            db.session.add(tier)
            db.session.flush()
    
            org = Organization(name="Test Org", billing_status='active', subscription_tier_id=tier.id)
            db.session.add(org)
            db.session.flush()
    
            user = User(username="inventory_tester", email="inv@test.com", organization_id=org.id)
            db.session.add(user)
            db.session.flush()
    
            item = InventoryItem(name="New Item", unit="g", organization_id=org.id)
            db.session.add(item)
            db.session.commit()
    
            # Log in our real test user
            with client.session_transaction() as sess:
                sess['_user_id'] = str(user.id)
                sess['_fresh'] = True
    
            # Patch only the canonical service, which is what we want to test.
            with patch('app.blueprints.inventory.routes.process_inventory_adjustment') as mock_process:
                mock_process.return_value = (True, "Success")  # Return a tuple
    
                # ACT
                response = client.post(f'/inventory/adjust/{item.id}', data={
                    'adjustment_type': 'restock',
                    'quantity': '100.0',
                    'notes': 'Initial stock'
                })
    
                # ASSERT
                # 1. The service was called exactly once.
>               mock_process.assert_called_once()

tests/test_inventory_routes_canonicalization.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='process_inventory_adjustment' id='139797227976272'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'process_inventory_adjustment' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
----------------------------- Captured stdout call -----------------------------
--- EXECUTING CORRECT MIDDLEWARE ---
MIDDLEWARE DEBUG: Processing POST /inventory/adjust/1, endpoint=inventory.adjust_inventory
MIDDLEWARE DEBUG: User authenticated=True
DEBUG: User 1, Org billing_status=active
DEBUG: Tier exempt=True
DEBUG: Tier is billing exempt, allowing access
------------------------------ Captured log call -------------------------------
INFO     app.blueprints.inventory.routes:routes.py:238 ADJUST INVENTORY - Item: New Item (ID: 1)
INFO     app.blueprints.inventory.routes:routes.py:239 Form data received: {'adjustment_type': 'restock', 'quantity': '100.0', 'notes': 'Initial stock'}
________________ test_recount_adjustment_uses_canonical_service ________________

client = <FlaskClient <Flask 'app'>>, app = <Flask 'app'>
test_user = <User testuser_1755754447032942>

    def test_recount_adjustment_uses_canonical_service(client, app, test_user):
        """Test that inventory recount routes use the canonical adjustment service"""
    
        with app.app_context():
            # Create test inventory item
            item = InventoryItem(
                name="Test Item",
                quantity=100,
                unit="count",
                organization_id=test_user.organization_id
            )
            db.session.add(item)
            db.session.commit()
    
            # Log in the user for the test
            with client.session_transaction() as sess:
                sess['_user_id'] = str(test_user.id)
                sess['_fresh'] = True
    
            # Mock the canonical service at the route import path
            with patch('app.blueprints.inventory.routes.process_inventory_adjustment') as mock_adjustment:
                mock_adjustment.return_value = True
    
                # Make recount request
                response = client.post(f'/inventory/adjust/{item.id}', data={
                    'adjustment_type': 'recount',
                    'quantity': '80',
                    'notes': 'Physical count adjustment'
                })
    
                # Verify canonical service was called
>               mock_adjustment.assert_called_once()

tests/test_inventory_routes_canonicalization.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='process_inventory_adjustment' id='139797145106000'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'process_inventory_adjustment' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
----------------------------- Captured stdout call -----------------------------
--- EXECUTING CORRECT MIDDLEWARE ---
MIDDLEWARE DEBUG: Processing POST /inventory/adjust/1, endpoint=inventory.adjust_inventory
MIDDLEWARE DEBUG: User authenticated=True
DEBUG: User 2, Org billing_status=active
DEBUG: Tier exempt=True
DEBUG: Tier is billing exempt, allowing access
------------------------------ Captured log call -------------------------------
INFO     app.blueprints.inventory.routes:routes.py:238 ADJUST INVENTORY - Item: Test Item (ID: 1)
INFO     app.blueprints.inventory.routes:routes.py:239 Form data received: {'adjustment_type': 'recount', 'quantity': '80', 'notes': 'Physical count adjustment'}
_________ TestInventoryFIFOCharacterization.test_fifo_deduction_order __________

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7f251723cd10>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
test_user = <User testuser_1755754450340791>, test_org = <Organization 3>

    def test_fifo_deduction_order(self, app, db_session, test_user, test_org):
        """Test FIFO deduction follows first-in-first-out order."""
        with app.test_request_context():
            login_user(test_user)
    
            # Create inventory item
            item = InventoryItem(
                name="Test Ingredient",
                type="ingredient",
                unit="g",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Add stock in layers (oldest first)
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type="restock",
                notes="First batch",
                created_by=test_user.id
            )
    
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=50.0,
                change_type="restock",
                notes="Second batch",
                created_by=test_user.id
            )
    
            # Verify total
>           db_session.refresh(item)

tests/test_inventory_fifo.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py:1765: in refresh
    return self._proxied.refresh(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3147: in refresh
    self._expire_state(state, attribute_names)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3273: in _expire_state
    self._validate_persistent(state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.Session object at 0x7f250f03e4d0>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f250f496d50>

    def _validate_persistent(self, state: InstanceState[Any]) -> None:
        if not self.identity_map.contains_state(state):
>           raise sa_exc.InvalidRequestError(
                "Instance '%s' is not persistent within this Session"
                % state_str(state)
            )
E           sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7f250ff48e10>' is not persistent within this Session

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4139: InvalidRequestError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
ERROR    app.services.inventory_adjustment._core:_core.py:42 Inventory item not found: 1
_ TestInventoryFIFOCharacterization.test_inventory_adjustment_delegates_properly _

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7f251723d310>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f25179690d0>
test_user = <User testuser_1755754452075961>, test_org = <Organization 3>

    def test_inventory_adjustment_delegates_properly(self, app, db_session, test_user, test_org):
        """Verify inventory adjustment service delegates to proper internal systems."""
        with app.test_request_context():
            login_user(test_user)
    
            item = InventoryItem(
                name="Test Product",
                type="product",
                unit="ml",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Test product addition (should use ProductSKUHistory)
            success, message = process_inventory_adjustment(
                item_id=item.id,
                quantity=250.0,
                change_type="finished_batch",
                notes="Batch completion",
                created_by=test_user.id
            )
    
>           assert success is True
E           assert False is True

tests/test_inventory_fifo.py:97: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:36 CANONICAL DISPATCHER: item_id=1, quantity=250.0, change_type=finished_batch, caller=tests/test_inventory_fifo.py:test_inventory_adjustment_delegates_properly
INFO     app.services.inventory_adjustment._core:_core.py:49 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
=============================== warnings summary ===============================
tests/test_inventory_basic_operations.py: 21 warnings
tests/test_inventory_routes_canonicalization.py: 2 warnings
tests/test_inventory_fifo.py: 3 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_inventory_basic_operations.py: 21 warnings
tests/test_inventory_routes_canonicalization.py: 1 warning
tests/test_inventory_fifo.py: 3 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_create_ingredient_zero_stock
  /home/runner/workspace/tests/test_inventory_basic_operations.py:145: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    item = InventoryItem.query.get(item_id)

tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_inventory_fifo_sync_validation
  /home/runner/workspace/app/services/inventory_adjustment/_validation.py:8: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    item = InventoryItem.query.get(item_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_create_ingredient_with_initial_stock - assert False is True
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_simple_restock_operation - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_multiple_restock_operations - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_simple_use_deduction - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_sale_deduction - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_spoilage_deduction - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_fifo_deduction_order - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_inventory_fifo_sync_validation - assert 0.0 == 95.0
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_recount_increase - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_recount_decrease - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_insufficient_inventory_protection - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_nonexistent_item_handling - AssertionError: assert (False, 'Inventory item not found') is False
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[restock-50.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[manual_addition-25.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[returned-15.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[use-30.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[sale-20.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_basic_adjustment_types[spoil-10.0] - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_audit_trail_completeness - AttributeError: 'NoneType' object has no attribute 'change_type'
FAILED tests/test_inventory_basic_operations.py::TestInventoryBasicOperations::test_cost_tracking_basic - assert (False, "Error in initial stock creation: app.services.inventory_adj...
FAILED tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service - AssertionError: Expected 'process_inventory_adjustment' to have been called...
FAILED tests/test_inventory_routes_canonicalization.py::test_recount_adjustment_uses_canonical_service - AssertionError: Expected 'process_inventory_adjustment' to have been called...
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order - sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7f250ff48...
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly - assert False is True
================== 24 failed, 2 passed, 53 warnings in 46.61s ==================
