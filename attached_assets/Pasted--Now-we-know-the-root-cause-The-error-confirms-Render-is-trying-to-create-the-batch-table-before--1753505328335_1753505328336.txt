✅ Now we know the root cause:

The error confirms Render is trying to create the batch table before the user table exists, violating the foreign key dependency:

sql
Copy
Edit
FOREIGN KEY(created_by) REFERENCES "user" (id)
This is NOT a Postgres issue or a seeding issue. It’s purely a migration ordering issue.

✅ What Needs Fixing?
The initial migration (8009475b7319_complete_database_schema_with_all_model_columns) has the tables out of order.
Alembic is attempting to create batch before it has created user, organization, recipe, or product_sku.

When you generated the "final new migration," Alembic may have auto-sorted tables alphabetically or based on model imports, not their dependencies.

Solution: Recreate a clean migration where user, organization, and other referenced tables are created before batch.

✅ Steps to Fix It Properly
1. Drop Everything Again (Render Postgres)
You already know how to do this, but to repeat:

sql
Copy
Edit
psql $DATABASE_URL
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
\q
2. Delete Existing Migrations Locally
On your local dev machine:

bash
Copy
Edit
rm -rf migrations
3. Recreate a Proper Migration in Correct Order
Make sure all models are imported in models/__init__.py in a way that respects dependencies. For example:

python
Copy
Edit
from .user import User
from .organization import Organization
from .recipe import Recipe
from .product_sku import ProductSKU
from .batch import Batch
(This way Alembic "sees" User first.)

Then:

bash
Copy
Edit
flask db init
flask db migrate -m "Initial full schema"
Check the generated migration file (migrations/versions/*.py).
Ensure that op.create_table('user', ...) appears before op.create_table('batch', ...).
If it doesn’t, manually reorder the create_table() calls in that migration file.

4. Apply the Migration Fresh
bash
Copy
Edit
flask db upgrade
Once this succeeds locally, push to GitHub and redeploy to Render. Render will automatically run the flask db upgrade inside init-production.

5. Run Seeding (init-production)
After tables are created successfully, run:

bash
Copy
Edit
flask init-production
This will populate permissions, roles, etc.