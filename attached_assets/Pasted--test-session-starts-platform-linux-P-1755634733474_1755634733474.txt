============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /nix/store/2lcqw1d28vklbk8ikiwad28iq2smwndv-python-wrapped-0.1.0/bin/python3
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 7 items                                                              

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling FAILED [ 14%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] ERROR [ 28%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] ERROR [ 42%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] ERROR [ 57%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] ERROR [ 71%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing FAILED [ 85%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade FAILED [100%]

==================================== ERRORS ====================================
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[active-200] _

app = <Flask 'app'>

    @pytest.fixture
    def test_user(app):
        """Create a test customer user with basic permissions and organization"""
        with app.app_context():
            # Use unique username per test to avoid conflicts
            import time
            unique_username = f'testuser_{int(time.time() * 1000000)}'
    
            # Create a test organization with no hardcoded billing_status (will use model default)
            org = Organization(name='Test Organization')
            db.session.add(org)
            db.session.flush()  # Get the ID
    
            # Create a basic tier
>           tier = SubscriptionTier(
                name='Basic',
                key='basic',
                user_limit=5
            )

tests/conftest.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Basic>
kwargs = {'key': 'basic', 'name': 'Basic', 'user_limit': 5}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[past_due-302] _

app = <Flask 'app'>

    @pytest.fixture
    def test_user(app):
        """Create a test customer user with basic permissions and organization"""
        with app.app_context():
            # Use unique username per test to avoid conflicts
            import time
            unique_username = f'testuser_{int(time.time() * 1000000)}'
    
            # Create a test organization with no hardcoded billing_status (will use model default)
            org = Organization(name='Test Organization')
            db.session.add(org)
            db.session.flush()  # Get the ID
    
            # Create a basic tier
>           tier = SubscriptionTier(
                name='Basic',
                key='basic',
                user_limit=5
            )

tests/conftest.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Basic>
kwargs = {'key': 'basic', 'name': 'Basic', 'user_limit': 5}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[suspended-302] _

app = <Flask 'app'>

    @pytest.fixture
    def test_user(app):
        """Create a test customer user with basic permissions and organization"""
        with app.app_context():
            # Use unique username per test to avoid conflicts
            import time
            unique_username = f'testuser_{int(time.time() * 1000000)}'
    
            # Create a test organization with no hardcoded billing_status (will use model default)
            org = Organization(name='Test Organization')
            db.session.add(org)
            db.session.flush()  # Get the ID
    
            # Create a basic tier
>           tier = SubscriptionTier(
                name='Basic',
                key='basic',
                user_limit=5
            )

tests/conftest.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Basic>
kwargs = {'key': 'basic', 'name': 'Basic', 'user_limit': 5}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
_ ERROR at setup of TestBillingAndTierEnforcement.test_billing_status_enforcement[canceled-302] _

app = <Flask 'app'>

    @pytest.fixture
    def test_user(app):
        """Create a test customer user with basic permissions and organization"""
        with app.app_context():
            # Use unique username per test to avoid conflicts
            import time
            unique_username = f'testuser_{int(time.time() * 1000000)}'
    
            # Create a test organization with no hardcoded billing_status (will use model default)
            org = Organization(name='Test Organization')
            db.session.add(org)
            db.session.flush()  # Get the ID
    
            # Create a basic tier
>           tier = SubscriptionTier(
                name='Basic',
                key='basic',
                user_limit=5
            )

tests/conftest.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Basic>
kwargs = {'key': 'basic', 'name': 'Basic', 'user_limit': 5}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
=================================== FAILURES ===================================
____ TestBillingAndTierEnforcement.test_tier_permission_is_the_hard_ceiling ____

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7ff871b0d7d0>
app = <Flask 'app'>

    def test_tier_permission_is_the_hard_ceiling(self, app):
        """
        Tests that a user is BLOCKED from an action if their org's tier
        does not allow it, even if their role DOES have the permission.
        """
        with app.app_context():
            # ARRANGE: Create a complex state
    
            # 1. Create permissions
            perm_view = Permission(name=AppPermission.PRODUCT_VIEW.value)
            perm_create = Permission(name=AppPermission.PRODUCT_CREATE.value)
            db.session.add_all([perm_view, perm_create])
    
            # 2. Create a "Hobbyist" tier that can ONLY view products
>           hobbyist_tier = SubscriptionTier(
                name='hobbyist',
                key='hobbyist'
            )

tests/test_billing_and_tier_enforcement.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier hobbyist>
kwargs = {'key': 'hobbyist', 'name': 'hobbyist'}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_ TestBillingAndTierEnforcement.test_developer_can_masquerade_regardless_of_billing _

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7ff871b5abd0>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>

    def test_developer_can_masquerade_regardless_of_billing(self, app, client):
        """
        Tests that developers can access customer data even if billing is bad.
        """
        with app.app_context():
            # ARRANGE: Create a developer user (NO organization)
            developer = User(
                email='dev@batchtrack.com',
                username='developer',
                user_type='developer',
                organization_id=None  # Developers have no organization
            )
            db.session.add(developer)
    
            # Create a customer org with bad billing
>           customer_tier = SubscriptionTier(
                name='Pro',
                key='pro'
            )

tests/test_billing_and_tier_enforcement.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Pro>, kwargs = {'key': 'pro', 'name': 'Pro'}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
_________ TestBillingAndTierEnforcement.test_complete_security_cascade _________

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7ff871b5b290>
app = <Flask 'app'>

    def test_complete_security_cascade(self, app):
        """
        Tests the complete security flow: billing -> tier -> role -> permission
        """
        with app.app_context():
            # ARRANGE: Create a realistic scenario
    
            # 1. Create permissions
            perm_batch_view = Permission(name=AppPermission.BATCH_VIEW.value)
            perm_batch_create = Permission(name=AppPermission.BATCH_CREATE.value)
            perm_admin = Permission(name=AppPermission.ADMIN.value)
            db.session.add_all([perm_batch_view, perm_batch_create, perm_admin])
    
            # 2. Create a "Pro" tier with batch permissions but no admin
>           pro_tier = SubscriptionTier(
                name='Pro',
                key='pro'
            )

tests/test_billing_and_tier_enforcement.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Pro>, kwargs = {'key': 'pro', 'name': 'Pro'}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>, k = 'key'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
>           setattr(self, k, kwargs[k])
E           AttributeError: property 'key' of 'SubscriptionTier' object has no setter

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2178: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app.blueprints_registry:blueprints_registry.py:123 Blueprint 'billing' registered successfully.
INFO     app:unit_utils.py:28 BatchTrack startup
=============================== warnings summary ===============================
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
ERROR tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] - AttributeError: property 'key' of 'SubscriptionTier' object has no setter
================== 3 failed, 14 warnings, 4 errors in 14.38s ===================
