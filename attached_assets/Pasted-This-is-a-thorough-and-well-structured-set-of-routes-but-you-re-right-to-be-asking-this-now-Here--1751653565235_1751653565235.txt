This is a thorough and well-structured set of routes — but you're right to be asking this now. Here's a comparison and audit of the three key routes:

🧠 1. CORE PURPOSES
Route	Purpose
complete_batch()	Finalizes a batch and creates inventory (intermediates or product SKUs).
adjust_sku_inventory()	Adjusts existing product SKU inventory (manual changes, sales, spoilage, etc.).
adjust_inventory()	Adjusts raw inventory (ingredients, containers, intermediates).

🔄 2. SHARED CORE: Centralized process_inventory_adjustment()
All 3 use process_inventory_adjustment(), which is perfect. You’ve centralized the actual quantity + FIFO manipulation here.

✅ Correct pattern.

⚙️ 3. DELEGATION & OWNERSHIP
Aspect	complete_batch	adjust_sku_inventory	adjust_inventory
Creates SKU	Yes (via ProductService)	❌	❌
Creates Inventory	✅ (via centralized service)	✅	✅
Validates Expiration Logic	✅ via ExpirationService	✅ (lightly)	✅ (heavily, with override logic)
Does FIFO Validation	❌	✅ (via validate_inventory_fifo_sync)	✅
Handles Unit Conversion	Partial (only for ingredients)	❌	✅
Handles Cost Override	✅	✅	✅

🔍 4. REDUNDANCIES & RISKS
🔁 Duplicated SKU Creation Logic
complete_batch() and add_from_batch() both call ProductService.get_or_create_sku() with very similar logic.

This must be refactored into something like:

python
Copy
Edit
ProductService.create_sku_from_container(container, product, variant)
So both batch routes can share it cleanly.

🧼 complete_batch() Is Doing Too Much
This route is both controller and service. It:

Calculates container totals

Determines expiration logic

Creates SKUs

Calculates cost

Decides on FIFO vs manual

Performs redirects, flashes, and exception handling

⛔ This is a classic God function risk.

✅ Instead, you should:

Extract each of these branches (if output_type == 'product') into a service like:

python
Copy
Edit
BatchService.finalize_product_output(batch, container_overrides, current_user)
BatchService.finalize_intermediate_output(batch, current_user)
So complete_batch() becomes pure controller logic.

⚠️ adjust_sku_inventory() Is Overlapping the Webhook Logic
/webhook/sale and /adjust/<sku_id> overlap. Both:

Accept quantity, sale price, change type, etc.

Use process_inventory_adjustment

🧽 You could consider:

Using /adjust/<sku_id> as the true endpoint for external systems (webhooks just normalize payloads and POST to it).

Or wrap both webhook and form logic around ProductService.record_sale(...)

💡 5. Flow Architecture Summary
plaintext
Copy
Edit
1. Batch Completion Flow:
   → complete_batch()
     ↳ calls ProductService.get_or_create_sku()
     ↳ calls process_inventory_adjustment()
     ↳ updates batch status

2. Manual SKU Adjustment:
   → adjust_sku_inventory()
     ↳ uses SKU ID
     ↳ validates unit, expiration, cost
     ↳ calls process_inventory_adjustment()

3. Manual Raw Inventory Adjustment:
   → adjust_inventory()
     ↳ uses InventoryItem ID
     ↳ does FIFO validation
     ↳ handles unit overrides
     ↳ calls process_inventory_adjustment()
✅ Recommended Improvements
🔧 Refactors:
✅ Move all SKU creation logic into ProductService.create_sku_from_container(container, product, variant)

✅ Move product vs ingredient logic in complete_batch() to BatchService

✅ Standardize sale/return/reserve webhook logic around the SKU adjustment route

📦 Service Separation:
Split responsibility cleanly:

Service	Role
BatchService	Finalizes batches and triggers inventory creation
ProductService	SKU creation, product lookup
InventoryAdjustmentService	Executes all inventory math and FIFO manipulation
ExpirationService	Calculates expiry and perishable rules
ConversionEngine	Unit conversion (volume, weight, etc.)
