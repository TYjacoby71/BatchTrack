app/utils/fifo_generator.py:37:def generate_fifo_code(change_type, remaining_quantity=0, batch_label=None):
app/services/reservation_service.py:86:            source_entry.remaining_quantity += reservation.quantity
app/blueprints/products/products.py:43:            remaining_quantity=0,
app/blueprints/api/reservation_routes.py:109:            remaining_quantity=0,  # Already deducted
app/models/batch.py:35:    remaining_quantity = db.Column(db.Float, nullable=True)
app/models/inventory.py:95:    remaining_quantity = db.Column(db.Float, nullable=True)  # For FIFO tracking
app/models/product.py:318:    remaining_quantity = db.Column(db.Float, default=0.0)

app/blueprints/fifo/services.py:215:            expired_entries = _FIFOService.get_expired_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:234:        fifo_entries = _FIFOService.get_fifo_entries(inventory_item_id)  # Already excludes expired
app/blueprints/fifo/services.py:38:        return _FIFOService.get_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:517:    return _FIFOService.get_fifo_entries(inventory_item_id)
app/blueprints/fifo/services.py:520:    return _FIFOService.get_expired_fifo_entries(inventory_item_id)
app/services/inventory_adjustment.py:484:        all_fifo_entries = FIFOService.get_all_fifo_entries(item_id)
app/services/inventory_adjustment.py:616:        final_fifo_entries = FIFOService.get_all_fifo_entries(item_id)
app/services/pos_integration.py:70:            fifo_entries = FIFOService.get_fifo_entries(item_id)
app/services/stock_check.py:37:        available_entries = FIFOService.get_fifo_entries(ingredient.id)  # This already excludes expired

app/blueprints/api/container_routes.py:201:            process_inventory_adjustment(
app/blueprints/api/container_routes.py:261:                process_inventory_adjustment(
app/blueprints/api/container_routes.py:282:            process_inventory_adjustment(
app/blueprints/api/container_routes.py:294:            process_inventory_adjustment(
app/blueprints/api/container_routes.py:337:            process_inventory_adjustment(
app/blueprints/api/reservation_routes.py:41:        success = process_inventory_adjustment(
app/blueprints/batches/add_extra.py:48:        result = process_inventory_adjustment(
app/blueprints/batches/add_extra.py:97:            result = process_inventory_adjustment(
app/blueprints/batches/cancel_batch.py:53:                process_inventory_adjustment(
app/blueprints/batches/cancel_batch.py:67:                process_inventory_adjustment(
app/blueprints/batches/cancel_batch.py:81:                process_inventory_adjustment(
app/blueprints/batches/cancel_batch.py:95:                process_inventory_adjustment(
app/blueprints/batches/finish_batch.py:138:        success = process_inventory_adjustment(
app/blueprints/batches/finish_batch.py:338:        success = process_inventory_adjustment(
app/blueprints/batches/finish_batch.py:381:        success = process_inventory_adjustment(
app/blueprints/batches/start_batch.py:119:            result = process_inventory_adjustment(
app/blueprints/batches/start_batch.py:72:                        result = process_inventory_adjustment(
app/blueprints/expiration/services.py:560:                success = process_inventory_adjustment(
app/blueprints/expiration/services.py:576:                success = process_inventory_adjustment(
app/blueprints/expiration/services.py:605:                success = process_inventory_adjustment(
app/blueprints/fifo/__init__.py:16:Use app.services.inventory_adjustment.process_inventory_adjustment() instead.
app/blueprints/fifo/__init__.py:24:        "Use app.services.inventory_adjustment.process_inventory_adjustment() instead.",
app/blueprints/fifo/services.py:10:Use app.services.inventory_adjustment.process_inventory_adjustment() instead.
app/blueprints/fifo/services.py:34:        return process_inventory_adjustment(*args, **kwargs)
app/blueprints/fifo/services.py:54:        return process_inventory_adjustment(
app/blueprints/inventory/routes.py:245:        success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:342:            success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:381:            success = process_inventory_adjustment(
app/blueprints/inventory/routes.py:519:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:153:            success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:302:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:352:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:405:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:465:        success = process_inventory_adjustment(
app/blueprints/products/product_inventory_routes.py:533:        success = process_inventory_adjustment(
app/blueprints/products/sku.py:266:        process_inventory_adjustment(
app/services/inventory_adjustment.py:195:def process_inventory_adjustment(
app/services/inventory_adjustment.py:685:        return process_inventory_adjustment(*args, **kwargs)
app/services/inventory_adjustment.py:688:    def process_inventory_adjustment(*args, **kwargs):
app/services/inventory_adjustment.py:689:        return process_inventory_adjustment(*args, **kwargs)
app/services/pos_integration.py:120:            allocation_success = process_inventory_adjustment(
app/services/pos_integration.py:202:                sale_success = process_inventory_adjustment(
app/services/pos_integration.py:261:                return_success = process_inventory_adjustment(
app/services/pos_integration.py:81:            deduction_success = process_inventory_adjustment(


==================================== ERRORS ====================================
________________ ERROR collecting tests/test_inventory_fifo.py _________________
.pythonlibs/lib/python3.11/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
.pythonlibs/lib/python3.11/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1204: in _gcd_import
    ???
<frozen importlib._bootstrap>:1176: in _find_and_load
    ???
<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
.pythonlibs/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
.pythonlibs/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "/home/runner/workspace/tests/test_inventory_fifo.py", line 2
E       <old_str>
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR tests/test_inventory_fifo.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 2.68s