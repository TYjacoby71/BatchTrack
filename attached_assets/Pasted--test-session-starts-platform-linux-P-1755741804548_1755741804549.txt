============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 1 item                                                                       

tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock ERROR [100%]

======================================== ERRORS ========================================
_ ERROR at setup of TestInventorySystemComprehensive.test_create_ingredient_with_initial_stock _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7f5da8f9b290>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7f5da99d4f90>

    @pytest.fixture
    def setup_test_data(self, app, db_session):
        """Setup test organization, user, and base items for testing"""
        with app.test_request_context():
            # Create tier
>           tier = SubscriptionTier(
                name="Test Tier",
                tier_type="monthly",
                user_limit=10,
                max_inventory_items=1000
            )

tests/test_inventory_comprehensive.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SubscriptionTier Test Tier>
kwargs = {'max_inventory_items': 1000, 'name': 'Test Tier', 'tier_type': 'monthly', 'user_limit': 10}
cls_ = <class 'app.models.subscription_tier.SubscriptionTier'>
k = 'max_inventory_items'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'max_inventory_items' is an invalid keyword argument for SubscriptionTier

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:2175: TypeError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
âœ… Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

ðŸŽ‰ All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
=================================== warnings summary ===================================
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== short test summary info ================================
ERROR tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock - TypeError: 'max_inventory_items' is an invalid keyword argument for SubscriptionTier
============================= 2 warnings, 1 error in 6.12s =============================
