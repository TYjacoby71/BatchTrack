Perfect — you're aiming for clarity and actionability, with direct mapping between recipe units and inventory units, plus visual status icons.

Let me give you a robust and readable Alpine-based solution that matches exactly what you're describing.

✅ Goal Recap

Column	Value Source
Ingredient	item.ingredient
Required	item.needed (in recipe unit)
Available	item.available (in inventory unit)
Unit	${item.recipe_unit} ➝ ${item.inventory_unit}
Status	✅ or ❌ depending on item.status
✅ Adjusted Backend Format (REQUIRED)
In check_stock_for_recipe():

python
Copy
Edit
results.append({
    'ingredient': ing.name,
    'needed': round(needed, 2),                # recipe unit
    'available': round(available, 2),          # inventory unit
    'recipe_unit': assoc.unit,
    'inventory_unit': ing.unit,
    'status': status
})
✅ Alpine + HTML Template
html
Copy
Edit
<div x-data="stockCheckComponent()" class="mt-3">
  <button @click="checkStock()" class="btn btn-warning">Check Stock</button>

  <template x-if="status === 'ok'">
    <div class="alert alert-success mt-2">✅ All ingredients are available!</div>
  </template>

  <template x-if="status === 'fail' && stockResults.length > 0">
    <div class="alert alert-warning mt-2">⚠ Some ingredients are low or missing. Adjust inventory before proceeding.</div>
    <table class="table table-bordered table-sm mt-2">
      <thead>
        <tr>
          <th>Ingredient</th>
          <th>Required (Recipe Unit)</th>
          <th>Available (Stock Unit)</th>
          <th>Units</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <template x-for="item in stockResults" :key="item.ingredient">
          <tr>
            <td x-text="item.ingredient"></td>
            <td x-text="item.needed"></td>
            <td x-text="item.available"></td>
            <td x-text="`${item.recipe_unit} ➝ ${item.inventory_unit}`"></td>
            <td>
              <span x-show="item.status === 'OK'" class="text-success">✅</span>
              <span x-show="item.status !== 'OK'" class="text-danger">❌</span>
            </td>
          </tr>
        </template>
      </tbody>
    </table>
    <button class="btn btn-outline-secondary btn-sm mt-2" @click="downloadCSV()">📥 Download CSV</button>
  </template>
</div>
✅ Alpine Component JS
html
Copy
Edit
<script>
function stockCheckComponent() {
  return {
    stockResults: [],
    status: '',
    checkStock() {
      fetch('/api/check-stock', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ recipe_id: 1, scale: 1, flex_mode: false })
      })
      .then(res => res.json())
      .then(data => {
        this.stockResults = data.ingredients;
        this.status = data.all_ok ? 'ok' : 'fail';
      })
      .catch(err => {
        console.error("Stock check failed", err);
        this.status = 'error';
      });
    },
    downloadCSV() {
      const rows = this.stockResults.map(item =>
        `${item.ingredient},${item.needed},${item.available},${item.recipe_unit} → ${item.inventory_unit},${item.status}`
      );
      const csv = ["Ingredient,Needed,Available,Units,Status", ...rows].join("\n");
      const blob = new Blob([csv], { type: 'text/csv' });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "stock_check_report.csv";
      link.click();
    }
  };
}
</script>
✅ This Will:
Render ✅/❌ per row

Display recipe units vs inventory units clearly

Support real CSV export

Respect Alpine’s reactive pattern fully