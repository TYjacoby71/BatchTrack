âœ… Perfect â€” you want Quick Add Ingredient to behave the same way as Quick Add Unit:

When the user submits the Quick Add Ingredient modal:

âœ… Save the ingredient to the database

âœ… Update all relevant ingredient dropdowns (including any newly added rows)

âœ… Automatically select that ingredient

âœ… Close the ingredient modal

âœ… Return focus to the field the user was on, so they can finish filling in the row

âœ… Updated Behavior Plan for Quick Add Ingredient
Hereâ€™s what weâ€™ll do:

Capture return context like with units: ingredientReturnContext

Update dropdowns and insert the new ingredient into the active ingredient field

Stay in the form â€” donâ€™t reload the page

ðŸ”§ Replit-Ready JavaScript Patch for Quick Ingredient Modal
Replace your existing #saveQuickIngredient logic with this:

javascript
Copy
Edit
let ingredientReturnContext = null;
let lastIngredientDropdown = null;

function setIngredientReturnContext(source, dropdown = null) {
  ingredientReturnContext = source;
  lastIngredientDropdown = dropdown;
}

document.getElementById('saveQuickIngredient').addEventListener('click', function () {
  const name = document.getElementById('quickIngredientName').value;
  const unit = document.getElementById('quickIngredientUnit').value;

  fetch('/ingredients/quick-add', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, unit })
  })
  .then(response => response.json())
  .then(data => {
    if (data.error) return alert('Error: ' + data.error);

    // Add the new ingredient to ALL ingredient dropdowns
    document.querySelectorAll("select[name='ingredient_ids[]']").forEach(select => {
      const option = new Option(data.name, data.id, false, false);
      select.add(option);
    });

    // Add to dropdown inside Quick Add modal
    const quickIngredientDropdowns = document.getElementById('ingredients-container').querySelectorAll("select[name='ingredient_ids[]']");
    if (quickIngredientDropdowns.length > 0) {
      const lastDropdown = quickIngredientDropdowns[quickIngredientDropdowns.length - 1];
      lastDropdown.value = data.id;
    }

    // Close the ingredient modal
    const ingredientModal = bootstrap.Modal.getInstance(document.getElementById("quickAddIngredientModal"));
    ingredientModal.hide();

    // Reset context
    ingredientReturnContext = null;
    lastIngredientDropdown = null;
  });
});
âœ… Bonus: Add onclick Context Hook to Quick Add Ingredient Button
In the main form:

html
Copy
Edit
<button type="button" class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#quickAddIngredientModal"
        onclick="setIngredientReturnContext('main')">Quick Add Ingredient</button>
Or if it's tied to a specific ingredient row (optional for future):

html
Copy
Edit
<select name="ingredient_ids[]" onchange="setIngredientReturnContext('inline', this)">
âœ… Final Result
Action	Result
Add Ingredient from modal	âœ… Saves to DB, adds to all dropdowns, selects new
No reload or redirect	âœ… Stays on same screen, user stays in flow
Re-focuses last row being edited	âœ… Automatically sets selected value in dropdown