 Phase 1 ‚Äî File Structure and Clean Template Skeletons
This will lay the groundwork so you can start filling the logic in cleanly, step-by-step.

üìÇ Directory and File Plan
bash
Copy
Edit
/app
  /routes
    plan_production_routes.py   # New: Plan Production setup and strict/flex handling
    stock_check_api.py          # New: Universal Stock Check API
  /services
    stock_check_service.py      # New: Core universal stock check engine
  /templates
    /plan_production
      plan_production_setup.html  # New: Setup page (scale, containers, fill bar)
      plan_production_check.html  # New: Stock check results display
    /partials
      quick_add_container_modal.html  # New: Modal to add containers inside recipe edit page
  /static
    /js
      plan_production.js         # New: Handles frontend dynamic filling, toggles, fetches
      stock_check.js             # New: Universal frontend call to stock check
‚úèÔ∏è Skeleton Templates for Each Key File
1. /routes/plan_production_routes.py
python
Copy
Edit
from flask import Blueprint, render_template, request, redirect, url_for, flash
from services.stock_check_service import check_stock

plan_production_bp = Blueprint('plan_production_bp', __name__)

@plan_production_bp.route('/plan-production/<int:recipe_id>', methods=['GET', 'POST'])
def plan_production_setup(recipe_id):
    # Display scale selection, container plan form
    # Load allowed containers based on recipe
    pass

@plan_production_bp.route('/plan-production/check', methods=['POST'])
def plan_production_check():
    # Handle stock check after user selects scale + containers
    pass
2. /routes/stock_check_api.py
python
Copy
Edit
from flask import Blueprint, request, jsonify
from services.stock_check_service import check_stock

stock_check_api_bp = Blueprint('stock_check_api_bp', __name__)

@stock_check_api_bp.route('/api/check-stock', methods=['POST'])
def api_check_stock():
    data = request.get_json()
    result = check_stock(data)
    return jsonify(result)
3. /services/stock_check_service.py
python
Copy
Edit
def check_stock(data):
    # Main function to check ingredients + container stock
    # Data expected: { recipe_id, scale, containers: [{id, quantity}] }
    # Return list of items with OK/LOW/NEEDED status
    pass
4. /templates/plan_production/plan_production_setup.html
html
Copy
Edit
<h2>Plan Production: {{ recipe.name }}</h2>

<form method="POST" action="{{ url_for('plan_production_bp.plan_production_check') }}">
  <!-- Scale Selector -->
  <label>Scale:</label>
  <input type="number" name="scale" value="1" min="0.1" step="0.1">

  <!-- Strict/Flex Toggle -->
  <label>Strict Mode:</label>
  <input type="checkbox" name="strict_mode" checked>

  <!-- Auto-Fill Toggle -->
  <label>Auto-Fill Containers:</label>
  <input type="checkbox" name="auto_fill" checked>

  <!-- Vertical Fill Bar Placeholder -->

  <!-- Container Selection -->
  <div id="container-selection-area">
    <!-- Dynamically populated by JS -->
  </div>

  <!-- Error Message Placeholder -->

  <button type="submit">Check Stock</button>
</form>

<script src="/static/js/plan_production.js"></script>
5. /templates/partials/quick_add_container_modal.html
html
Copy
Edit
<div id="quickAddContainerModal" class="modal">
  <div class="modal-content">
    <h3>Quick Add Container</h3>
    <form id="quickAddContainerForm">
      <label>Name:</label>
      <input type="text" name="name" required>

      <label>Storage Amount:</label>
      <input type="number" name="storage_amount" required>

      <label>Storage Unit:</label>
      <select name="storage_unit" required>
        <option value="oz">oz</option>
        <option value="ml">ml</option>
        <option value="g">g</option>
        <option value="count">count</option>
        <!-- Extendable -->
      </select>

      <button type="submit">Add Container</button>
    </form>
  </div>
</div>
6. /static/js/plan_production.js
javascript
Copy
Edit
// Handle strict/flex toggles, autofill, vertical bar updating, container picking
// Handle scale changes dynamically
// Build containers dynamically based on available types
7. /static/js/stock_check.js
javascript
Copy
Edit
// Universal stock check POST
async function checkStock(payload) {
  const response = await fetch('/api/check-stock', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(payload)
  });
  return await response.json();
}
üèóÔ∏è Phase 1 Complete Structure: Ready to Build
‚úÖ Skeletons match your new strict/flex and stock check logic
‚úÖ No redundant files
‚úÖ Files modularized cleanly (easy for you and Replit AI helpers to build fast)
‚úÖ Frontend and backend separated properly

üì£ NEXT:
üëâ I can now generate Phase 2: Fully mapped-out build task list, e.g.,

"Step 1: Add container fields to inventory."

"Step 2: Adjust Recipe editor to allow setting predicted yield + allowed containers."

"Step 3: Build strict/flex toggles on plan production page."