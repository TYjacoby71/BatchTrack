
@products_bp.route('/<int:product_id>/add-manual-stock', methods=['POST'])
@login_required
def add_manual_stock(product_id):
    """Add manual stock with container matching"""
    from services.product_adjustment_service import ProductAdjustmentService

    variant_name = request.form.get('variant_name')
    container_id = request.form.get('container_id')
    quantity = float(request.form.get('quantity', 0))
    unit_cost = float(request.form.get('unit_cost', 0))
    notes = request.form.get('notes', '')

    if quantity <= 0:
        flash('Quantity must be positive', 'error')
        return redirect(url_for('products.view_product', product_id=product_id))

    try:
        inventory = ProductAdjustmentService.add_manual_stock(
            product_id=product_id,
            variant_name=variant_name,
            container_id=container_id,
            quantity=quantity,
            unit_cost=unit_cost,
            notes=notes
        )

        flash(f'Added {quantity} units to product inventory', 'success')
    except Exception as e:
        flash(f'Error adding stock: {str(e)}', 'error')

    return redirect(url_for('products.view_product', product_id=product_id))

@products_bp.route('/<int:product_id>/adjust/<int:inventory_id>', methods=['POST'])
@login_required
def adjust_inventory(product_id, inventory_id):
    """Process inventory adjustments with FIFO tracking"""
    from services.product_adjustment_service import ProductAdjustmentService

    adjustment_type = request.form.get('adjustment_type')  # sold, spoil, trash, tester, damaged, recount
    quantity = float(request.form.get('quantity', 0))
    notes = request.form.get('notes', '')

    if quantity <= 0:
        flash('Quantity must be positive', 'error')
        return redirect(url_for('products.view_product', product_id=product_id))

    try:
        ProductAdjustmentService.process_adjustment(
            inventory_id=inventory_id,
            adjustment_type=adjustment_type,
            quantity=quantity,
            notes=notes
        )

        flash(f'Adjustment processed: {adjustment_type}', 'success')
    except Exception as e:
        flash(f'Error processing adjustment: {str(e)}', 'error')

    return redirect(url_for('products.view_product', product_id=product_