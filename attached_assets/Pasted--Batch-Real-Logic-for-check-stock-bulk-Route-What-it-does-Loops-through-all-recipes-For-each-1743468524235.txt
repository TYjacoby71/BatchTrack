✅ Batch: Real Logic for /check-stock-bulk Route
🧠 What it does:
Loops through all recipes

For each one, checks if all ingredients are available (after conversion)

Builds a list of recipes that can or cannot be made

Shows ✅ or ❌ status for each

🛠 Assistant Code — Copy/Paste for Replit
yaml
Copy
Edit
Please update the `/check-stock-bulk` route in `routes/batches.py` to implement full stock logic:

---

✅ 1. At the top of the file:
```python
from unit_conversion import can_fulfill
✅ 2. Replace the current check_stock_bulk() with:

python
Copy
Edit
@batches_bp.route('/check-stock-bulk')
def check_stock_bulk():
    data = load_data()
    inventory = data.get("ingredients", [])
    recipes = data.get("recipes", [])

    results = []

    for recipe in recipes:
        recipe_status = {
            "name": recipe["name"],
            "can_make": True,
            "missing": [],
            "ingredients": []
        }

        for ing in recipe.get("ingredients", []):
            ing_name = ing["name"]
            req_qty = float(ing["quantity"])
            req_unit = ing["unit"]

            stock = next((i for i in inventory if i["name"].lower() == ing_name.lower()), None)

            if not stock:
                recipe_status["can_make"] = False
                recipe_status["missing"].append(f"{ing_name} (not in inventory)")
                continue

            stock_qty = float(stock["quantity"])
            stock_unit = stock["unit"]

            can, converted_needed = can_fulfill(stock_qty, stock_unit, req_qty, req_unit)
            recipe_status["ingredients"].append({
                "name": ing_name,
                "needed": f"{req_qty} {req_unit}",
                "available": f"{stock_qty} {stock_unit}",
                "enough": can
            })

            if not can:
                recipe_status["can_make"] = False
                recipe_status["missing"].append(
                    f"{ing_name} needs {req_qty} {req_unit}, have {stock_qty} {stock_unit}"
                )

        results.append(recipe_status)

    return render_template("check_stock_bulk.html", results=results)
✅ 3. In templates/check_stock_bulk.html, update or create:

html
Copy
Edit
{% extends "layout.html" %}
{% block content %}
<h2>🧪 Bulk Stock Check</h2>

{% for recipe in results %}
  <div style="margin-bottom: 20px; padding: 10px; border: 1px solid #ccc;">
    <h3>{{ recipe.name }} — {% if recipe.can_make %}✅ Can Make{% else %}❌ Not Enough Stock{% endif %}</h3>
    {% if recipe.missing %}
      <p><strong>Missing:</strong></p>
      <ul>
        {% for miss in recipe.missing %}
          <li>{{ miss }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr><th>Ingredient</th><th>Needed</th><th>Available</th><th>Status</th></tr>
      {% for i in recipe.ingredients %}
        <tr>
          <td>{{ i.name }}</td>
          <td>{{ i.needed }}</td>
          <td>{{ i.available }}</td>
          <td>{% if i.enough %}✅{% else %}❌{% endif %}</td>
        </tr>
      {% endfor %}
    </table>
  </div>
{% endfor %}
{% endblock %}
✅ This will give you:

A powerful visual dashboard of all recipes vs stock

Real-time conversions (e.g. gallon vs cup)

Clear ❌ items to fix before batching