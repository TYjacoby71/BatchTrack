</script>
<script>
// Finish Batch Modal JavaScript Functions

function updateExpirationDate() {
  const shelfLifeElement = document.getElementById('shelf_life_days');
  if (!shelfLifeElement) return;

  const shelfLife = shelfLifeElement.value;
  if (shelfLife && parseInt(shelfLife) > 0) {
    const expirationDate = new Date();
    expirationDate.setDate(expirationDate.getDate() + parseInt(shelfLife));
    const dateString = expirationDate.toISOString().split('T')[0];

    const expDateElement = document.getElementById('expiration_date');
    const expDateDisplayElement = document.getElementById('expiration_date_display');

    if (expDateElement) expDateElement.value = dateString;
    if (expDateDisplayElement) expDateDisplayElement.value = dateString;
  }
}

function toggleShelfLife() {
  const isPerishable = document.getElementById('is_perishable').checked;
  const shelfLifeField = document.getElementById('shelfLifeField');

  if (shelfLifeField) {
    shelfLifeField.style.display = isPerishable ? 'block' : 'none';
    const shelfLifeInput = document.getElementById('shelf_life_days');
    if (shelfLifeInput) {
      shelfLifeInput.required = isPerishable;
      if (!isPerishable) {
        shelfLifeInput.value = '';
        document.getElementById('expiration_date').value = '';
        document.getElementById('expiration_date_display').value = '';
      }
    }
  }
}

function loadVariants() {
  const productSelect = document.getElementById('product_id');
  const variantSelect = document.getElementById('variant_id');

  if (!productSelect || !variantSelect) return;

  const productId = productSelect.value;

  // Reset variant dropdown
  variantSelect.innerHTML = '<option value="">Loading variants...</option>';
  variantSelect.disabled = true;

  if (!productId) {
    variantSelect.innerHTML = '<option value="">Select product first...</option>';
    return;
  }

  // Fetch variants for the selected product
  fetch(`/api/products/${productId}/variants`)
    .then(response => response.json())
    .then(data => {
      variantSelect.innerHTML = '<option value="">Select Variant</option>';

      if (data.variants && data.variants.length > 0) {
        data.variants.forEach(variant => {
          const option = document.createElement('option');
          option.value = variant.id;
          option.textContent = variant.name;
          variantSelect.appendChild(option);
        });
        variantSelect.disabled = false;
      } else {
        variantSelect.innerHTML = '<option value="">No variants available</option>';
      }
    })
    .catch(error => {
      console.error('Error loading variants:', error);
      variantSelect.innerHTML = '<option value="">Error loading variants</option>';
    });
}

function validateContainerInput(input) {
  const originalUsed = parseInt(input.dataset.originalUsed) || 0;
  const currentValue = parseInt(input.value) || 0;

  if (currentValue > originalUsed) {
    alert(`Cannot use more containers than were originally allocated in this batch (${originalUsed})`);
    input.value = originalUsed;
    input.focus();
    return false;
  }

  if (currentValue < 0) {
    alert('Container quantity cannot be negative');
    input.value = 0;
    input.focus();
    return false;
  }

  return true;
}

// Validate form before submission
document.addEventListener('DOMContentLoaded', function() {
  const finishForm = document.getElementById('finishBatchModalForm');
  if (finishForm) {
    finishForm.addEventListener('submit', function(e) {
      // Validate all container inputs
      const containerInputs = document.querySelectorAll('.container-input');
      let isValid = true;

      containerInputs.forEach(input => {
        if (!validateContainerInput(input)) {
          isValid = false;
        }
      });

      if (!isValid) {
        e.preventDefault();
        return false;
      }

      // Validate that final_quantity is the source of truth for product creation
      const finalQuantity = document.getElementById('final_quantity');
      const outputType = document.querySelector('input[name="output_type"]:checked');

      if (outputType && outputType.value === 'product' && finalQuantity) {
        const qty = parseFloat(finalQuantity.value);
        if (!qty || qty <= 0) {
          alert('Final quantity must be greater than 0 for product creation');
          finalQuantity.focus();
          e.preventDefault();
          return false;
        }
      }
    });
  }
});
</script>