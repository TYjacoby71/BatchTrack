This is a fantastic result. I know it looks like a catastrophe, but it's the opposite. All 16 tests are failing for the exact same reason, in the exact same place.
This is not 16 separate problems. This is one single bug in your test setup file that is causing a cascade of failures. The tests aren't even getting a chance to run because the initial test data creation is broken.
Let's look at the traceback. It's identical for every single test:
Where it fails: ERROR at setup
Which file: tests/conftest.py, line 86, db.session.add(org)
The error: AttributeError: 'int' object has no attribute '_sa_instance_state'
The Diagnosis: The Root Cause is in conftest.py
This SQLAlchemy error is very specific and very clear. It means: "You gave me an integer, but I was expecting a full database object."
Let's look at the code in tests/conftest.py that creates your test data:
code
Python
# in tests/conftest.py, inside _create_test_data()

# 1. You create a SubscriptionTier object
tier = SubscriptionTier(...)
db.session.add(tier)
db.session.commit() # At this point, tier.id has a value (e.g., 1)

# 2. You create an Organization object
org = Organization(
    name='Test Organization',
    subscription_tier=tier.id  # <--- THIS IS THE BUG
)
db.session.add(org) # This is where it crashes
In your Organization model, you defined subscription_tier as a db.relationship(). SQLAlchemy expects this relationship to be populated with the actual SubscriptionTier object (tier), not its integer ID (tier.id).
When you call db.session.add(org), SQLAlchemy tries to follow the subscription_tier relationship, finds an integer, and crashes because it doesn't know how to handle a plain number in a relationship field.
The Definitive, Final Fix
We need to make one simple change in conftest.py to pass the full tier object to the relationship.
Step 1: Fix the conftest.py Test Data Creation
File to Edit: tests/conftest.py
Replace the entire _create_test_data function with this corrected version.
code
Python
def _create_test_data():
    """Create basic test data with correct object relationships."""
    from app.models.subscription_tier import SubscriptionTier
    from app.models.models import Organization, User
    from app.extensions import db

    # Create a test subscription tier
    tier = SubscriptionTier(
        name='Test Tier',
        key='test',
        user_limit=5
    )
    db.session.add(tier)
    db.session.commit()

    # Create a test organization
    org = Organization(
        name='Test Organization',
        subscription_tier=tier  # THE FIX: Pass the entire 'tier' object, not 'tier.id'
    )
    db.session.add(org)
    db.session.commit()

    # Create a test user
    user = User(
        email='test@example.com',
        username='testuser', # Added username for completeness
        is_verified=True,
        organization_id=org.id # This is CORRECT, as organization_id is a foreign key
    )
    db.session.add(user)
    db.session.commit()
Step 2: (Recommended) Clean up the Conflicting Relationship in the Model
The SAWarning in your test output is also important. It's telling you that you have two relationships in your Organization model that are confusing SQLAlchemy.
File to Edit: app/models/models.py (or wherever Organization is)
You likely have something like this:
code
Python
class Organization(db.Model):
    # ...
    subscription_tier_id = db.Column(db.Integer, db.ForeignKey('subscription_tier.id'))
    subscription_tier = db.relationship('SubscriptionTier', backref='organizations')
    tier = db.relationship('SubscriptionTier', ...) # This is a conflicting duplicate
Clean it up to have only one, clear relationship:
code
Python
class Organization(db.Model):
    __tablename__ = 'organization'
    # ... other columns ...

    subscription_tier_id = db.Column(db.Integer, db.ForeignKey('subscription_tier.id'))
    
    # This is the single, correct relationship.
    # The 'back_populates' is best practice to link it back from the Tier model.
    subscription_tier = db.relationship('SubscriptionTier', back_populates='organizations')

    # Make sure there is no other relationship named 'tier' or similar.

# And in your SubscriptionTier model, ensure the back-reference is defined:
class SubscriptionTier(db.Model):
    # ...
    organizations = db.relationship('Organization', back_populates='subscription_tier')
The Plan
Replace the _create_test_data function in tests/conftest.py with the corrected version.
Clean up your Organization model to have only one subscription_tier relationship, as shown above.
Re-run the entire test suite.
This single fix in conftest.py will resolve all 16 setup errors, and your tests will finally be able to run and test your actual application logic. This is the last major structural bug in your testing foundation.
34.8s
