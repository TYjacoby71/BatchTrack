[2025-07-07 21:21:37,121] INFO in unit_utils: BatchTrack startup
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Generating static SQL
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
CREATE TABLE alembic_version (
    version_num VARCHAR(32) NOT NULL, 
    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
);

INFO  [alembic.runtime.migration] Running upgrade  -> 3f42c325fddb, Initial migration with all tables
-- Running upgrade  -> 3f42c325fddb

CREATE TABLE batch (
    id INTEGER NOT NULL, 
    recipe_id INTEGER NOT NULL, 
    label_code VARCHAR(32), 
    batch_type VARCHAR(32) NOT NULL, 
    projected_yield FLOAT, 
    projected_yield_unit VARCHAR(50), 
    sku_id INTEGER, 
    final_quantity FLOAT, 
    output_unit VARCHAR(50), 
    scale FLOAT, 
    status VARCHAR(50), 
    status_reason TEXT, 
    notes TEXT, 
    tags TEXT, 
    total_cost FLOAT, 
    created_by INTEGER, 
    organization_id INTEGER, 
    started_at DATETIME, 
    completed_at DATETIME, 
    failed_at DATETIME, 
    cancelled_at DATETIME, 
    inventory_credited BOOLEAN, 
    is_perishable BOOLEAN, 
    shelf_life_days INTEGER, 
    expiration_date DATETIME, 
    remaining_quantity FLOAT, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(recipe_id) REFERENCES recipe (id), 
    FOREIGN KEY(sku_id) REFERENCES product_sku (id), 
    UNIQUE (label_code)
);

CREATE TABLE organization (
    id INTEGER NOT NULL, 
    name VARCHAR(128) NOT NULL, 
    subscription_tier VARCHAR(32), 
    created_at DATETIME, 
    is_active BOOLEAN, 
    PRIMARY KEY (id)
);

CREATE TABLE permission (
    id INTEGER NOT NULL, 
    name VARCHAR(128) NOT NULL, 
    description TEXT, 
    category VARCHAR(64), 
    is_active BOOLEAN, 
    created_at DATETIME, 
    PRIMARY KEY (id), 
    UNIQUE (name)
);

CREATE TABLE product_sku (
    id INTEGER NOT NULL, 
    product_id INTEGER NOT NULL, 
    variant_id INTEGER NOT NULL, 
    size_label VARCHAR(64) NOT NULL, 
    sku_code VARCHAR(64) NOT NULL, 
    sku_name VARCHAR(128), 
    current_quantity FLOAT, 
    reserved_quantity FLOAT, 
    unit VARCHAR(32) NOT NULL, 
    low_stock_threshold FLOAT, 
    fifo_id VARCHAR(32), 
    batch_id INTEGER, 
    container_id INTEGER, 
    unit_cost FLOAT, 
    retail_price FLOAT, 
    wholesale_price FLOAT, 
    profit_margin_target FLOAT, 
    category VARCHAR(64), 
    subcategory VARCHAR(64), 
    tags TEXT, 
    description TEXT, 
    is_active BOOLEAN, 
    is_product_active BOOLEAN, 
    is_discontinued BOOLEAN, 
    created_at DATETIME, 
    updated_at DATETIME, 
    created_by INTEGER, 
    supplier_name VARCHAR(128), 
    supplier_sku VARCHAR(64), 
    supplier_cost FLOAT, 
    weight FLOAT, 
    weight_unit VARCHAR(16), 
    dimensions VARCHAR(64), 
    barcode VARCHAR(128), 
    upc VARCHAR(32), 
    quality_status VARCHAR(32), 
    compliance_status VARCHAR(32), 
    quality_checked_by INTEGER, 
    quality_checked_at DATETIME, 
    location_id VARCHAR(128), 
    location_name VARCHAR(128), 
    temperature_at_time FLOAT, 
    shopify_product_id VARCHAR(64), 
    shopify_variant_id VARCHAR(64), 
    etsy_listing_id VARCHAR(64), 
    amazon_asin VARCHAR(64), 
    marketplace_sync_status VARCHAR(32), 
    marketplace_last_sync DATETIME, 
    expiration_date DATETIME, 
    is_perishable BOOLEAN, 
    shelf_life_days INTEGER, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(container_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(product_id) REFERENCES product (id), 
    FOREIGN KEY(quality_checked_by) REFERENCES user (id), 
    FOREIGN KEY(variant_id) REFERENCES product_variant (id), 
    UNIQUE (barcode), 
    CONSTRAINT unique_barcode UNIQUE (barcode), 
    CONSTRAINT unique_sku_combination UNIQUE (product_id, variant_id, size_label, fifo_id), 
    UNIQUE (sku_code), 
    UNIQUE (upc), 
    CONSTRAINT unique_upc UNIQUE (upc)
);

CREATE INDEX idx_active_skus ON product_sku (is_active, is_product_active);

CREATE INDEX idx_low_stock ON product_sku (current_quantity, low_stock_threshold);

CREATE INDEX idx_product_variant ON product_sku (product_id, variant_id);

CREATE INDEX ix_product_sku_organization_id ON product_sku (organization_id);

CREATE TABLE role (
    id INTEGER NOT NULL, 
    name VARCHAR(64) NOT NULL, 
    description TEXT, 
    is_active BOOLEAN, 
    created_at DATETIME, 
    PRIMARY KEY (id), 
    UNIQUE (name)
);

CREATE TABLE role_permission (
    role_id INTEGER NOT NULL, 
    permission_id INTEGER NOT NULL, 
    PRIMARY KEY (role_id, permission_id), 
    FOREIGN KEY(permission_id) REFERENCES permission (id), 
    FOREIGN KEY(role_id) REFERENCES role (id)
);

CREATE TABLE user (
    id INTEGER NOT NULL, 
    username VARCHAR(64) NOT NULL, 
    password_hash VARCHAR(128) NOT NULL, 
    role_id INTEGER NOT NULL, 
    first_name VARCHAR(64), 
    last_name VARCHAR(64), 
    email VARCHAR(120), 
    phone VARCHAR(20), 
    subscription_class VARCHAR(32), 
    organization_id INTEGER NOT NULL, 
    is_owner BOOLEAN, 
    created_at DATETIME, 
    last_login DATETIME, 
    PRIMARY KEY (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(role_id) REFERENCES role (id), 
    UNIQUE (username)
);

CREATE TABLE batch_timer (
    id INTEGER NOT NULL, 
    batch_id INTEGER, 
    name VARCHAR(128) NOT NULL, 
    duration_seconds INTEGER NOT NULL, 
    start_time DATETIME, 
    end_time DATETIME, 
    status VARCHAR(32), 
    organization_id INTEGER, 
    created_by INTEGER, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE TABLE conversion_log (
    id INTEGER NOT NULL, 
    user_id INTEGER NOT NULL, 
    timestamp DATETIME, 
    amount FLOAT NOT NULL, 
    from_unit VARCHAR(32) NOT NULL, 
    to_unit VARCHAR(32) NOT NULL, 
    result FLOAT NOT NULL, 
    conversion_type VARCHAR(64) NOT NULL, 
    ingredient_name VARCHAR(128), 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(user_id) REFERENCES user (id)
);

CREATE INDEX ix_conversion_log_organization_id ON conversion_log (organization_id);

CREATE TABLE custom_unit_mapping (
    id INTEGER NOT NULL, 
    unit_name VARCHAR(64) NOT NULL, 
    conversion_factor FLOAT NOT NULL, 
    base_unit VARCHAR(64) NOT NULL, 
    notes TEXT, 
    created_by INTEGER, 
    created_at DATETIME, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_custom_unit_mapping_organization_id ON custom_unit_mapping (organization_id);

CREATE TABLE ingredient_category (
    id INTEGER NOT NULL, 
    name VARCHAR(64) NOT NULL, 
    description TEXT, 
    color VARCHAR(7), 
    default_density FLOAT, 
    is_active BOOLEAN, 
    created_by INTEGER, 
    created_at DATETIME, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_ingredient_category_organization_id ON ingredient_category (organization_id);

CREATE TABLE product (
    id INTEGER NOT NULL, 
    name VARCHAR(128) NOT NULL, 
    description TEXT, 
    base_unit VARCHAR(32) NOT NULL, 
    category VARCHAR(64), 
    subcategory VARCHAR(64), 
    tags TEXT, 
    low_stock_threshold FLOAT, 
    is_active BOOLEAN, 
    is_discontinued BOOLEAN, 
    created_at DATETIME, 
    updated_at DATETIME, 
    created_by INTEGER, 
    shopify_product_id VARCHAR(64), 
    etsy_shop_section_id VARCHAR(64), 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    CONSTRAINT unique_product_name_per_org UNIQUE (name, organization_id)
);

CREATE INDEX ix_product_organization_id ON product (organization_id);

CREATE TABLE recipe (
    id INTEGER NOT NULL, 
    name VARCHAR(128), 
    instructions TEXT, 
    label_prefix VARCHAR(8), 
    qr_image VARCHAR(128), 
    parent_id INTEGER, 
    is_locked BOOLEAN, 
    predicted_yield FLOAT, 
    predicted_yield_unit VARCHAR(50), 
    allowed_containers BLOB, 
    created_by INTEGER, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(parent_id) REFERENCES recipe (id)
);

CREATE INDEX ix_recipe_organization_id ON recipe (organization_id);

CREATE TABLE tag (
    id INTEGER NOT NULL, 
    name VARCHAR(64) NOT NULL, 
    color VARCHAR(7), 
    description TEXT, 
    is_active BOOLEAN, 
    organization_id INTEGER, 
    created_by INTEGER, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    UNIQUE (name)
);

CREATE TABLE unit (
    id INTEGER NOT NULL, 
    name VARCHAR(64) NOT NULL, 
    symbol VARCHAR(16) NOT NULL, 
    type VARCHAR(32) NOT NULL, 
    base_unit VARCHAR(64), 
    conversion_factor FLOAT, 
    multiplier_to_base FLOAT, 
    is_active BOOLEAN, 
    is_custom BOOLEAN, 
    is_mapped BOOLEAN, 
    created_by INTEGER, 
    organization_id INTEGER, 
    created_at DATETIME, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    UNIQUE (name)
);

CREATE TABLE inventory_item (
    id INTEGER NOT NULL, 
    name VARCHAR(128) NOT NULL, 
    category_id INTEGER, 
    quantity FLOAT, 
    unit VARCHAR(32) NOT NULL, 
    cost_per_unit FLOAT, 
    low_stock_threshold FLOAT, 
    density FLOAT, 
    type VARCHAR(32) NOT NULL, 
    is_active BOOLEAN, 
    is_archived BOOLEAN, 
    is_perishable BOOLEAN, 
    shelf_life_days INTEGER, 
    expiration_date DATE, 
    storage_amount FLOAT, 
    storage_unit VARCHAR(32), 
    created_by INTEGER, 
    created_at DATETIME, 
    intermediate BOOLEAN, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(category_id) REFERENCES ingredient_category (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    UNIQUE (name)
);

CREATE TABLE product_variant (
    id INTEGER NOT NULL, 
    product_id INTEGER NOT NULL, 
    name VARCHAR(128) NOT NULL, 
    description TEXT, 
    color VARCHAR(32), 
    size VARCHAR(32), 
    material VARCHAR(64), 
    scent VARCHAR(64), 
    is_active BOOLEAN, 
    created_at DATETIME, 
    created_by INTEGER, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(product_id) REFERENCES product (id), 
    CONSTRAINT unique_product_variant UNIQUE (product_id, name)
);

CREATE INDEX ix_product_variant_organization_id ON product_variant (organization_id);

CREATE TABLE batch_container (
    id INTEGER NOT NULL, 
    batch_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    container_quantity INTEGER NOT NULL, 
    quantity_used INTEGER NOT NULL, 
    fill_quantity FLOAT, 
    fill_unit VARCHAR(32), 
    cost_each FLOAT, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(container_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_batch_container_organization_id ON batch_container (organization_id);

CREATE TABLE batch_ingredient (
    id INTEGER NOT NULL, 
    batch_id INTEGER NOT NULL, 
    inventory_item_id INTEGER NOT NULL, 
    quantity_used FLOAT NOT NULL, 
    unit VARCHAR(32) NOT NULL, 
    cost_per_unit FLOAT, 
    total_cost FLOAT, 
    organization_id INTEGER, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(inventory_item_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE TABLE batch_inventory_log (
    id INTEGER NOT NULL, 
    batch_id INTEGER NOT NULL, 
    inventory_item_id INTEGER NOT NULL, 
    action VARCHAR(32) NOT NULL, 
    quantity_change FLOAT NOT NULL, 
    unit VARCHAR(32) NOT NULL, 
    old_stock FLOAT NOT NULL, 
    new_stock FLOAT NOT NULL, 
    timestamp DATETIME, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(inventory_item_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_batch_inventory_log_organization_id ON batch_inventory_log (organization_id);

CREATE TABLE extra_batch_container (
    id INTEGER NOT NULL, 
    batch_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    container_quantity INTEGER NOT NULL, 
    quantity_used INTEGER NOT NULL, 
    fill_quantity FLOAT, 
    fill_unit VARCHAR(32), 
    cost_each FLOAT, 
    reason VARCHAR(20) NOT NULL, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(container_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_extra_batch_container_organization_id ON extra_batch_container (organization_id);

CREATE TABLE extra_batch_ingredient (
    id INTEGER NOT NULL, 
    batch_id INTEGER NOT NULL, 
    inventory_item_id INTEGER NOT NULL, 
    quantity_used FLOAT NOT NULL, 
    unit VARCHAR(32) NOT NULL, 
    cost_per_unit FLOAT, 
    total_cost FLOAT, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(inventory_item_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id)
);

CREATE INDEX ix_extra_batch_ingredient_organization_id ON extra_batch_ingredient (organization_id);

CREATE TABLE inventory_history (
    id INTEGER NOT NULL, 
    inventory_item_id INTEGER NOT NULL, 
    timestamp DATETIME, 
    change_type VARCHAR(32) NOT NULL, 
    quantity_change FLOAT NOT NULL, 
    unit VARCHAR(32) NOT NULL, 
    remaining_quantity FLOAT, 
    unit_cost FLOAT, 
    fifo_reference_id INTEGER, 
    fifo_code VARCHAR(32), 
    batch_id INTEGER, 
    note TEXT, 
    created_by INTEGER, 
    quantity_used FLOAT, 
    used_for_batch_id INTEGER, 
    is_perishable BOOLEAN, 
    shelf_life_days INTEGER, 
    expiration_date DATETIME, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(fifo_reference_id) REFERENCES inventory_history (id), 
    FOREIGN KEY(inventory_item_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(used_for_batch_id) REFERENCES batch (id)
);

CREATE INDEX ix_inventory_history_organization_id ON inventory_history (organization_id);

CREATE TABLE product_sku_history (
    id INTEGER NOT NULL, 
    sku_id INTEGER NOT NULL, 
    timestamp DATETIME, 
    change_type VARCHAR(32) NOT NULL, 
    quantity_change FLOAT NOT NULL, 
    remaining_quantity FLOAT, 
    original_quantity FLOAT, 
    unit VARCHAR(32) NOT NULL, 
    unit_cost FLOAT, 
    sale_price FLOAT, 
    customer VARCHAR(128), 
    fifo_code VARCHAR(64), 
    fifo_reference_id INTEGER, 
    fifo_source VARCHAR(128), 
    is_perishable BOOLEAN, 
    shelf_life_days INTEGER, 
    expiration_date DATETIME, 
    batch_id INTEGER, 
    container_id INTEGER, 
    notes TEXT, 
    note TEXT, 
    created_by INTEGER, 
    order_id VARCHAR(64), 
    reservation_id VARCHAR(64), 
    is_reserved BOOLEAN, 
    sale_location VARCHAR(64), 
    quantity_used FLOAT, 
    batch_number VARCHAR(128), 
    lot_number VARCHAR(128), 
    temperature_at_time FLOAT, 
    location_id VARCHAR(128), 
    location_name VARCHAR(128), 
    quality_status VARCHAR(32), 
    compliance_status VARCHAR(32), 
    quality_checked_by INTEGER, 
    marketplace_order_id VARCHAR(128), 
    marketplace_source VARCHAR(32), 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(batch_id) REFERENCES batch (id), 
    FOREIGN KEY(container_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(created_by) REFERENCES user (id), 
    FOREIGN KEY(fifo_reference_id) REFERENCES product_sku_history (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(quality_checked_by) REFERENCES user (id), 
    FOREIGN KEY(sku_id) REFERENCES product_sku (id)
);

CREATE INDEX idx_change_type ON product_sku_history (change_type);

CREATE INDEX idx_fifo_code ON product_sku_history (fifo_code);

CREATE INDEX idx_sku_remaining ON product_sku_history (sku_id, remaining_quantity);

CREATE INDEX idx_sku_timestamp ON product_sku_history (sku_id, timestamp);

CREATE INDEX ix_product_sku_history_organization_id ON product_sku_history (organization_id);

CREATE TABLE recipe_ingredient (
    id INTEGER NOT NULL, 
    recipe_id INTEGER NOT NULL, 
    inventory_item_id INTEGER NOT NULL, 
    quantity FLOAT NOT NULL, 
    unit VARCHAR(32) NOT NULL, 
    notes TEXT, 
    order_position INTEGER, 
    organization_id INTEGER NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(inventory_item_id) REFERENCES inventory_item (id), 
    FOREIGN KEY(organization_id) REFERENCES organization (id), 
    FOREIGN KEY(recipe_id) REFERENCES recipe (id)
);

CREATE INDEX ix_recipe_ingredient_organization_id ON recipe_ingredient (organization_id);

INSERT INTO alembic_version (version_num) VALUES ('3f42c325fddb') RETURNING version_num;

INFO  [alembic.runtime.migration] Running upgrade 3f42c325fddb -> b7172b45c3dd, Merge migration heads
-- Running upgrade 3f42c325fddb -> b7172b45c3dd

UPDATE alembic_version SET version_num='b7172b45c3dd' WHERE alembic_version.version_num = '3f42c325fddb';

INFO  [alembic.runtime.migration] Running upgrade b7172b45c3dd -> d8be2e8ffee7, Remove size column from product_variant table
-- Running upgrade b7172b45c3dd -> d8be2e8ffee7

ERROR [flask_migrate] Error: This operation cannot proceed in --sql mode; batch mode with dialect sqlite requires a live database connection with which to reflect the table "product_sku". To generate a batch SQL migration script using table "move and copy", a complete Table object should be passed to the "copy_from" argument of the batch_alter_table() method so that table reflection can be skipped.