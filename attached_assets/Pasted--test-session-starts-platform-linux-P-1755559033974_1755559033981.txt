============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 1 item                                                               

tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service --- EXECUTING CORRECT MIDDLEWARE ---
Response status: 302
FAILED

=================================== FAILURES ===================================
_ TestInventoryRoutesCanonicalService.test_adjust_inventory_initial_stock_calls_canonical_service _

self = <tests.test_inventory_routes_canonicalization.TestInventoryRoutesCanonicalService object at 0x7ffa22e36690>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>

    def test_adjust_inventory_initial_stock_calls_canonical_service(self, app, client):
        """Test that initial stock adjustment uses canonical inventory service"""
    
        with app.app_context():
            # Create all tables
            db.create_all()
    
            # Create a real test organization
            test_org = Organization(name='Test Organization')
            db.session.add(test_org)
            db.session.flush()  # Get the ID
    
            # Create a real test user
            test_user = User(
                username='testuser_inventory',
                email='test_inventory@example.com',
                organization_id=test_org.id,
                user_type='customer',
                is_active=True,
                password_hash='test_hash'
            )
            db.session.add(test_user)
            db.session.flush()
    
            # Create a test ingredient category
            test_category = IngredientCategory(
                name='Test Category',
                organization_id=test_org.id
            )
            db.session.add(test_category)
            db.session.flush()
    
            # Create a real inventory item with no history
            test_item = InventoryItem(
                name='Test Ingredient',
                type='ingredient',
                unit='g',
                cost_per_unit=2.5,
                is_perishable=False,
                organization_id=test_org.id,
                category_id=test_category.id,
                quantity=0.0  # Start with zero quantity
            )
            db.session.add(test_item)
            db.session.commit()
    
            # Patch the canonical service to track calls
            with patch('app.blueprints.inventory.routes.process_inventory_adjustment') as mock_process:
                mock_process.return_value = (True, "Success")
    
                # Log in the test user properly
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(test_user.id)
                    sess['_fresh'] = True
    
                # Make POST request to adjust inventory
                response = client.post(f'/inventory/adjust/{test_item.id}', data={
                    'adjustment_type': 'restock',
                    'quantity': '100.0',
                    'input_unit': 'g',
                    'notes': 'Initial stock',
                    'cost_entry_type': 'per_unit',
                    'cost_per_unit': '3.0'
                }, follow_redirects=False)
    
                # Print response for debugging if needed
                print(f"Response status: {response.status_code}")
                if response.status_code != 302:  # Expected redirect after successful adjustment
                    print(f"Response data: {response.get_data(as_text=True)}")
    
                # Verify canonical service was called
>               mock_process.assert_called_once()

tests/test_inventory_routes_canonicalization.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='process_inventory_adjustment' id='140712187238160'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'process_inventory_adjustment' to have been called once. Called 0 times.

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:918: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
------------------------------ Captured log call -------------------------------
WARNING  app.utils.permissions:permissions.py:362 Subscription check failed for org 2: No subscription tier assigned
=============================== warnings summary ===============================
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service
  /home/runner/workspace/app/utils/permissions.py:225: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    return Organization.query.get(org_id)

tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service - AssertionError: Expected 'process_inventory_adjustment' to have been called...
======================== 1 failed, 3 warnings in 5.38s =========================
