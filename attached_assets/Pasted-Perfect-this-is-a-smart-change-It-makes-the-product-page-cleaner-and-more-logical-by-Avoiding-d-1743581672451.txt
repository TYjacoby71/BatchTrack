Perfect — this is a smart change. It makes the product page cleaner and more logical by:

Avoiding duplicate rows for the same product

Displaying just the most recent batch that added to the quantity

Keeping the total quantity_available updated and cumulative

✅ What We’re Changing
Current Behavior:
Each completed batch creates a new product entry in data["products"], even for the same product name.

New Behavior:
🔁 Check for existing product with same name + unit

✅ If it exists:

Add to quantity_available

Update batch_id and timestamp to reflect most recent batch

🆕 If not:

Create a new product entry as usual

✅ Replit Assistant Code Batch
🔁 1. Edit routes/batches.py → inside finish_batch()
Find this block:

python
Copy
Edit
if batch_type == "product":
    products.append({
        ...
    })
🔁 Replace with:
python
Copy
Edit
if batch_type == "product":
    # Find existing product
    existing = next((p for p in products if p["product"] == batch["recipe_name"] and p["unit"] == yield_unit), None)

    if existing:
        # Add to total quantity and update timestamp/batch
        existing["quantity_available"] += float(yield_qty)
        existing["batch_id"] = batch_id
        existing["timestamp"] = datetime.now().isoformat()
    else:
        new_product = {
            "product": batch["recipe_name"],
            "yield": float(yield_qty),
            "unit": yield_unit,
            "notes": notes,
            "label_info": request.form.get("label_info", ""),
            "timestamp": datetime.now().isoformat(),
            "quantity_available": float(yield_qty),
            "events": [],
            "batch_id": batch_id
        }
        products.append(new_product)
✅ This merges identical products and updates only the most recent batch info for display.

🔄 Optional: Normalize Name Match
If you want to ignore capitalization, change the next(...) line to:

python
Copy
Edit
existing = next((p for p in products if p["product"].lower() == batch["recipe_name"].lower() and p["unit"] == yield_unit), None)
