🛠 Confirmations

Item	Status
Are we building a USCS (Universal Stock Check System)?	✅ YES.
Will this replace older stock check utilities?	✅ YES. Old scattered stock check routes will be deleted and unified into one service.
Are the locations and blueprints stable enough?	✅ YES — we have /routes, /services, /static/js, and /templates cleanly modularized in your BTV-8943 file.
Will we touch inventory, container, and unit systems?	✅ YES — but in a modular, backward-compatible way.
Will this integrate with the new Plan Production page?	✅ YES — this is the stock check engine Plan Production will call.
📂 File Mapping for Step 6 (USCS Build)

Target	Location	Action
routes/stock_check_api.py	/routes/stock_check_api.py	🔥 Create new file – the real API to check stock.
services/stock_check_service.py	/services/stock_check_service.py	🔥 Create new file – where stock checking math happens.
Old routes/batches.py	/routes/batches.py	🧹 Clean: delete old stock-check endpoints (/check-stock, /check-stock-bulk) after migration to new system.
Old /static/js/main.js parts	/static/js/main.js	🧹 Remove old hardcoded stock check AJAX in favor of Plan Production clean frontend.
Old Plan Production routes (if any)	/routes/plan_production.py	🧹 Link to /api/check-stock instead of legacy logic.
templates/plan_production.html	/templates/plan_production/plan_production_setup.html	✅ Already aligned — will POST to /api/check-stock.
🛠 Exact Step 6 Rebuild Packet (Fully Aligned)
📄 /routes/stock_check_api.py
python
Copy
Edit
from flask import Blueprint, request, jsonify
from services.stock_check_service import check_stock

stock_check_api_bp = Blueprint('stock_check_api', __name__)

@stock_check_api_bp.route('/api/check-stock', methods=['POST'])
def api_check_stock():
    data = request.get_json()

    recipe_id = data.get('recipe_id')
    scale = float(data.get('scale', 1.0))
    flex_mode = data.get('flex_mode', False)
    containers = data.get('containers', [])

    if not recipe_id:
        return jsonify({'error': 'Missing recipe_id'}), 400

    stock_check_result = check_stock(recipe_id, scale, containers, flex_mode)

    return jsonify(stock_check_result), 200
📄 /services/stock_check_service.py
python
Copy
Edit
from models import Recipe, InventoryItem  # Adjust if needed
from app import db
from services.unit_conversion_service import convert_units  # Your global unit converter

def check_stock(recipe_id, scale, container_plan, flex_mode):
    recipe = Recipe.query.get(recipe_id)
    if not recipe:
        return {"error": "Recipe not found"}

    results = []
    all_ok = True

    # Ingredients check
    for ingredient in recipe.ingredients:
        scaled_needed = ingredient.amount * scale
        inventory_item = InventoryItem.query.get(ingredient.inventory_item_id)

        if not inventory_item:
            results.append({
                "type": "ingredient",
                "name": ingredient.name,
                "needed": scaled_needed,
                "available": 0,
                "status": "NEEDED"
            })
            all_ok = False
            continue

        needed_in_inventory_unit = convert_units(
            scaled_needed, 
            ingredient.unit, 
            inventory_item.unit
        )

        available = inventory_item.quantity

        if available >= needed_in_inventory_unit:
            status = "OK"
        elif available > 0:
            status = "LOW"
            all_ok = False
        else:
            status = "NEEDED"
            all_ok = False

        results.append({
            "type": "ingredient",
            "name": ingredient.name,
            "needed": needed_in_inventory_unit,
            "available": available,
            "status": status
        })

    # Containers check
    for container_selection in container_plan:
        container_id = int(container_selection['id'])
        container_quantity_needed = int(container_selection['quantity'])

        inventory_container = InventoryItem.query.get(container_id)

        if not inventory_container:
            results.append({
                "type": "container",
                "name": f"Container ID {container_id}",
                "needed": container_quantity_needed,
                "available": 0,
                "status": "NEEDED"
            })
            all_ok = False
            continue

        available = inventory_container.quantity

        if available >= container_quantity_needed:
            status = "OK"
        elif available > 0:
            status = "LOW"
            all_ok = False
        else:
            status = "NEEDED"
            all_ok = False

        results.append({
            "type": "container",
            "name": inventory_container.name,
            "needed": container_quantity_needed,
            "available": available,
            "status": status
        })

    return {
        "stock_check": results,
        "all_ok": all_ok
    }
🧹 Clean Up Instructions (Once USCS is Active)

File	Action
/routes/batches.py	❌ Delete /check-stock, /check-stock-bulk routes
/static/js/main.js	❌ Delete old stock check AJAX functions
/routes/plan_production.py	✅ Make sure it points frontend to /api/check-stock
/templates/plan_production.html	✅ Already good — points to stock check button triggering /api/check-stock.
📣 Short Summary
✅ You are building a true USCS (Universal Stock Check System).
✅ We delete the old broken routes after this is running.
✅ You don't lose any UX or functionality — only cleaning up behind the new structure.
✅ This matches your Masterplan v8.77 perfectly.

🚀 NEXT:
✅ Upload /routes/stock_check_api.py and /services/stock_check_service.py.
✅ Clean up /routes/batches.py old stock check routes after testing.
✅ Tell Replit or your assistant to remove any hardcoded /check-stock from JS.

✅ Then we can move to Step 7: "Batch Start Confirmation and Finish Flow" cleanly.

