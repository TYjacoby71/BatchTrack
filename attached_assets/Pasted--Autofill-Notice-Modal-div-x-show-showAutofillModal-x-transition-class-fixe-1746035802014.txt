<!-- Autofill Notice Modal -->
<div x-show="showAutofillModal"
     x-transition
     class="fixed inset-0 bg-dark bg-opacity-50 d-flex align-items-center justify-content-center"
     style="z-index: 1050;"
     @keydown.escape.window="acknowledgeAutofillModal">
  <div class="bg-white p-4 rounded shadow text-center" style="max-width: 400px; width: 90%;">
    <h5 class="text-primary mb-3">Auto-Filled Containers</h5>
    <p>System autofilled the biggest jars first. Change if you'd like.</p>
    <button class="btn btn-primary mt-2" @click="acknowledgeAutofillModal">OK</button>
  </div>
</div>

<script>
function planProduction() {
  return {
    ...,
    showAutofillModal: false,
    modalHasBeenShown: false,

    init() {
      this.fetchContainerPlan();
    },

    fetchContainerPlan() {
      fetch(`/api/available-containers/${this.recipeId}?scale=${this.scale}`)
        .then(res => res.json())
        .then(data => {
          this.allowedContainers = data.available || [];

          if (this.autoFill) {
            const projected = this.baseYield * this.scale;
            const containers = data.plan || [];

            let totalVolume = containers.reduce((sum, c) => sum + (c.capacity * c.quantity), 0);
            if (totalVolume < projected && containers.length > 0) {
              containers[containers.length - 1].quantity += 1;
            }

            this.containersSelected = containers.map(container => ({
              id: container.id,
              quantity: container.quantity,
              name: '',
              capacity: 0,
              unit: ''
            }));

            this.containersSelected.forEach((container, index) => {
              this.updateContainer(index);
            });

            // ðŸ”§ Add delay before showing modal
            setTimeout(() => {
              const needsMultiple = this.containersSelected.length > 1;
              if (this.autoFill && needsMultiple && !this.modalHasBeenShown) {
                this.showAutofillModal = true;
                this.modalHasBeenShown = true;
              }
            }, 250);
          }

          this.refreshContainmentStatus();
        });
    },

    acknowledgeAutofillModal() {
      this.showAutofillModal = false;
      this.forceRebind();
    },

    forceRebind() {
      this.containersSelected = this.containersSelected.map(c => ({
        ...c,
        id: Number(c.id)
      }));
    },

    // RESET modal display on any manual toggle or scale change
    resetModalShown() {
      this.modalHasBeenShown = false;
    },

    ...
  }
}
</script>

<!-- Modify existing bindings -->
<input type="number" min="0.1" step="0.1" class="form-control"
       x-model.number="scale" @input="resetModalShown(); fetchContainerPlan()">

<input type="checkbox" id="autoFill"
       x-model="autoFill" @change="resetModalShown(); fetchContainerPlan()">