    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE
            # Update the user's organization with the test billing status
            org = test_user.organization
            org.billing_status = billing_status

            # THE FIX: This block ensures the user is on a tier that REQUIRES a billing check.
            if not org.subscription_tier or org.subscription_tier.is_billing_exempt:
                from app.models.subscription_tier import SubscriptionTier
                # Find a non-exempt tier in the DB or create one for the test
                non_exempt_tier = SubscriptionTier.query.filter_by(is_billing_exempt=False).first()
                if not non_exempt_tier:
                    non_exempt_tier = SubscriptionTier(name="Paid Tier", key="paid", is_billing_exempt=False, billing_provider='stripe')
                    db.session.add(non_exempt_tier)
                org.subscription_tier = non_exempt_tier

            db.session.commit()

            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200

            # ACT
            # Log the user in and try to access the protected route
            with client.session_transaction() as sess:
                sess['_user_id'] = str(test_user.id)
                sess['_fresh'] = True

            # Debug: Verify the org and tier are set up correctly
            print(f"DEBUG: User {test_user.id}, Org billing_status={org.billing_status}")
            print(f"DEBUG: Tier exempt={org.subscription_tier.is_billing_exempt if org.subscription_tier else 'None'}")

            response = client.get('/_protected_dashboard')

            # ASSERT
            assert response.status_code == expected_status_code

            # If redirected, ensure it's to the correct billing page
            if expected_status_code == 302:
                assert '/billing/upgrade' in response.location or '/billing' in response.location

    def test_developer_can_masquerade_regardless_of_billing(self, app, client):
        """
        Tests that developers can access customer data even if billing is bad.
        """
        with app.app_context():
