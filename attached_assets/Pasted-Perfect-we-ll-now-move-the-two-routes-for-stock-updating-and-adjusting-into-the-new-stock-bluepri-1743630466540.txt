Perfect — we’ll now move the two routes for stock updating and adjusting into the new /stock blueprint.

✅ Goal: Migrate these endpoints
Old Route	Action
/inventory/update	Bulk update ingredient stock
/inventory/adjust	Adjust multiple stock entries manually
✅ New Paths
New Route	Handled by
/stock/inventory/update	stock_bp (bulk update)
/stock/inventory/adjust	stock_bp (batch entry)
✅ Route: /stock/inventory/update (Update Inventory in Bulk)
python
Copy
Edit
@stock_bp.route('/stock/inventory/update', methods=['GET', 'POST'])
def update_inventory():
    data = load_data()
    ingredients = data.get("ingredients", [])

    if request.method == 'POST':
        for i, ing in enumerate(ingredients):
            new_qty = request.form.get(f'quantity_{i}')
            try:
                ingredients[i]['quantity'] = round(float(new_qty), 2)
            except (ValueError, TypeError):
                continue  # Ignore faulty input

        save_data(data)
        return redirect('/ingredients')  # or wherever your inventory is shown

    return render_template("update_stock.html", ingredients=ingredients)
✅ Route: /stock/inventory/adjust (Add/Remove Items via Cart)
python
Copy
Edit
@stock_bp.route('/stock/inventory/adjust', methods=['GET', 'POST'])
def adjust_inventory():
    data = load_data()
    ingredients = data.get("ingredients", [])

    if request.method == 'POST':
        name = request.form.get("name")
        unit = request.form.get("unit")
        amount = request.form.get("amount")
        method = request.form.get("method")
        reason = request.form.get("reason")

        if name and amount:
            try:
                amount = float(amount)
                ing = next((i for i in ingredients if i['name'].lower() == name.lower()), None)
                if ing:
                    ing['quantity'] += amount
                else:
                    ingredients.append({
                        "name": name,
                        "quantity": amount,
                        "unit": unit,
                        "cost_per_unit": 0,
                    })
                save_data(data)
            except ValueError:
                pass

        return redirect('/ingredients')

    return render_template("inventory_adjust.html", ingredients=ingredients)
