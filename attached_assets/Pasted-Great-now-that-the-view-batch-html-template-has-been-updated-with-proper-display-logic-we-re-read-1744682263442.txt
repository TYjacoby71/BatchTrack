Great ‚Äî now that the view_batch.html template has been updated with proper display logic, we‚Äôre ready to move forward with the Product + Variation model so that users can:

Define products and assign variations (like ‚ÄúGreen Soap‚Äù or ‚ÄúTravel Jar‚Äù)

Select these during batch completion (if batch is for a product)

Log inventory under variation names for future product tracking

‚úÖ Next Step: Set Up Product & Variation Models
You'll now create:

A Product model with name, default_unit, and is_active

A ProductVariation model tied to a product (e.g., scent, size)

A products.py route file and templates for listing, adding, and editing products

üß† Before You Paste to Replit
‚úî Tell it: ‚ÄúDo not modify any surrounding logic. Only insert this model and register the blueprint properly.‚Äù
‚úî Files affected:

models.py

routes/products.py (new file)

templates/products/ (new folder)

app.py (add blueprint)

üß© 1. Add to models.py:
python
Copy
Edit
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), unique=True, nullable=False)
    default_unit = db.Column(db.String(32), nullable=False)
    is_active = db.Column(db.Boolean, default=True)
    variations = db.relationship('ProductVariation', backref='product', cascade="all, delete-orphan")

class ProductVariation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    name = db.Column(db.String(128), nullable=False)
    sku = db.Column(db.String(64), unique=True)
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
üß© 2. Create routes/products.py
python
Copy
Edit
from flask import Blueprint, render_template, request, redirect, url_for, flash
from models import db, Product, ProductVariation
from flask_login import login_required

products_bp = Blueprint('products', __name__, url_prefix='/products')

@products_bp.route('/')
@login_required
def list_products():
    products = Product.query.all()
    return render_template('products/list_products.html', products=products)

@products_bp.route('/new', methods=['GET', 'POST'])
@login_required
def new_product():
    if request.method == 'POST':
        name = request.form['name']
        default_unit = request.form['default_unit']
        product = Product(name=name, default_unit=default_unit)
        db.session.add(product)
        db.session.commit()
        return redirect(url_for('products.list_products'))
    return render_template('products/new_product.html')
üß© 3. Register in app.py
Add this near your other blueprints:

python
Copy
Edit
from routes.products import products_bp
app.register_blueprint(products_bp)
üß© 4. Create templates/products/list_products.html
html
Copy
Edit
{% extends 'layout.html' %}
{% block content %}
<h2>Products</h2>
<a href="{{ url_for('products.new_product') }}" class="btn btn-primary mb-3">+ New Product</a>
<ul>
  {% for product in products %}
  <li><strong>{{ product.name }}</strong> ({{ product.default_unit }})</li>
  {% endfor %}
</ul>
{% endblock %}
üß© 5. Create templates/products/new_product.html
html
Copy
Edit
{% extends 'layout.html' %}
{% block content %}
<h2>Add Product</h2>
<form method="POST">
  <div class="mb-3">
    <label for="name" class="form-label">Product Name</label>
    <input type="text" name="name" class="form-control" required>
  </div>
  <div class="mb-3">
    <label for="default_unit" class="form-label">Default Unit</label>
    <input type="text" name="default_unit" class="form-control" required>
  </div>
  <button type="submit" class="btn btn-success">Save</button>
</form>
{% endblock %}
‚úÖ Once This Is Done:
You‚Äôll be ready for:

Variation management under each product

Selecting product + variation on batch finish