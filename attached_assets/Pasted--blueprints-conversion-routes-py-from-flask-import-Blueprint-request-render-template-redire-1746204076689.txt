# âœ… blueprints/conversion/routes.py

from flask import Blueprint, request, render_template, redirect, flash, url_for
from flask_wtf.csrf import validate_csrf, generate_csrf
from wtforms.validators import ValidationError
from models import db, Unit, CustomUnitMapping
from flask_login import current_user

conversion_bp = Blueprint('conversion_bp', __name__, url_prefix='/conversion')

@conversion_bp.route('/custom-mappings', methods=['GET', 'POST'])
def manage_mappings():
    if request.method == 'POST':
        try:
            csrf_token = request.form.get("csrf_token")
            validate_csrf(csrf_token)
        except ValidationError:
            flash("Invalid CSRF token", "danger")
            return redirect(request.url)

        from_unit = request.form.get("from_unit", "").strip()
        to_unit = request.form.get("to_unit", "").strip()
        try:
            multiplier = float(request.form.get("multiplier", "0"))
        except:
            flash("Multiplier must be a number.", "danger")
            return redirect(request.url)

        if not from_unit or not to_unit or multiplier <= 0:
            flash("All fields are required.", "danger")
            return redirect(request.url)

        from_unit_obj = Unit.query.filter_by(name=from_unit).first()
        to_unit_obj = Unit.query.filter_by(name=to_unit).first()

        if not from_unit_obj or not to_unit_obj:
            flash("Units not found in database.", "danger")
            return redirect(request.url)

        mapping = CustomUnitMapping(
            from_unit=from_unit,
            to_unit=to_unit,
            multiplier=multiplier,
            user_id=getattr(current_user, "id", None)
        )
        db.session.add(mapping)

        from_unit_obj.base_unit = to_unit_obj.base_unit
        from_unit_obj.multiplier_to_base = multiplier * to_unit_obj.multiplier_to_base
        db.session.add(from_unit_obj)

        db.session.commit()
        flash("Custom mapping added successfully.", "success")
        return redirect(request.url)

    units = Unit.query.all()
    mappings = CustomUnitMapping.query.all()
    return render_template("conversion/mappings.html", units=units, mappings=mappings, csrf_token=generate_csrf())
