<!-- Plan Production Page (Full Alpine Version with Flex Mode, AutoFill, Containers, Containment Progress) -->
<div x-data="planProduction()" class="container">

  <!-- Scale and Projected Yield -->
  <div class="row mb-4">
    <div class="col-md-6">
      <label for="scale">Scale:</label>
      <input type="number" id="scale" min="0.1" step="0.1" x-model.number="scale" class="form-control">
    </div>
    <div class="col-md-6">
      <label>Projected Yield:</label>
      <div class="form-control-plaintext" x-text="(baseYield * scale).toFixed(2) + ' ' + unit"></div>
    </div>
  </div>

  <!-- Mode Toggles -->
  <div class="row mb-4">
    <div class="col-md-6">
      <label><input type="checkbox" x-model="flexMode"> Flexible Mode</label>
      <small class="form-text text-muted">Allow proceeding without full containment.</small>
    </div>
    <div class="col-md-6">
      <label><input type="checkbox" x-model="autoFill"> Auto-Fill Containers</label>
      <small class="form-text text-muted">Auto select best-fit containers.</small>
    </div>
  </div>

  <!-- Select Containers Button -->
  <div class="mb-4">
    <button type="button" class="btn btn-outline-primary btn-sm" @click="addContainer">Select Container</button>
  </div>

  <!-- Container Selection -->
  <template x-for="(container, index) in containersSelected" :key="index">
    <div class="container-row d-flex align-items-center gap-2 mb-2">
      <select class="form-select" x-model="container.id" @change="updateContainer(index, 'id', $event.target.value)">
        <option value="">Select Container</option>
        <template x-for="allowed in allowedContainers" :key="allowed.id">
          <option :value="allowed.id" x-text="allowed.name + ' (' + allowed.storage_amount + ' ' + allowed.storage_unit + ')'">
          </option>
        </template>
      </select>
      <input type="number" class="form-control" min="1" x-model.number="container.quantity" @input="updateContainer(index, 'quantity', $event.target.value)">
      <button type="button" class="btn btn-danger btn-sm" @click="removeContainer(index)">Ã—</button>
    </div>
  </template>

  <!-- Containment Progress -->
  <label class="mt-3">Containment Progress:</label>
  <div class="progress" style="height: 20px;">
    <div class="progress-bar" role="progressbar"
      :style="'width: ' + Math.min((totalContained / (baseYield * scale)) * 100, 100) + '%'"
      x-text="Math.min((totalContained / (baseYield * scale)) * 100, 100).toFixed(0) + '%'">
    </div>
  </div>
  <small class="form-text text-muted mt-1" x-text="'Remaining to contain: ' + Math.max((baseYield * scale) - totalContained, 0).toFixed(2) + ' ' + unit"></small>

  <!-- Flex Mode Containment Error -->
  <div class="alert alert-danger mt-3" x-show="!flexMode && totalContained < (baseYield * scale)">
    You must fully contain this batch to proceed.
  </div>

  <!-- Action Buttons -->
  <div class="d-flex justify-content-end mt-4">
    <button type="button" class="btn btn-primary" @click="startBatch">Start Batch</button>
  </div>

</div>

<script>
function planProduction() {
  return {
    baseYield: {{ '%.2f'|format(recipe.predicted_yield) }},
    unit: '{{ recipe.predicted_yield_unit }}',
    allowedContainers: {{ allowed_containers|tojson|safe }},
    scale: 1.0,
    flexMode: false,
    autoFill: true,
    containersSelected: [],

    get totalContained() {
      return this.containersSelected.reduce((sum, container) => sum + (container.capacity * container.quantity), 0);
    },

    addContainer() {
      this.containersSelected.push({ id: '', name: '', capacity: 0, quantity: 1, unit: '' });
    },

    removeContainer(index) {
      this.containersSelected.splice(index, 1);
    },

    updateContainer(index, field, value) {
      if (field === 'id') {
        const found = this.allowedContainers.find(c => c.id == value);
        if (found) {
          this.containersSelected[index].id = found.id;
          this.containersSelected[index].name = found.name;
          this.containersSelected[index].capacity = found.storage_amount;
          this.containersSelected[index].unit = found.storage_unit;
        }
      } else if (field === 'quantity') {
        this.containersSelected[index].quantity = parseInt(value) || 1;
      }
    },

    startBatch() {
      if (!this.flexMode && this.totalContained < (this.baseYield * this.scale)) {
        alert('You must fully contain the batch before proceeding.');
        return;
      }
      // You would submit the batch here
      alert('Batch started! (Placeholder)');
    }
  }
}
</script>
