Thanks — here's a clean and corrected version of your current container API, combining the improvements from the old one with proper structure and organization-aware scoping:

✅ Cleaned & Fixed available_containers API
python
Copy
Edit
from flask import Blueprint, jsonify, request
from flask_login import login_required, current_user
from ...models import Recipe, InventoryItem
from app.services.unit_conversion import ConversionEngine

container_api_bp = Blueprint('container_api', __name__, url_prefix='/api')

@container_api_bp.route('/available-containers/<int:recipe_id>')
@login_required
def available_containers(recipe_id):
    try:
        scale = float(request.args.get('scale', '1.0'))

        # Scoped query to current user's organization
        recipe = Recipe.scoped().filter_by(id=recipe_id).first()
        if not recipe:
            return jsonify({"error": "Recipe not found"}), 404

        allowed_container_ids = recipe.allowed_containers or []
        predicted_unit = recipe.predicted_yield_unit
        if not predicted_unit:
            return jsonify({"error": "Recipe missing predicted yield unit"}), 400

        in_stock = []

        # Filter containers for this organization only
        containers_query = InventoryItem.query.filter_by(
            type='container',
            organization_id=current_user.organization_id
        )

        for container in containers_query:
            if allowed_container_ids and container.id not in allowed_container_ids:
                continue

            try:
                conversion = ConversionEngine.convert_units(
                    container.storage_amount,
                    container.storage_unit,
                    predicted_unit
                )
                if conversion and 'converted_value' in conversion:
                    in_stock.append({
                        "id": container.id,
                        "name": container.name,
                        "storage_amount": conversion['converted_value'],
                        "storage_unit": predicted_unit,
                        "stock_qty": container.quantity
                    })
            except Exception as e:
                continue  # silently skip conversion failures

        sorted_containers = sorted(in_stock, key=lambda c: c['storage_amount'], reverse=True)

        return jsonify({"available": sorted_containers})

    except Exception as e:
        return jsonify({"error": f"Container API failed: {str(e)}"}), 500
✅ Key Improvements
Problem in Old	Fixed With
name was undefined in Blueprint()	Changed to __name__
Broken route path string: /api/available-containers/int:recipe_id	Corrected to /available-containers/<int:recipe_id>
No organization scoping	organization_id=current_user.organization_id
Missing error handling for predicted_yield_unit	Added a 400 response
Unclear scale usage	Still accepted but unused (consider removing or implementing scaling logic)

