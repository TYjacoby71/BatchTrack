Thanks for sharing the full template context — this confirms what we need.

Your issue (card/table overflowing the container) stems from item_summary_card.html and history_table.html rendering large tables/cards without a constrained or scrollable wrapper.

To make the history table (and any other wide components) fit inside the .container layout without breaking it, we need to enforce proper scroll rules and containment.

✅ Fixes You Should Apply
1. Add overflow-x: auto on the parent of large tables
Inside history_table.html, make sure your table is inside a wrapper like:

html
Copy
Edit
<div class="card-body p-0" style="overflow-x: auto;">
  <div style="min-width: 1200px;">
    <table class="table table-hover table-sm" style="table-layout: fixed; width: 100%;">
      <!-- Table content -->
    </table>
  </div>
</div>
The min-width: 1200px enforces full rendering, and the outer overflow-x: auto enables horizontal scroll if needed.

2. Prevent .card from allowing content bleed
Add this to your main CSS or inline:

css
Copy
Edit
.card {
  overflow-x: hidden;
}
This ensures a child element can’t visually spill out.

3. Apply word-break: break-word in table cells prone to overflow
Add this to table cell styles or inline on tds:

html
Copy
Edit
<td style="word-break: break-word;">{{ some_long_text }}</td>
This breaks long text (like base36 FIFO IDs or notes) to avoid horizontal overflow.

4. Confirm container padding doesn’t mask the issue
You’re using .container mt-4 — which is fine. But if you override that later (like overflow: visible on .row or col-12), make sure it doesn’t undo your fix.

✅ Optional Enhancements
Shadow or Scroll Indicator:
You can add a subtle shadow to the right edge to indicate there's more to scroll, using something like:

css
Copy
Edit
.table-responsive {
  position: relative;
}

.table-responsive::after {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  width: 30px;
  height: 100%;
  background: linear-gradient(to right, transparent, rgba(0, 0, 0, 0.05));
  pointer-events: none;
}
This gives users a subtle cue that content is scrollable.