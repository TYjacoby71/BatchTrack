============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 99 items                                                                     

tests/test_audit_canonicalization.py::test_api_reservation_routes_uses_canonical_audit PASSED [  1%]
tests/test_audit_canonicalization.py::test_products_routes_uses_canonical_audit PASSED [  2%]
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_decorator_allows_with_permission PASSED [  3%]
tests/test_auth_permissions.py::TestAuthPermissions::test_permission_required_returns_json_for_api PASSED [  4%]
tests/test_auth_permissions.py::TestAuthPermissions::test_any_permission_required_decorator PASSED [  5%]
tests/test_auth_permissions.py::TestAuthPermissions::test_tier_required_decorator PASSED [  6%]
tests/test_auth_permissions.py::TestAuthPermissions::test_user_has_any_permission_method PASSED [  7%]
tests/test_auth_permissions.py::TestAuthPermissions::test_api_unauth_returns_json_401 PASSED [  8%]
tests/test_auth_permissions.py::TestAuthPermissions::test_web_unauth_redirects_to_login PASSED [  9%]
tests/test_auth_permissions.py::TestAuthPermissions::test_csrf_token_available_in_templates PASSED [ 10%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling PASSED [ 11%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] PASSED [ 12%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] PASSED [ 13%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] PASSED [ 14%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] PASSED [ 15%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing PASSED [ 16%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade PASSED [ 17%]
tests/test_expiration_canonicalization.py::test_expiration_service_uses_canonical_adjustment PASSED [ 18%]
tests/test_expiration_canonicalization.py::TestExpirationCanonicalService::test_mark_fifo_expired_calls_canonical_service PASSED [ 19%]
tests/test_expiration_canonicalization.py::TestExpirationCanonicalService::test_mark_product_expired_calls_canonical_service PASSED [ 20%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_exists PASSED [ 21%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_login_endpoint_exists PASSED [ 22%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_auth_callback_endpoint_exists PASSED [ 23%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_state_validation_path PASSED [ 24%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_service_methods_exist PASSED [ 25%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_configuration_status PASSED [ 26%]
tests/test_google_oauth.py::TestGoogleOAuthCharacterization::test_oauth_callback_invalid_state PASSED [ 27%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock FAILED [ 28%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_product_zero_initial_stock FAILED [ 29%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_container_with_storage_specs FAILED [ 30%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_restock_operation FAILED [ 31%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_manual_addition FAILED [ 32%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_finished_batch_addition FAILED [ 33%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_returned_refunded_inventory FAILED [ 34%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_fifo_deduction_order FAILED [ 35%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_batch_consumption FAILED [ 36%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_spoilage_tracking FAILED [ 37%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_sales_tracking FAILED [ 38%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_quality_control_deductions FAILED [ 39%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_sampling_and_testing FAILED [ 40%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_increase FAILED [ 41%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_decrease FAILED [ 42%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_to_zero FAILED [ 43%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_cost_override FAILED [ 44%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_weighted_average_cost_tracking FAILED [ 45%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_perishable_item_expiration_tracking FAILED [ 46%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_expired_inventory_handling FAILED [ 47%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_inventory_reservation FAILED [ 48%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_inventory_fifo_sync_validation FAILED [ 49%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_audit_trail_completeness FAILED [ 50%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_insufficient_inventory_handling FAILED [ 51%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_canonical_service_dispatch FAILED [ 52%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_unit_conversion_edge_cases FAILED [ 53%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_overdraft_protection FAILED [ 54%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_invalid_quantity_handling FAILED [ 55%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_nonexistent_item_handling FAILED [ 56%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[restock-100.0-50.0-150.0] FAILED [ 57%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[manual_addition-100.0-25.0-125.0] FAILED [ 58%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[returned-50.0-10.0-60.0] FAILED [ 59%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[refunded-50.0-5.0-55.0] FAILED [ 60%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[finished_batch-0.0-48.0-48.0] FAILED [ 61%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[use-100.0-30.0-70.0] FAILED [ 62%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[batch-100.0-25.0-75.0] FAILED [ 63%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[sale-100.0-10.0-90.0] FAILED [ 64%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[spoil-100.0-5.0-95.0] FAILED [ 65%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[trash-100.0-20.0-80.0] FAILED [ 66%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[expired-100.0-15.0-85.0] FAILED [ 67%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[damaged-100.0-2.5-97.5] FAILED [ 68%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[quality_fail-100.0-3.0-97.0] FAILED [ 69%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[sample-100.0-0.5-99.5] FAILED [ 70%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[tester-100.0-1.0-99.0] FAILED [ 71%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[gift-100.0-2.0-98.0] FAILED [ 72%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[reserved-100.0-25.0-75.0] FAILED [ 73%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_complex_multi_operation_scenario FAILED [ 74%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_high_volume_operations FAILED [ 75%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_item_update_with_quantity_change FAILED [ 76%]
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_perishable_status_change PASSED [ 77%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_single_entry_point_exists PASSED [ 78%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order FAILED [ 79%]
tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly FAILED [ 80%]
tests/test_inventory_routes_canonicalization.py::TestInventoryRoutesCanonicalService::test_adjust_inventory_initial_stock_calls_canonical_service PASSED [ 81%]
tests/test_inventory_routes_canonicalization.py::test_recount_adjustment_uses_canonical_service PASSED [ 82%]
tests/test_pos_integration_canonicalization.py::test_pos_sale_uses_canonical_service PASSED [ 83%]
tests/test_pos_integration_canonicalization.py::TestPOSIntegrationCanonicalService::test_reserve_inventory_calls_canonical_service FAILED [ 84%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_creation_flow PASSED [ 85%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_generation_constraints PASSED [ 86%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_product_service_exists PASSED [ 87%]
tests/test_product_sku.py::TestProductSKUCharacterization::test_sku_creation_validation PASSED [ 88%]
tests/test_reservation_canonicalization.py::test_credit_specific_lot_called_on_reservation_release FAILED [ 89%]
tests/test_reservation_canonicalization.py::test_record_audit_entry_called_for_unreserved_audit PASSED [ 90%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_endpoint_exists PASSED [ 91%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_tier_bypass_behavior PASSED [ 92%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_organization_tier_assignment PASSED [ 93%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_permission_gating_exists PASSED [ 94%]
tests/test_signup_tiers.py::TestSignupTierCharacterization::test_signup_service_delegation PASSED [ 95%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_exists PASSED [ 96%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_signature_verification_path_exists PASSED [ 97%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_webhook_idempotency_behavior PASSED [ 98%]
tests/test_stripe_webhooks.py::TestStripeWebhookCharacterization::test_stripe_service_methods_exist PASSED [100%]

======================================= FAILURES =======================================
______ TestInventorySystemComprehensive.test_create_ingredient_with_initial_stock ______

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc0d90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_create_ingredient_with_initial_stock(self, app, db_session, setup_test_data):
        """Test creating ingredient with initial stock"""
        data = setup_test_data
    
        form_data = {
            'name': 'New Test Ingredient',
            'type': 'ingredient',
            'unit': 'kg',
            'quantity': 50.0,
            'cost_per_unit': 1.25,
            'notes': 'Initial stock test'
        }
    
        success, message, item_id = create_inventory_item(
            form_data, data['org'].id, data['user'].id
        )
    
>       assert success is True
E       assert False is True

tests/test_inventory_comprehensive.py:126: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
ERROR    app.services.inventory_adjustment._creation_logic:_creation_logic.py:169 Unexpected error in create_inventory_item: handle_initial_stock() missing 1 required positional argument: 'change_type'
_______ TestInventorySystemComprehensive.test_create_product_zero_initial_stock ________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc1150>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_create_product_zero_initial_stock(self, app, db_session, setup_test_data):
        """Test creating product with zero initial stock"""
        data = setup_test_data
    
        form_data = {
            'name': 'New Test Product',
            'type': 'product',
            'unit': 'bottle',
            'quantity': 0.0,
            'cost_per_unit': 10.0
        }
    
        success, message, item_id = create_inventory_item(
            form_data, data['org'].id, data['user'].id
        )
    
>       assert success is True
E       assert False is True

tests/test_inventory_comprehensive.py:159: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
ERROR    app.services.inventory_adjustment._creation_logic:_creation_logic.py:169 Unexpected error in create_inventory_item: handle_initial_stock() missing 1 required positional argument: 'change_type'
______ TestInventorySystemComprehensive.test_create_container_with_storage_specs _______

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc16d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_create_container_with_storage_specs(self, app, db_session, setup_test_data):
        """Test creating container with storage specifications"""
        data = setup_test_data
    
        form_data = {
            'name': 'New Test Container',
            'type': 'container',
            'quantity': 100.0,
            'cost_per_unit': 0.75,
            'storage_amount': 500,
            'storage_unit': 'ml'
        }
    
        success, message, item_id = create_inventory_item(
            form_data, data['org'].id, data['user'].id
        )
    
>       assert success is True
E       assert False is True

tests/test_inventory_comprehensive.py:180: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
ERROR    app.services.inventory_adjustment._creation_logic:_creation_logic.py:169 Unexpected error in create_inventory_item: handle_initial_stock() missing 1 required positional argument: 'change_type'
_______________ TestInventorySystemComprehensive.test_restock_operation ________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc1d90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_restock_operation(self, app, db_session, setup_test_data):
        """Test restocking existing inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add initial stock
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            notes='Initial restock',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:200: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_restock_operation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________________ TestInventorySystemComprehensive.test_manual_addition _________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc2410>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_manual_addition(self, app, db_session, setup_test_data):
        """Test manual inventory addition"""
        data = setup_test_data
        item = data['product']
    
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='manual_addition',
            notes='Found extra inventory',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:237: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=25.0, change_type=manual_addition, caller=tests/test_inventory_comprehensive.py:test_manual_addition
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
____________ TestInventorySystemComprehensive.test_finished_batch_addition _____________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc2a90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_finished_batch_addition(self, app, db_session, setup_test_data):
        """Test adding inventory from finished batch"""
        data = setup_test_data
        item = data['product']
    
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=48.0,
            change_type='finished_batch',
            notes='Batch #123 completed',
            created_by=data['user'].id,
            batch_id=123
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:255: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=48.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_finished_batch_addition
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
__________ TestInventorySystemComprehensive.test_returned_refunded_inventory ___________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc3110>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_returned_refunded_inventory(self, app, db_session, setup_test_data):
        """Test returned and refunded inventory operations"""
        data = setup_test_data
        item = data['product']
    
        # Test returned
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=5.0,
            change_type='returned',
            notes='Customer return',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:280: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=5.0, change_type=returned, caller=tests/test_inventory_comprehensive.py:test_returned_refunded_inventory
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
______________ TestInventorySystemComprehensive.test_fifo_deduction_order ______________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc37d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_fifo_deduction_order(self, app, db_session, setup_test_data):
        """Test FIFO (first-in-first-out) deduction order"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add stock in layers with different costs
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            cost_override=1.0,
            notes='First batch',
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            cost_override=1.50,
            notes='Second batch',
            created_by=data['user'].id
        )
    
        # Deduct 75 units (should come from first batch first)
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=75.0,
            change_type='use',
            notes='FIFO test deduction',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:329: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=75.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_______________ TestInventorySystemComprehensive.test_batch_consumption ________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc3f10>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_batch_consumption(self, app, db_session, setup_test_data):
        """Test batch consumption deduction"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=200.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Use for batch
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=75.0,
            change_type='batch',
            notes='Used in batch production',
            batch_id=456,
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:363: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=200.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_batch_consumption
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=75.0, change_type=batch, caller=tests/test_inventory_comprehensive.py:test_batch_consumption
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_______________ TestInventorySystemComprehensive.test_spoilage_tracking ________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc4650>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_spoilage_tracking(self, app, db_session, setup_test_data):
        """Test spoilage and waste tracking"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Record spoilage
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=15.0,
            change_type='spoil',
            notes='Expired ingredients',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:389: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_spoilage_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=15.0, change_type=spoil, caller=tests/test_inventory_comprehensive.py:test_spoilage_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_________________ TestInventorySystemComprehensive.test_sales_tracking _________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc4d90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_sales_tracking(self, app, db_session, setup_test_data):
        """Test sales and revenue tracking"""
        data = setup_test_data
        item = data['product']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='finished_batch',
            created_by=data['user'].id
        )
    
        # Record sale
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=3.0,
            change_type='sale',
            notes='Customer purchase',
            sale_price=15.0,
            customer='John Doe',
            order_id='ORD-123',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:428: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=50.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_sales_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=3.0, change_type=sale, caller=tests/test_inventory_comprehensive.py:test_sales_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_quality_control_deductions ___________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc54d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_quality_control_deductions(self, app, db_session, setup_test_data):
        """Test quality control related deductions"""
        data = setup_test_data
        item = data['product']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='finished_batch',
            created_by=data['user'].id
        )
    
        # Quality fail
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=2.0,
            change_type='quality_fail',
            notes='Failed QC inspection',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:463: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=100.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_quality_control_deductions
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=2.0, change_type=quality_fail, caller=tests/test_inventory_comprehensive.py:test_quality_control_deductions
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
______________ TestInventorySystemComprehensive.test_sampling_and_testing ______________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc5c10>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_sampling_and_testing(self, app, db_session, setup_test_data):
        """Test sampling and testing deductions"""
        data = setup_test_data
        item = data['product']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='finished_batch',
            created_by=data['user'].id
        )
    
        # Sample
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=0.5,
            change_type='sample',
            notes='Quality sample',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:499: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=50.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_sampling_and_testing
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=0.5, change_type=sample, caller=tests/test_inventory_comprehensive.py:test_sampling_and_testing
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
________________ TestInventorySystemComprehensive.test_recount_increase ________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc6350>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_recount_increase(self, app, db_session, setup_test_data):
        """Test recount that increases inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Recount to higher amount
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=120.0,  # Target quantity, not delta
            change_type='recount',
            notes='Physical count found more',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:547: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_recount_increase
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=120.0, change_type=recount, caller=tests/test_inventory_comprehensive.py:test_recount_increase
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________________ TestInventorySystemComprehensive.test_recount_decrease ________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc6a90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_recount_decrease(self, app, db_session, setup_test_data):
        """Test recount that decreases inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Recount to lower amount
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=85.0,  # Target quantity, not delta
            change_type='recount',
            notes='Physical count found less',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:573: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_recount_decrease
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=85.0, change_type=recount, caller=tests/test_inventory_comprehensive.py:test_recount_decrease
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________________ TestInventorySystemComprehensive.test_recount_to_zero _________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc32d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_recount_to_zero(self, app, db_session, setup_test_data):
        """Test recount to zero inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Recount to zero
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=0.0,
            change_type='recount',
            notes='All inventory missing',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:599: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_recount_to_zero
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=0.0, change_type=recount, caller=tests/test_inventory_comprehensive.py:test_recount_to_zero
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_________________ TestInventorySystemComprehensive.test_cost_override __________________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc6950>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_cost_override(self, app, db_session, setup_test_data):
        """Test cost override functionality"""
        data = setup_test_data
        item = data['ingredient']
    
        original_cost = item.cost_per_unit
        new_cost = 2.75
    
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=0,  # No quantity change
            change_type='cost_override',
            cost_override=new_cost,
            notes='Updated supplier pricing',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:622: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=0, change_type=cost_override, caller=tests/test_inventory_comprehensive.py:test_cost_override
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_________ TestInventorySystemComprehensive.test_weighted_average_cost_tracking _________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc7050>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_weighted_average_cost_tracking(self, app, db_session, setup_test_data):
        """Test that different costs are tracked in FIFO lots"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add stock at different costs
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            cost_override=1.0,
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            cost_override=1.50,
            created_by=data['user'].id
        )
    
        # Verify costs are tracked in FIFO lots
        lots = UnifiedInventoryHistory.query.filter(
            UnifiedInventoryHistory.inventory_item_id == item.id,
            UnifiedInventoryHistory.remaining_quantity > 0
        ).order_by(UnifiedInventoryHistory.timestamp.asc()).all()
    
>       assert lots[0].unit_cost == 1.0
E       IndexError: list index out of range

tests/test_inventory_comprehensive.py:655: IndexError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_weighted_average_cost_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_weighted_average_cost_tracking
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
______ TestInventorySystemComprehensive.test_perishable_item_expiration_tracking _______

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc7410>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_perishable_item_expiration_tracking(self, app, db_session, setup_test_data):
        """Test expiration tracking for perishable items"""
        data = setup_test_data
    
        # Create perishable item
        form_data = {
            'name': 'Perishable Ingredient',
            'type': 'ingredient',
            'unit': 'kg',
            'quantity': 25.0,
            'cost_per_unit': 3.0,
            'is_perishable': 'on',
            'shelf_life_days': 30
        }
    
        success, message, item_id = create_inventory_item(
            form_data, data['org'].id, data['user'].id
        )
>       assert success is True
E       assert False is True

tests/test_inventory_comprehensive.py:678: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
ERROR    app.services.inventory_adjustment._creation_logic:_creation_logic.py:169 Unexpected error in create_inventory_item: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_expired_inventory_handling ___________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc77d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_expired_inventory_handling(self, app, db_session, setup_test_data):
        """Test handling of expired inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Record expired inventory
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=10.0,
            change_type='expired',
            notes='Past expiration date',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:713: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_expired_inventory_handling
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=expired, caller=tests/test_inventory_comprehensive.py:test_expired_inventory_handling
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_____________ TestInventorySystemComprehensive.test_inventory_reservation ______________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc7b90>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_inventory_reservation(self, app, db_session, setup_test_data):
        """Test inventory reservation functionality"""
        data = setup_test_data
        item = data['product']
    
        # Add stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='finished_batch',
            created_by=data['user'].id
        )
    
        # Reserve inventory
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='reserved',
            notes='Reserved for order #456',
            order_id='ORD-456',
            created_by=data['user'].id
        )
>       assert success is True
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:742: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=100.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_inventory_reservation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=2, quantity=25.0, change_type=reserved, caller=tests/test_inventory_comprehensive.py:test_inventory_reservation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 2 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 2: handle_initial_stock() missing 1 required positional argument: 'change_type'
_________ TestInventorySystemComprehensive.test_inventory_fifo_sync_validation _________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc7f50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_inventory_fifo_sync_validation(self, app, db_session, setup_test_data):
        """Test that inventory quantities stay in sync with FIFO totals"""
        data = setup_test_data
        item = data['ingredient']
    
        # Perform multiple operations
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='use',
            created_by=data['user'].id
        )
    
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Validate sync
        is_valid, error, inventory_qty, fifo_total = validate_inventory_fifo_sync(item.id)
        assert is_valid is True
        assert inventory_qty == fifo_total
>       assert inventory_qty == 125.0
E       assert 0.0 == 125.0

tests/test_inventory_comprehensive.py:790: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_inventory_fifo_sync_validation
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
____________ TestInventorySystemComprehensive.test_audit_trail_completeness ____________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd0510>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_audit_trail_completeness(self, app, db_session, setup_test_data):
        """Test that all operations create proper audit trails"""
        data = setup_test_data
        item = data['ingredient']
    
        # Perform operation
        process_inventory_adjustment(
            item_id=item.id,
            quantity=75.0,
            change_type='restock',
            notes='Audit trail test',
            created_by=data['user'].id
        )
    
        # Verify audit trail
        history_entries = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).all()
    
>       assert len(history_entries) > 0
E       assert 0 > 0
E        +  where 0 = len([])

tests/test_inventory_comprehensive.py:811: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=75.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_audit_trail_completeness
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________ TestInventorySystemComprehensive.test_insufficient_inventory_handling _________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd0bd0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_insufficient_inventory_handling(self, app, db_session, setup_test_data):
        """Test handling of insufficient inventory scenarios"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add small amount of stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=10.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Try to deduct more than available
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=25.0,
            change_type='use',
            notes='Should fail - insufficient stock',
            created_by=data['user'].id
        )
>       assert success is False
E       AssertionError: assert (False, 'A critical internal error occurred') is False

tests/test_inventory_comprehensive.py:842: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_insufficient_inventory_handling
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_insufficient_inventory_handling
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_canonical_service_dispatch ___________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd1250>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_canonical_service_dispatch(self, app, db_session, setup_test_data):
        """Test that process_inventory_adjustment correctly dispatches to sub-services"""
        data = setup_test_data
        item = data['ingredient']
    
        # Test that each change type creates exactly one history entry
        change_types_to_test = [
            ('restock', 50.0),
            ('use', 25.0),
            ('spoil', 10.0),
            ('recount', 100.0),  # Target quantity for recount
        ]
    
        for change_type, quantity in change_types_to_test:
            initial_history_count = UnifiedInventoryHistory.query.filter_by(
                inventory_item_id=item.id
            ).count()
    
            success = process_inventory_adjustment(
                item_id=item.id,
                quantity=quantity,
                change_type=change_type,
                created_by=data['user'].id
            )
>           assert success is True
E           AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:868: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_canonical_service_dispatch
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_unit_conversion_edge_cases ___________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd18d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_unit_conversion_edge_cases(self, app, db_session, setup_test_data):
        """Test unit conversion failures and edge cases"""
        data = setup_test_data
    
        # Create item without density
        item_no_density = InventoryItem(
            name="No Density Item",
            type="ingredient",
            unit="g",
            quantity=1000.0,
            cost_per_unit=1.0,
            organization_id=data['org'].id
        )
        db_session.add(item_no_density)
        db_session.commit()
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item_no_density.id,
            quantity=1000.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Try weight-to-volume conversion without density (should fail)
        success = process_inventory_adjustment(
            item_id=item_no_density.id,
            quantity=50.0,
            change_type='use',
            unit='ml',  # Converting from g to ml without density
            created_by=data['user'].id
        )
>       assert success is False
E       AssertionError: assert (False, 'A critical internal error occurred') is False

tests/test_inventory_comprehensive.py:913: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=4, quantity=1000.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_unit_conversion_edge_cases
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 4 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 4: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=4, quantity=50.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_unit_conversion_edge_cases
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 4 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 4: handle_initial_stock() missing 1 required positional argument: 'change_type'
______________ TestInventorySystemComprehensive.test_overdraft_protection ______________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd1f50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_overdraft_protection(self, app, db_session, setup_test_data):
        """Test overdraft protection prevents negative inventory"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set specific initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Try to deduct more than available
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=60.0,  # More than the 50 available
            change_type='sale',
            created_by=data['user'].id
        )
    
        # Should fail
>       assert success is False
E       AssertionError: assert (False, 'A critical internal error occurred') is False

tests/test_inventory_comprehensive.py:971: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_overdraft_protection
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=60.0, change_type=sale, caller=tests/test_inventory_comprehensive.py:test_overdraft_protection
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_invalid_quantity_handling ____________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd25d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_invalid_quantity_handling(self, app, db_session, setup_test_data):
        """Test handling of invalid quantity values"""
        data = setup_test_data
        item = data['ingredient']
    
        # Try negative quantity for additive operation
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=-10.0,
            change_type='restock',
            created_by=data['user'].id
        )
>       assert success is True  # Should handle gracefully
E       AssertionError: assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:996: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=-10.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_invalid_quantity_handling
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
___________ TestInventorySystemComprehensive.test_nonexistent_item_handling ____________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd2c50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_nonexistent_item_handling(self, app, db_session, setup_test_data):
        """Test handling of operations on nonexistent items"""
        data = setup_test_data
    
        success = process_inventory_adjustment(
            item_id=99999,  # Non-existent ID
            quantity=10.0,
            change_type='restock',
            created_by=data['user'].id
        )
>       assert success is False
E       AssertionError: assert (False, 'Inventory item not found') is False

tests/test_inventory_comprehensive.py:1008: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=99999, quantity=10.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_nonexistent_item_handling
ERROR    app.services.inventory_adjustment._core:_core.py:43 Inventory item not found: 99999
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[restock-100.0-50.0-150.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddd750>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'restock', initial_qty = 100.0, adjustment_qty = 50.0
expected_final_qty = 150.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment restock failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[manual_addition-100.0-25.0-125.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddd9d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'manual_addition', initial_qty = 100.0, adjustment_qty = 25.0
expected_final_qty = 125.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment manual_addition failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=manual_addition, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[returned-50.0-10.0-60.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edddc50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'returned', initial_qty = 50.0, adjustment_qty = 10.0
expected_final_qty = 60.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment returned failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=returned, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[refunded-50.0-5.0-55.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddded0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'refunded', initial_qty = 50.0, adjustment_qty = 5.0
expected_final_qty = 55.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment refunded failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=5.0, change_type=refunded, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[finished_batch-0.0-48.0-48.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edde150>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'finished_batch', initial_qty = 0.0, adjustment_qty = 48.0
expected_final_qty = 48.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment finished_batch failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=48.0, change_type=finished_batch, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[use-100.0-30.0-70.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edde3d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'use', initial_qty = 100.0, adjustment_qty = 30.0
expected_final_qty = 70.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment use failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=30.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[batch-100.0-25.0-75.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edde650>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'batch', initial_qty = 100.0, adjustment_qty = 25.0
expected_final_qty = 75.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment batch failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=batch, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[sale-100.0-10.0-90.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edde8d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'sale', initial_qty = 100.0, adjustment_qty = 10.0
expected_final_qty = 90.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment sale failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=sale, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[spoil-100.0-5.0-95.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddeb50>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'spoil', initial_qty = 100.0, adjustment_qty = 5.0
expected_final_qty = 95.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment spoil failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=5.0, change_type=spoil, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[trash-100.0-20.0-80.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd23d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'trash', initial_qty = 100.0, adjustment_qty = 20.0
expected_final_qty = 80.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment trash failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=20.0, change_type=trash, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[expired-100.0-15.0-85.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd1050>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'expired', initial_qty = 100.0, adjustment_qty = 15.0
expected_final_qty = 85.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment expired failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=15.0, change_type=expired, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[damaged-100.0-2.5-97.5] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edd0050>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'damaged', initial_qty = 100.0, adjustment_qty = 2.5
expected_final_qty = 97.5

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment damaged failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=2.5, change_type=damaged, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[quality_fail-100.0-3.0-97.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc7690>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'quality_fail', initial_qty = 100.0, adjustment_qty = 3.0
expected_final_qty = 97.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment quality_fail failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=3.0, change_type=quality_fail, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[sample-100.0-0.5-99.5] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40edc6510>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'sample', initial_qty = 100.0, adjustment_qty = 0.5
expected_final_qty = 99.5

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment sample failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=0.5, change_type=sample, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[tester-100.0-1.0-99.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddd5d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'tester', initial_qty = 100.0, adjustment_qty = 1.0
expected_final_qty = 99.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment tester failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=1.0, change_type=tester, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[gift-100.0-2.0-98.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddedd0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'gift', initial_qty = 100.0, adjustment_qty = 2.0
expected_final_qty = 98.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment gift failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=2.0, change_type=gift, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_ TestInventorySystemComprehensive.test_foundational_adjustments_parameterized[reserved-100.0-25.0-75.0] _

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddef10>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}
change_type = 'reserved', initial_qty = 100.0, adjustment_qty = 25.0
expected_final_qty = 75.0

    @pytest.mark.parametrize("change_type,initial_qty,adjustment_qty,expected_final_qty", [
        # Additive cases
        ("restock", 100.0, 50.0, 150.0),
        ("manual_addition", 100.0, 25.0, 125.0),
        ("returned", 50.0, 10.0, 60.0),
        ("refunded", 50.0, 5.0, 55.0),
        ("finished_batch", 0.0, 48.0, 48.0),
    
        # Deductive cases
        ("use", 100.0, 30.0, 70.0),
        ("batch", 100.0, 25.0, 75.0),
        ("sale", 100.0, 10.0, 90.0),
        ("spoil", 100.0, 5.0, 95.0),
        ("trash", 100.0, 20.0, 80.0),
        ("expired", 100.0, 15.0, 85.0),
        ("damaged", 100.0, 2.5, 97.5),
        ("quality_fail", 100.0, 3.0, 97.0),
        ("sample", 100.0, 0.5, 99.5),
        ("tester", 100.0, 1.0, 99.0),
        ("gift", 100.0, 2.0, 98.0),
        ("reserved", 100.0, 25.0, 75.0),
    ])
    def test_foundational_adjustments_parameterized(self, app, db_session, setup_test_data,
                                                   change_type, initial_qty, adjustment_qty, expected_final_qty):
        """Parameterized test covering all basic adjustment types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Set initial quantity
        item.quantity = initial_qty
        db_session.commit()
    
        # Add initial stock if needed
        if initial_qty > 0:
            process_inventory_adjustment(
                item_id=item.id,
                quantity=initial_qty,
                change_type='restock',
                created_by=data['user'].id
            )
    
        # Get initial history count
        initial_history_count = UnifiedInventoryHistory.query.filter_by(
            inventory_item_id=item.id
        ).count()
    
        # Perform the adjustment
        success = process_inventory_adjustment(
            item_id=item.id,
            quantity=adjustment_qty,
            change_type=change_type,
            created_by=data['user'].id
        )
    
        # Assertions
>       assert success is True, f"Adjustment {change_type} failed"
E       AssertionError: Adjustment reserved failed
E       assert (False, 'A critical internal error occurred') is True

tests/test_inventory_comprehensive.py:1067: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=25.0, change_type=reserved, caller=tests/test_inventory_comprehensive.py:test_foundational_adjustments_parameterized
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________ TestInventorySystemComprehensive.test_complex_multi_operation_scenario ________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddf250>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_complex_multi_operation_scenario(self, app, db_session, setup_test_data):
        """Test complex scenario with multiple operation types"""
        data = setup_test_data
        item = data['ingredient']
    
        # Initial restock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=1000.0,
            change_type='restock',
            cost_override=1.0,
            created_by=data['user'].id
        )
    
        # Use in batches
        process_inventory_adjustment(
            item_id=item.id,
            quantity=250.0,
            change_type='batch',
            batch_id=1,
            created_by=data['user'].id
        )
    
        # Record spoilage
        process_inventory_adjustment(
            item_id=item.id,
            quantity=50.0,
            change_type='spoil',
            created_by=data['user'].id
        )
    
        # Add more stock at different cost
        process_inventory_adjustment(
            item_id=item.id,
            quantity=200.0,
            change_type='restock',
            cost_override=1.25,
            created_by=data['user'].id
        )
    
        # Recount adjustment
        process_inventory_adjustment(
            item_id=item.id,
            quantity=890.0,  # Target quantity
            change_type='recount',
            created_by=data['user'].id
        )
    
        # Final validation
        db_session.refresh(item)
        is_valid, error, inventory_qty, fifo_total = validate_inventory_fifo_sync(item.id)
        assert is_valid is True
>       assert inventory_qty == 890.0
E       assert 0.0 == 890.0

tests/test_inventory_comprehensive.py:1141: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=1000.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_complex_multi_operation_scenario
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=250.0, change_type=batch, caller=tests/test_inventory_comprehensive.py:test_complex_multi_operation_scenario
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=spoil, caller=tests/test_inventory_comprehensive.py:test_complex_multi_operation_scenario
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=200.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_complex_multi_operation_scenario
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=890.0, change_type=recount, caller=tests/test_inventory_comprehensive.py:test_complex_multi_operation_scenario
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
_____________ TestInventorySystemComprehensive.test_high_volume_operations _____________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddf610>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_high_volume_operations(self, app, db_session, setup_test_data):
        """Test system performance with high volume operations"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add large initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=10000.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Perform many small deductions
        for i in range(50):
            process_inventory_adjustment(
                item_id=item.id,
                quantity=10.0,
                change_type='use',
                notes=f'Small deduction {i+1}',
                created_by=data['user'].id
            )
    
        # Verify final state
        db_session.refresh(item)
>       assert item.quantity == 9500.0
E       assert 0.0 == 9500.0
E        +  where 0.0 = <InventoryItem 1>.quantity

tests/test_inventory_comprehensive.py:1168: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10000.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=10.0, change_type=use, caller=tests/test_inventory_comprehensive.py:test_high_volume_operations
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
________ TestInventorySystemComprehensive.test_item_update_with_quantity_change ________

self = <tests.test_inventory_comprehensive.TestInventorySystemComprehensive object at 0x7fe40eddfb10>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
setup_test_data = {'container': <InventoryItem 3>, 'ingredient': <InventoryItem 1>, 'org': <Organization 2>, 'product': <InventoryItem 2>, ...}

    def test_item_update_with_quantity_change(self, app, db_session, setup_test_data):
        """Test updating item details with quantity changes"""
        data = setup_test_data
        item = data['ingredient']
    
        # Add initial stock
        process_inventory_adjustment(
            item_id=item.id,
            quantity=100.0,
            change_type='restock',
            created_by=data['user'].id
        )
    
        # Update item with quantity change
        form_data = {
            'name': 'Updated Ingredient Name',
            'unit': 'kg',
            'quantity': 150.0,  # Increase quantity
            'cost_per_unit': 1.75
        }
    
        success, message = update_inventory_item(item.id, form_data)
>       assert success is True
E       assert False is True

tests/test_inventory_comprehensive.py:1198: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_comprehensive.py:test_item_update_with_quantity_change
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
ERROR    root:_edit_logic.py:147 Error updating inventory item 1: 'NoneType' object has no attribute 'is_authenticated'
_____________ TestInventoryFIFOCharacterization.test_fifo_deduction_order ______________

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7fe40ede59d0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
test_user = <User testuser_1755744431982270>, test_org = <Organization 3>

    def test_fifo_deduction_order(self, app, db_session, test_user, test_org):
        """Test FIFO deduction follows first-in-first-out order."""
        with app.test_request_context():
            login_user(test_user)
    
            # Create inventory item
            item = InventoryItem(
                name="Test Ingredient",
                type="ingredient",
                unit="g",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Add stock in layers (oldest first)
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=100.0,
                change_type="restock",
                notes="First batch",
                created_by=test_user.id
            )
    
            assert process_inventory_adjustment(
                item_id=item.id,
                quantity=50.0,
                change_type="restock",
                notes="Second batch",
                created_by=test_user.id
            )
    
            # Verify total
>           db_session.refresh(item)

tests/test_inventory_fifo.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py:1765: in refresh
    return self._proxied.refresh(
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3147: in refresh
    self._expire_state(state, attribute_names)
.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:3273: in _expire_state
    self._validate_persistent(state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.Session object at 0x7fe40c831b10>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe406fa7230>

    def _validate_persistent(self, state: InstanceState[Any]) -> None:
        if not self.identity_map.contains_state(state):
>           raise sa_exc.InvalidRequestError(
                "Instance '%s' is not persistent within this Session"
                % state_str(state)
            )
E           sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7fe40786a5d0>' is not persistent within this Session

.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:4139: InvalidRequestError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=100.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=50.0, change_type=restock, caller=tests/test_inventory_fifo.py:test_fifo_deduction_order
ERROR    app.services.inventory_adjustment._core:_core.py:43 Inventory item not found: 1
____ TestInventoryFIFOCharacterization.test_inventory_adjustment_delegates_properly ____

self = <tests.test_inventory_fifo.TestInventoryFIFOCharacterization object at 0x7fe40ede5fd0>
app = <Flask 'app'>
db_session = <sqlalchemy.orm.scoping.scoped_session object at 0x7fe40fad9110>
test_user = <User testuser_1755744433660440>, test_org = <Organization 3>

    def test_inventory_adjustment_delegates_properly(self, app, db_session, test_user, test_org):
        """Verify inventory adjustment service delegates to proper internal systems."""
        with app.test_request_context():
            login_user(test_user)
    
            item = InventoryItem(
                name="Test Product",
                type="product",
                unit="ml",
                quantity=0.0,
                organization_id=test_org.id,
                created_by=test_user.id
            )
            db_session.add(item)
            db_session.flush()
    
            # Test product addition (should use ProductSKUHistory)
            success, message = process_inventory_adjustment(
                item_id=item.id,
                quantity=250.0,
                change_type="finished_batch",
                notes="Batch completion",
                created_by=test_user.id
            )
    
>           assert success is True
E           assert False is True

tests/test_inventory_fifo.py:97: AssertionError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
---------------------------------- Captured log call -----------------------------------
INFO     app.services.inventory_adjustment._core:_core.py:37 CANONICAL DISPATCHER: item_id=1, quantity=250.0, change_type=finished_batch, caller=tests/test_inventory_fifo.py:test_inventory_adjustment_delegates_properly
INFO     app.services.inventory_adjustment._core:_core.py:50 INITIAL STOCK: Detected item 1 has no FIFO history, using initial_stock handler
ERROR    app.services.inventory_adjustment._core:_core.py:85 Error executing handler for initial_stock on item 1: handle_initial_stock() missing 1 required positional argument: 'change_type'
__ TestPOSIntegrationCanonicalService.test_reserve_inventory_calls_canonical_service ___

self = <tests.test_pos_integration_canonicalization.TestPOSIntegrationCanonicalService object at 0x7fe40edf2a50>
mock_user = <MagicMock name='current_user' id='140617353891984'>
mock_reservation = <MagicMock name='Reservation' id='140617338449744'>
mock_item = <MagicMock name='InventoryItem' id='140617431440784'>
mock_process = <MagicMock name='process_inventory_adjustment' id='140617356390160'>

    @patch('app.services.pos_integration.process_inventory_adjustment')
    @patch('app.services.pos_integration.InventoryItem')
    @patch('app.services.pos_integration.Reservation')
    @patch('app.services.pos_integration.current_user')
    def test_reserve_inventory_calls_canonical_service(self, mock_user, mock_reservation, mock_item, mock_process):
        """Test that inventory reservation calls process_inventory_adjustment"""
        # Mock the original inventory item
        mock_original_item = MagicMock()
        mock_original_item.id = 1
        mock_original_item.name = "Test Product"
        mock_original_item.type = 'product'
        mock_original_item.unit = 'piece'
        mock_original_item.cost_per_unit = 10.0
        mock_original_item.available_quantity = 50.0
        mock_original_item.organization_id = 1
    
        # Mock reserved item
        mock_reserved_item = MagicMock()
        mock_reserved_item.id = 2
        mock_reserved_item.quantity = 0.0
    
        mock_item.query.get.return_value = mock_original_item
        mock_item.query.filter_by.return_value.first.return_value = mock_reserved_item
    
        mock_user.id = 1
        mock_user.is_authenticated = True
        mock_user.organization_id = 1
    
        # Mock process_inventory_adjustment to succeed
        mock_process.return_value = True
    
        # Call the service
        success, message = POSIntegrationService.reserve_inventory(
            item_id=1,
            quantity=5.0,
            order_id="ORD-123",
            source="shopify",
            notes="Test reservation"
        )
    
        # Verify canonical service was called for deduction
        expected_calls = [
            # First call for deduction from original item
            ((), {
                'item_id': 1,
                'quantity': 5.0,
                'change_type': 'reserved',
                'notes': 'Reserved for order ORD-123 (shopify). Test reservation',
                'order_id': 'ORD-123',
                'created_by': 1
            }),
            # Second call for allocation to reserved item
            ((), {
                'item_id': 2,
                'quantity': 5.0,
                'change_type': 'reserved_allocation',
                'unit': 'piece',
                'notes': 'Reserved for order ORD-123. Test reservation',
                'created_by': 1,
                'cost_override': 10.0
            })
        ]
    
>       assert mock_process.call_count == 2
E       AssertionError: assert 0 == 2
E        +  where 0 = <MagicMock name='process_inventory_adjustment' id='140617356390160'>.call_count

tests/test_pos_integration_canonicalization.py:114: AssertionError
________________ test_credit_specific_lot_called_on_reservation_release ________________

app = <Flask 'app'>

    def test_credit_specific_lot_called_on_reservation_release(app):
        """Test that releasing a reservation calls the canonical credit_specific_lot helper"""
        with app.app_context():
>           with patch('app.services.inventory_adjustment.credit_specific_lot') as mock_credit:

tests/test_reservation_canonicalization.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1446: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7fe407273d90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'app.services.inventory_adjustment' from '/home/runner/workspace/app/services/inventory_adjustment/__init__.py'> does not have the attribute 'credit_specific_lot'

/nix/store/7d088dip86hlzri9sk0h78b63yfmx0a0-python3-3.11.13/lib/python3.11/unittest/mock.py:1419: AttributeError
-------------------------------- Captured stdout setup ---------------------------------

=== Blueprint Registration Summary ===
✅ Successful: 27
   - Authentication
   - Admin
   - Developer
   - Inventory
   - Recipes
   - Batches
   - Organization
   - Billing
   - Settings
   - Timers
   - Expiration
   - Conversion
   - Products Main
   - Product Inventory
   - Reservations
   - SKU Management
   - Product Variants
   - Product Alerts
   - Public API
   - Main API
   - Stock API
   - App Routes
   - Legal Routes
   - Bulk Stock
   - Fault Log
   - Tag Manager
   - Waitlist

🎉 All blueprints registered successfully!
---------------------------------- Captured log setup ----------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
=================================== warnings summary ===================================
tests/test_audit_canonicalization.py: 2 warnings
tests/test_auth_permissions.py: 8 warnings
tests/test_billing_and_tier_enforcement.py: 7 warnings
tests/test_expiration_canonicalization.py: 3 warnings
tests/test_google_oauth.py: 7 warnings
tests/test_inventory_comprehensive.py: 50 warnings
tests/test_inventory_fifo.py: 3 warnings
tests/test_inventory_routes_canonicalization.py: 2 warnings
tests/test_pos_integration_canonicalization.py: 1 warning
tests/test_product_sku.py: 4 warnings
tests/test_reservation_canonicalization.py: 2 warnings
tests/test_signup_tiers.py: 5 warnings
tests/test_stripe_webhooks.py: 4 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_audit_canonicalization.py: 2 warnings
tests/test_auth_permissions.py: 8 warnings
tests/test_billing_and_tier_enforcement.py: 7 warnings
tests/test_expiration_canonicalization.py: 1 warning
tests/test_google_oauth.py: 7 warnings
tests/test_inventory_comprehensive.py: 50 warnings
tests/test_inventory_fifo.py: 3 warnings
tests/test_inventory_routes_canonicalization.py: 1 warning
tests/test_pos_integration_canonicalization.py: 1 warning
tests/test_product_sku.py: 4 warnings
tests/test_reservation_canonicalization.py: 2 warnings
tests/test_signup_tiers.py: 5 warnings
tests/test_stripe_webhooks.py: 4 warnings
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/extension.py:881: SAWarning: Can't sort tables for DROP; an unresolvable foreign key dependency exists between tables: batch, product_sku; and backend does not support ALTER.  To restore at least a partial sort, apply use_alter=True to ForeignKey and ForeignKeyConstraint objects involved in the cycle to mark these as known cycles that will be ignored.
    getattr(metadata, op_name)(bind=engine)

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
  /home/runner/workspace/app/models/models.py:323: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    role = Role.query.get(assignment.role_id)

tests/test_expiration_canonicalization.py::test_expiration_service_uses_canonical_adjustment
  /home/runner/workspace/app/blueprints/expiration/services.py:545: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    entry = InventoryHistory.query.get(entry_id)

tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_inventory_fifo_sync_validation
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_complex_multi_operation_scenario
  /home/runner/workspace/app/services/inventory_adjustment/_validation.py:8: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    item = InventoryItem.query.get(item_id)

tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_item_update_with_quantity_change
tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_perishable_status_change
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/query.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    rv = self.get(ident)

tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_perishable_status_change
  /home/runner/workspace/app/blueprints/expiration/services.py:384: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    item = InventoryItem.query.get(inventory_item_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== short test summary info ================================
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_ingredient_with_initial_stock - assert False is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_product_zero_initial_stock - assert False is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_create_container_with_storage_specs - assert False is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_restock_operation - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_manual_addition - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_finished_batch_addition - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_returned_refunded_inventory - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_fifo_deduction_order - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_batch_consumption - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_spoilage_tracking - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_sales_tracking - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_quality_control_deductions - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_sampling_and_testing - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_increase - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_decrease - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_recount_to_zero - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_cost_override - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_weighted_average_cost_tracking - IndexError: list index out of range
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_perishable_item_expiration_tracking - assert False is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_expired_inventory_handling - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_inventory_reservation - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_inventory_fifo_sync_validation - assert 0.0 == 125.0
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_audit_trail_completeness - assert 0 > 0
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_insufficient_inventory_handling - AssertionError: assert (False, 'A critical internal error occurred') is False
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_canonical_service_dispatch - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_unit_conversion_edge_cases - AssertionError: assert (False, 'A critical internal error occurred') is False
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_overdraft_protection - AssertionError: assert (False, 'A critical internal error occurred') is False
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_invalid_quantity_handling - AssertionError: assert (False, 'A critical internal error occurred') is True
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_nonexistent_item_handling - AssertionError: assert (False, 'Inventory item not found') is False
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[restock-100.0-50.0-150.0] - AssertionError: Adjustment restock failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[manual_addition-100.0-25.0-125.0] - AssertionError: Adjustment manual_addition failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[returned-50.0-10.0-60.0] - AssertionError: Adjustment returned failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[refunded-50.0-5.0-55.0] - AssertionError: Adjustment refunded failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[finished_batch-0.0-48.0-48.0] - AssertionError: Adjustment finished_batch failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[use-100.0-30.0-70.0] - AssertionError: Adjustment use failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[batch-100.0-25.0-75.0] - AssertionError: Adjustment batch failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[sale-100.0-10.0-90.0] - AssertionError: Adjustment sale failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[spoil-100.0-5.0-95.0] - AssertionError: Adjustment spoil failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[trash-100.0-20.0-80.0] - AssertionError: Adjustment trash failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[expired-100.0-15.0-85.0] - AssertionError: Adjustment expired failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[damaged-100.0-2.5-97.5] - AssertionError: Adjustment damaged failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[quality_fail-100.0-3.0-97.0] - AssertionError: Adjustment quality_fail failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[sample-100.0-0.5-99.5] - AssertionError: Adjustment sample failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[tester-100.0-1.0-99.0] - AssertionError: Adjustment tester failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[gift-100.0-2.0-98.0] - AssertionError: Adjustment gift failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_foundational_adjustments_parameterized[reserved-100.0-25.0-75.0] - AssertionError: Adjustment reserved failed
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_complex_multi_operation_scenario - assert 0.0 == 890.0
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_high_volume_operations - assert 0.0 == 9500.0
FAILED tests/test_inventory_comprehensive.py::TestInventorySystemComprehensive::test_item_update_with_quantity_change - assert False is True
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_fifo_deduction_order - sqlalchemy.exc.InvalidRequestError: Instance '<InventoryItem at 0x7fe40786a5d0>' is...
FAILED tests/test_inventory_fifo.py::TestInventoryFIFOCharacterization::test_inventory_adjustment_delegates_properly - assert False is True
FAILED tests/test_pos_integration_canonicalization.py::TestPOSIntegrationCanonicalService::test_reserve_inventory_calls_canonical_service - AssertionError: assert 0 == 2
FAILED tests/test_reservation_canonicalization.py::test_credit_specific_lot_called_on_reservation_release - AttributeError: <module 'app.services.inventory_adjustment' from '/home/runner/work...
=============== 53 failed, 46 passed, 201 warnings in 189.85s (0:03:09) ================
