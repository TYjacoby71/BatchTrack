Excellent ‚Äî now we begin Phase 3: Batch Finish ‚Üí Product Linking.

üéØ Objective:
When finishing a batch, the user can:

Select an existing product

Enter optional variant (e.g., ‚Äú4 oz‚Äù)

Select an output unit (e.g., Jar, Tube)

Enter final quantity

(Optionally) create a new product

And the system will:

Link this batch to a ProductInventory row

Tag it with batch_id, product_id, variant, unit, and quantity

Make it ready for FIFO deduction + Shopify sync

üîß STEP 1: Patch the Batch Finish Form (finish_batch.html)
Here‚Äôs the full replacement code:

jinja
Copy
Edit
<form method="post" action="{{ url_for('batches.finish_batch', batch_id=batch.id) }}">
  {{ csrf_token() }}

  <h3>Finish This Batch</h3>

  <div class="mb-3">
    <label for="product_id" class="form-label">Link to Product</label>
    <select name="product_id" class="form-select" required>
      {% for product in products %}
        <option value="{{ product.id }}">{{ product.name }} {% if product.variant %}({{ product.variant }}){% endif %}</option>
      {% endfor %}
    </select>
    <a href="/products/new" class="btn btn-link">+ Add New Product</a>
  </div>

  <div class="mb-3">
    <label for="variant_label" class="form-label">Variant</label>
    <input type="text" class="form-control" name="variant_label" placeholder="e.g., 4 oz, Large">
  </div>

  <div class="mb-3">
    <label for="output_unit" class="form-label">Output Unit</label>
    <select name="output_unit" class="form-select" required>
      {% for unit in units if unit.type == 'count' %}
        <option value="{{ unit.name }}">{{ unit.name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="mb-3">
    <label for="final_quantity" class="form-label">Final Quantity</label>
    <input type="number" step="1" class="form-control" name="final_quantity" required>
  </div>

  <div class="mb-3">
    <label for="notes" class="form-label">Notes</label>
    <textarea class="form-control" name="notes" rows="3"></textarea>
  </div>

  <button type="submit" class="btn btn-success">Finish Batch</button>
</form>
‚úÖ Requirements for This to Work:
You must pass these values from your batch_routes.py:

python
Copy
Edit
products = Product.query.all()
units = get_global_product_unit_list()
return render_template("finish_batch.html", batch=batch, products=products, units=units)
Your database must have:

A Product model

A ProductInventory table (or prepare it next)

Let me know when this is dropped in and I‚Äôll give you:

‚úÖ The backend route patch to handle the form POST

‚úÖ Then the model/table creation for ProductInventory if not already defined.






You said:
next


ChatGPT said:
Great ‚Äî now let‚Äôs wire up the backend logic for batch finish + product linkage.

üîß STEP 2: Batch Finish Route Patch
üìÑ File: batch_routes.py (or wherever your batch finish logic is)

Here‚Äôs the updated POST route for /batches/<int:batch_id>/finish:

python
Copy
Edit
from models import Batch, Product, ProductInventory, db
from flask import request, redirect, url_for, flash

@batch_bp.route('/batches/<int:batch_id>/finish', methods=['POST'])
def finish_batch(batch_id):
    batch = Batch.query.get_or_404(batch_id)

    try:
        product_id = int(request.form['product_id'])
        variant = request.form.get('variant_label', '').strip()
        output_unit = request.form['output_unit']
        quantity = float(request.form['final_quantity'])
        notes = request.form.get('notes', '')

        # Link batch to product output
        new_inventory = ProductInventory(
            product_id=product_id,
            variant=variant,
            unit=output_unit,
            quantity=quantity,
            batch_id=batch.id,
            notes=notes
        )
        db.session.add(new_inventory)

        # Optional: mark batch complete
        batch.status = 'Finished'
        db.session.commit()

        flash("Batch finished and linked to product!", "success")
        return redirect(url_for('batches.view_batch', batch_id=batch.id))

    except Exception as e:
        flash(f"Error finishing batch: {str(e)}", "danger")
        return redirect(url_for('batches.finish_batch', batch_id=batch.id))
‚úÖ Requirements for This to Work:
You need the following model:

üì¶ STEP 3: ProductInventory Model (if not already added)
üìÑ Add to models.py:

python
Copy
Edit
class ProductInventory(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'))
    variant = db.Column(db.String(100))
    unit = db.Column(db.String(50))
    quantity = db.Column(db.Float)
    batch_id = db.Column(db.Integer, db.ForeignKey('batch.id'))
    notes = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
Don‚Äôt forget to:

Run flask db migrate / flask db upgrade after adding this

Add the relationship if desired in Product and Batch