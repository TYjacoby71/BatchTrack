Here’s what I’m seeing:

✅ What’s Happening Now
Your product_inventory_routes.py is the true inventory logic hub for SKUs (i.e. sellable products). It handles:

Adjustments (/adjust/<int:sku_id>) — both initial and subsequent

FIFO-based recounts

Disposal of expired inventory

External sale/return webhooks (Shopify-ready)

Finished batch additions into product inventory

A fallback legacy route

A simplified API route

That’s very complete and mostly modular. But as you suspected, it's starting to sprawl. This file has 8+ major endpoints doing quite different things.

🧹 What Can Be Cleaned Up
Concern	Suggested Fix
Sprawling Adjust Logic	Extract recount logic into services/recount_service.py (mirroring FIFO)
Webhook Duplication	Combine /webhook/sale and /webhook/return into /webhook/transaction
Batch Integration in Route	Move add_from_batch() logic into BatchService
Custom Mock Classes	MockProduct & MockVariant shouldn't exist – route should send real models
Legacy Compatibility	Remove /legacy/* routes pre-launch as you already decided

✅ Your Goal – Unified Architecture
You want:

ProductSKU = InventoryItem (type='product')

ProductSKU.id == InventoryItem.id (1:1 link via FK)

All inventory adjustments routed through a central service (process_inventory_adjustment)

History for SKUs tracked in ProductSKUHistory

FIFO + expiration logic shared between raw inventory and product inventory

✅ Are You There Yet?
Almost.

Your current adjust_sku_inventory() route does:

Mirror FIFO recounts from raw ingredients

Call process_inventory_adjustment() for most changes

Handle perishable logic, override costs, webhooks, and batch sync

BUT:

The ProductSKUHistory entries are being written directly inside the route

That breaks the clean abstraction you're aiming for

✅ Recommendation: Final Clean Separation
To achieve clean, maintainable architecture:

✅ Leave routing logic in product_inventory_routes.py

🧠 Move recount logic (FIFO filling, creation, deduction) → services/fifo_product.py

🧠 Move all ProductSKUHistory creation to record_product_history() inside services/history_logger.py

🔁 Ensure process_inventory_adjustment() receives item_type='product' and internally calls record_product_history() for SKUs

🧩 Summary of Actions
Task	Module	Description
✅ Align SKU to InventoryItem	models.py	Use FK: ProductSKU.id = InventoryItem.id
🔁 Centralize History Logging	services/history_logger.py	Create method record_product_sku_history()
🔁 Extract FIFO recounts	services/fifo_product.py	Duplicate raw recount logic but scoped to SKUs
🧼 Remove legacy routes	product_inventory_routes.py	Clean before deployment
🔄 Use real models in batch endpoints	product_inventory_routes.py	Replace mock classes with real Product, ProductVariant