‚úÖ The batch completion logic is now fixed. Here's what the update includes and what to give the Replit assistant:

üßæ Replit Assistant Code Batch: Product vs Inventory Fix + Notes
üîÅ 1. Edit routes/batches.py
Replace your existing /batches/finish/<batch_id> route with this:
python
Copy
Edit
@batches_bp.route('/batches/finish/<batch_id>', methods=["GET", "POST"])
def finish_batch(batch_id):
    from unit_converter import convert_units
    from datetime import datetime

    data = load_data()
    batches = data.get("batches", [])
    inventory = data.get("ingredients", [])
    products = data.setdefault("products", [])
    recipes = data.get("recipes", [])

    batch_id = int(batch_id)
    if batch_id >= len(batches):
        return "Batch not found", 404

    batch = batches[batch_id]
    recipe = next((r for r in recipes if r["name"] == batch.get("recipe_name")), None)

    if request.method == "POST":
        batch_type = request.form.get("batch_type")
        success = request.form.get("success")
        notes = request.form.get("notes")
        yield_qty = float(request.form.get("yield_qty"))
        yield_unit = request.form.get("yield_unit")

        batch.update({
            "completed": True,
            "batch_type": batch_type,
            "success": success,
            "notes": notes,
            "yield_qty": yield_qty,
            "yield_unit": yield_unit
        })

        if success == "yes" and recipe:
            for ingredient in recipe["ingredients"]:
                ing_name = ingredient["name"]
                req_qty = float(ingredient["quantity"])
                req_unit = ingredient.get("unit", "").lower().strip()

                match = next((i for i in inventory if i["name"].lower() == ing_name.lower()), None)
                if match:
                    inv_unit = match.get("unit", "").lower().strip()
                    inv_qty = float(match["quantity"])
                    if inv_unit != req_unit:
                        converted = convert_units(req_qty, req_unit, inv_unit)
                        if converted is not None:
                            req_qty = converted
                        else:
                            continue
                    match["quantity"] = max(inv_qty - req_qty, 0)

            if batch_type == "product":
                products.append({
                    "product": batch["recipe_name"],
                    "yield": yield_qty,
                    "unit": yield_unit,
                    "notes": notes,
                    "label_info": request.form.get("label_info", ""),
                    "timestamp": datetime.now().isoformat(),
                    "quantity_available": int(yield_qty),
                    "events": []
                })
            elif batch_type == "inventory":
                inv_item = {
                    "name": batch["recipe_name"],
                    "quantity": yield_qty,
                    "unit": yield_unit,
                    "cost_per_unit": 0,
                }
                inventory.append(inv_item)

        save_data(data)
        return redirect("/batches")

    return render_template("finish_batch.html", batch=batch, batch_id=batch_id)
‚úÖ This Fixes:
‚ùå Wrong inventory update when product batch completed

‚úÖ Adds to /products instead of ingredients when needed

‚úÖ Supports unit conversion on deduction

‚úÖ Adds notes, yield, and success outcome to batch metadata

