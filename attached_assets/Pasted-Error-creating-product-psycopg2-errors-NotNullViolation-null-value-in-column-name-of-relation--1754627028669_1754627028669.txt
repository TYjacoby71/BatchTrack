Error creating product: (psycopg2.errors.NotNullViolation) null value in column "name" of relation "product_sku" violates not-null constraint DETAIL: Failing row contains (1, 1, APP-BAS-BUL-7AE52410, null, null, null, null, null, null, 10, 10, t, 2025-08-08 04:21:06.619415, 2025-08-08 04:21:06.619419, 1, Bulk, null, floz, 0, null, null, null, null, null, null, null, null, null, t, f, 11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, f, null). [SQL: INSERT INTO product_sku (inventory_item_id, product_id, variant_id, size_label, sku_code, sku_name, unit, low_stock_threshold, fifo_id, batch_id, container_id, retail_price, wholesale_price, profit_margin_target, category, subcategory, tags, description, is_active, is_product_active, is_discontinued, created_at, updated_at, created_by, supplier_name, supplier_sku, supplier_cost, weight, weight_unit, dimensions, barcode, upc, quality_status, compliance_status, quality_checked_by, quality_checked_at, location_id, location_name, temperature_at_time, shopify_product_id, shopify_variant_id, etsy_listing_id, amazon_asin, marketplace_sync_status, marketplace_last_sync, expiration_date, is_perishable, shelf_life_days, organization_id) VALUES (%(inventory_item_id)s, %(product_id)s, %(variant_id)s, %(size_label)s, %(sku_code)s, %(sku_name)s, %(unit)s, %(low_stock_threshold)s, %(fifo_id)s, %(batch_id)s, %(container_id)s, %(retail_price)s, %(wholesale_price)s, %(profit_margin_target)s, %(category)s, %(subcategory)s, %(tags)s, %(description)s, %(is_active)s, %(is_product_active)s, %(is_discontinued)s, %(created_at)s, %(updated_at)s, %(created_by)s, %(supplier_name)s, %(supplier_sku)s, %(supplier_cost)s, %(weight)s, %(weight_unit)s, %(dimensions)s, %(barcode)s, %(upc)s, %(quality_status)s, %(compliance_status)s, %(quality_checked_by)s, %(quality_checked_at)s, %(location_id)s, %(location_name)s, %(temperature_at_time)s, %(shopify_product_id)s, %(shopify_variant_id)s, %(etsy_listing_id)s, %(amazon_asin)s, %(marketplace_sync_status)s, %(marketplace_last_sync)s, %(expiration_date)s, %(is_perishable)s, %(shelf_life_days)s, %(organization_id)s)] [parameters: {'inventory_item_id': 10, 'product_id': 1, 'variant_id': 1, 'size_label': 'Bulk', 'sku_code': 'APP-BAS-BUL-7AE52410', 'sku_name': None, 'unit': 'floz', 'low_stock_threshold': 0, 'fifo_id': None, 'batch_id': None, 'container_id': None, 'retail_price': None, 'wholesale_price': None, 'profit_margin_target': None, 'category': None, 'subcategory': None, 'tags': None, 'description': None, 'is_active': True, 'is_product_active': True, 'is_discontinued': False, 'created_at': datetime.datetime(2025, 8, 8, 4, 21, 6, 619415), 'updated_at': datetime.datetime(2025, 8, 8, 4, 21, 6, 619419), 'created_by': 11, 'supplier_name': None, 'supplier_sku': None, 'supplier_cost': None, 'weight': None, 'weight_unit': None, 'dimensions': None, 'barcode': None, 'upc': None, 'quality_status': None, 'compliance_status': None, 'quality_checked_by': None, 'quality_checked_at': None, 'location_id': None, 'location_name': None, 'temperature_at_time': None, 'shopify_product_id': None, 'shopify_variant_id': None, 'etsy_listing_id': None, 'amazon_asin': None, 'marketplace_sync_status': None, 'marketplace_last_sync': None, 'expiration_date': None, 'is_perishable': False, 'shelf_life_days': None, 'organization_id': 10}] (Background on this error at: https://sqlalche.me/e/20/gkpj)

error making product


ChatGPT said:

Thought for 12s
You’ve got a schema/model mismatch.

Postgres is yelling that product_sku.name is NOT NULL, but your INSERT isn’t supplying a value for that column. In your payload you have sku_name=None, and your SQL doesn’t mention a column called name at all — so the table likely still has a name column from an older migration, while your SQLAlchemy model/code was refactored to use sku_name.

What’s happening
Table has: name TEXT NOT NULL.

Your insert has: sku_name (NULL) and no name.

Postgres enforces name IS NOT NULL → boom.

Quick triage (pick one)
A) Fast code hotfix (no migration)
Until you fix the schema, map your ORM field to the existing DB column:

python
Copy
Edit
# models/product_sku.py
class ProductSKU(db.Model):
    __tablename__ = 'product_sku'
    # keep the DB column named 'name', expose it in Python as 'sku_name'
    sku_name = db.Column('name', db.String(255), nullable=False)
    # ...rest of fields...
And when creating a SKU, always set a value:

python
Copy
Edit
sku_name = incoming_sku_name or build_sku_name(product, variant, size_label) or sku_code
(This gets you unblocked immediately.)

B) Proper DB migration (recommended)
If you intended to rename name → sku_name, do it properly with Alembic:

1) Rename the column:

sql
Copy
Edit
ALTER TABLE product_sku RENAME COLUMN name TO sku_name;
2) Ensure NOT NULL + maybe a default (temporarily):

sql
Copy
Edit
ALTER TABLE product_sku ALTER COLUMN sku_name SET DEFAULT 'Unnamed SKU';
UPDATE product_sku SET sku_name = sku_code WHERE sku_name IS NULL OR sku_name = '';
ALTER TABLE product_sku ALTER COLUMN sku_name DROP DEFAULT;
ALTER TABLE product_sku ALTER COLUMN sku_name SET NOT NULL;
Alembic example:

python
Copy
Edit
def upgrade():
    op.alter_column('product_sku', 'name', new_column_name='sku_name', existing_type=sa.String(length=255))
    op.execute("UPDATE product_sku SET sku_name = COALESCE(NULLIF(sku_name, ''), sku_code)")
    op.alter_column('product_sku', 'sku_name', nullable=False)

def downgrade():
    op.alter_column('product_sku', 'sku_name', new_column_name='name', existing_type=sa.String(length=255))
Then keep your model with sku_name = Column(String, nullable=False).

Also: backfill logic when creating SKUs
Given your SKU is the product endpoint (parent + variant + size), generate a human name automatically so you’re never null:

python
Copy
Edit
def build_sku_name(product, variant, size_label):
    parts = [
        (product.name if product else None),
        (variant.name if variant and variant.name.lower() != 'base' else None),
        (size_label if size_label and size_label.lower() != 'n/a' else None),
    ]
    return " ".join(p for p in parts if p)
Usage in your create route/service:

python
Copy
Edit
sku_name = payload.get('sku_name')
if not sku_name:
    sku_name = build_sku_name(product, variant, payload.get('size_label')) or payload.get('sku_code')