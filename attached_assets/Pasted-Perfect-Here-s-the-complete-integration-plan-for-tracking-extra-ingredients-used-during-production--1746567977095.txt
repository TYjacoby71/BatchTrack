Perfect. Here's the complete integration plan for tracking extra ingredients used during production â€” directly and cleanly inside your app structure.

âœ… 1. New Model (Add to models.py)
python
Copy
Edit
class ExtraBatchIngredient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    batch_id = db.Column(db.Integer, db.ForeignKey('batch.id'), nullable=False)
    inventory_item_id = db.Column(db.Integer, db.ForeignKey('inventory_item.id'), nullable=False)
    quantity = db.Column(db.Float, nullable=False)
    unit = db.Column(db.String(32), nullable=False)
    cost_per_unit = db.Column(db.Float, nullable=True)

    batch = db.relationship('Batch', backref='extra_ingredients')
    ingredient = db.relationship('InventoryItem')
âœ… 2. New Route in routes/batches.py (or wherever you define batch logic)
python
Copy
Edit
@batch_bp.route("/batches/<int:batch_id>/extras", methods=["POST"])
def save_extra_ingredients(batch_id):
    batch = Batch.query.get_or_404(batch_id)
    extras = request.get_json().get("extras", [])
    
    # Clear previous extras
    ExtraBatchIngredient.query.filter_by(batch_id=batch.id).delete()

    # Add new ones
    for item in extras:
        new_extra = ExtraBatchIngredient(
            batch_id=batch.id,
            inventory_item_id=item["ingredient_id"],
            quantity=item["quantity"],
            unit=item["unit"],
            cost_per_unit=item.get("cost_per_unit", 0.0)
        )
        db.session.add(new_extra)

    db.session.commit()
    return jsonify({"status": "success"})
âœ… 3. Update batch_in_progress.html
Right below your ingredient section:

html
Copy
Edit
<h4>Extra Ingredients Used</h4>
<div id="extra-ingredients-container"></div>
<button type="button" class="btn btn-sm btn-secondary" onclick="addExtraIngredientRow()">âž• Add Extra Ingredient</button>
<button type="button" class="btn btn-primary" onclick="saveExtras()">ðŸ’¾ Save Extras</button>
âœ… 4. JS for Dynamic Input + Save Logic (Add to your static/js/batches.js or inline)
html
Copy
Edit
<script>
function addExtraIngredientRow() {
    const row = document.createElement('div');
    row.classList.add('extra-row');
    row.innerHTML = `
        <select class="form-select ingredient-select">
            {% for ing in all_ingredients %}
                <option value="{{ ing.id }}">{{ ing.name }}</option>
            {% endfor %}
        </select>
        <input type="number" class="form-control qty" placeholder="Quantity" step="0.01" />
        <select class="form-select unit">
            {% for unit in inventory_units %}
                <option value="{{ unit.name }}">{{ unit.name }}</option>
            {% endfor %}
        </select>
        <input type="number" class="form-control cost" placeholder="Cost per unit" step="0.01" />
        <button class="btn btn-danger btn-sm" onclick="this.parentElement.remove()">Remove</button>
    `;
    document.getElementById("extra-ingredients-container").appendChild(row);
}

function saveExtras() {
    const rows = document.querySelectorAll(".extra-row");
    const extras = Array.from(rows).map(row => ({
        ingredient_id: row.querySelector(".ingredient-select").value,
        quantity: parseFloat(row.querySelector(".qty").value),
        unit: row.querySelector(".unit").value,
        cost_per_unit: parseFloat(row.querySelector(".cost").value)
    }));

    fetch(`/batches/{{ batch.id }}/extras`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ extras })
    })
    .then(res => res.json())
    .then(data => alert("Extras saved."))
    .catch(err => console.error(err));
}
</script>
âœ… 5. Display in view_batch.html or Summary Page
jinja2
Copy
Edit
{% if batch.extra_ingredients %}
<h4>Extra Ingredients Used:</h4>
<table class="table">
  <thead><tr><th>Name</th><th>Qty</th><th>Unit</th><th>Cost/Unit</th></tr></thead>
  <tbody>
    {% for x in batch.extra_ingredients %}
    <tr>
      <td>{{ x.ingredient.name }}</td>
      <td>{{ x.quantity }}</td>
      <td>{{ x.unit }}</td>
      <td>${{ x.cost_per_unit }}</td>
    </tr>
    {% endfor %}
  </tbody>
</table>
{% endif %}
âœ… 6. Update Batch Cost Calculation
Wherever batch cost is calculated, include:

python
Copy
Edit
extras = ExtraBatchIngredient.query.filter_by(batch_id=batch.id).all()
extra_cost = sum(x.quantity * (x.cost_per_unit or 0) for x in extras)
total_cost += extra_cost
âœ… Final Tip
Add the model and route first. Then request a fresh migration or DB reset. After that, wire up the HTML+JS.

Would you like me to generate these patches for you to directly paste into your code? 







