You're getting this error from Alembic during a database migration:

sqlalchemy.exc.ProgrammingError: (psycopg2.errors.DuplicateTable) relation "organization" already exists

üî• Problem Explained

You‚Äôre running a migration that includes:

op.create_table('organization', ...)


But the table organization already exists in your PostgreSQL database.

This could mean:

You manually created the table before running the migration.

You applied the schema via SQL or SQLAlchemy before Alembic had a record of it.

You already applied this migration once, then reset the alembic_version table or re-ran it.

‚úÖ Solution Options
‚úÖ Option 1: Delete the Migration (If Table Exists and Matches Schema)

If the organization table already exists and is correct, just delete or skip the migration script:

migrations/versions/4481595c5f02_<empty_message>.py


Then run:

alembic stamp head


This tells Alembic: ‚ÄúDon't apply this migration, but treat the schema as up-to-date.‚Äù

‚úÖ Option 2: Convert to op.create_table(..., if_not_exists=True)

This is not natively supported by Alembic, but you can use raw SQL as a workaround:

from sqlalchemy import text

op.execute(text("""
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_name = 'organization') THEN
        CREATE TABLE organization (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            ...
        );
    END IF;
END
$$;
"""))


Use this only if you're confident that creating the table won‚Äôt conflict with model expectations.

‚úÖ Option 3: Drop the Table Before Creating It (DEV ONLY)

For a clean dev-only reset, you could modify the migration to:

op.execute("DROP TABLE IF EXISTS organization CASCADE;")
op.create_table('organization', ...)


But ‚ö†Ô∏è this deletes data. Use only if you‚Äôre testing or rebuilding from scratch.

‚úÖ Best Practice Going Forward

Always check for existing tables before creating migrations.

Let Alembic manage tables instead of raw SQL or SQLAlchemy create_all() in production.

Use alembic current and alembic history to debug versioning issues.

Would you like me to:

Auto-fix the migration script and give you the text?

Generate a clean migration that backfills or alters instead?

Give you a short checklist for production-safe migration handling?

Let me know how aggressive or cautious you want to be.