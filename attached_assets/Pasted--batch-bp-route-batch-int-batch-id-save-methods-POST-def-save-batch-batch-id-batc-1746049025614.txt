@batch_bp.route('/batch/<int:batch_id>/save', methods=['POST'])
def save_batch(batch_id):
    batch = Batch.query.get_or_404(batch_id)
    if batch.status != 'in_progress':
        flash("Only in-progress batches can be saved.")
        return redirect(f'/batch/in-progress/{batch_id}')

    # Save basic metadata
    batch.notes = request.form.get("notes")
    batch.tags = request.form.get("tags")
    batch.yield_amount = request.form.get("yield_amount")
    batch.yield_unit = request.form.get("yield_unit")
    batch.final_quantity = request.form.get("final_quantity")
    batch.output_unit = request.form.get("output_unit")
    batch.product_id = request.form.get("product_id")
    batch.variant_id = request.form.get("variant_id")

    # === Ingredients ===
    db.session.query(BatchIngredient).filter_by(batch_id=batch_id).delete()
    for key in request.form:
        if key.startswith("ingredients[") and key.endswith("][id]"):
            base = key[:-4]  # Strip "][id]"
            ing_id = int(request.form.get(f"{base}][id]"))
            amount = float(request.form.get(f"{base}][amount]", 0))
            unit = request.form.get(f"{base}][unit]", 'count')
            db.session.add(BatchIngredient(batch_id=batch_id, ingredient_id=ing_id, amount_used=amount, unit=unit))

    # === Containers ===
    db.session.query(BatchContainer).filter_by(batch_id=batch_id).delete()
    for key in request.form:
        if key.startswith("containers[") and key.endswith("][id]"):
            base = key[:-4]
            cont_id = int(request.form.get(f"{base}][id]"))
            qty = int(request.form.get(f"{base}][qty]", 0))
            cost = float(request.form.get(f"{base}][cost_each]", 0))
            db.session.add(BatchContainer(batch_id=batch_id, container_id=cont_id, quantity_used=qty, cost_each=cost))

    # === Timers ===
    db.session.query(BatchTimer).filter_by(batch_id=batch_id).delete()
    for key in request.form:
        if key.startswith("timers[") and key.endswith("][name]"):
            base = key[:-6]
            name = request.form.get(f"{base}][name]")
            duration = int(request.form.get(f"{base}][duration_seconds]", 0))
            db.session.add(BatchTimer(batch_id=batch_id, name=name, duration_seconds=duration))

    db.session.commit()
    flash("Batch progress saved.")
    return redirect(f"/batch/in-progress/{batch_id}")