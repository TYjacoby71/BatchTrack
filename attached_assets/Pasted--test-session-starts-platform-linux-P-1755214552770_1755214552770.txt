============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
collected 7 items                                                              

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling PASSED [ 14%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] FAILED [ 28%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] FAILED [ 42%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] FAILED [ 57%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] FAILED [ 71%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing FAILED [ 85%]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade PASSED [100%]

=================================== FAILURES ===================================
__ TestBillingAndTierEnforcement.test_billing_status_enforcement[active-200] ___

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7fe02d192790>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User testuser>, billing_status = 'active'
expected_status_code = 200

    @pytest.mark.parametrize("billing_status, expected_status_code", [
        ('active', 200),
        ('past_due', 302),
        ('suspended', 302),
        ('canceled', 302),
    ])
    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE
            # Update the user's organization with the test billing status
            org = test_user.organization
            org.billing_status = billing_status
            db.session.commit()
    
            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200
    
            # ACT
            # Log the user in and try to access the protected route
            with client:
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(test_user.id)
                    sess['_fresh'] = True
    
>               response = client.get('/_protected_dashboard')

tests/test_billing_and_tier_enforcement.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
.pythonlibs/lib/python3.11/site-packages/flask/testing.py:235: in open
    response = super().open(
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:915: in full_dispatch_request
    rv = self.preprocess_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1291: in preprocess_request
    rv = self.ensure_sync(before_func)()
app/middleware.py:126: in _enforce_billing_access
    has_access, reason = AuthorizationHierarchy.check_organization_access(current_user.organization)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

organization = <Organization 2>

    @staticmethod
    def check_organization_access(organization):
        """Check if organization has valid access based on subscription and billing status"""
        if not organization:
            return False, "No organization found"
    
        # Exempt organizations always have access
        if organization.effective_subscription_tier == 'exempt':
            return True, "Exempt organization"
    
        # Check subscription tier exists and is valid
        if not organization.tier:
            return False, "No valid subscription tier"
    
        # Check if tier is available and customer-facing
        if not organization.tier.is_available:
            return False, "Subscription tier is not available"
    
        # For billing-required tiers, check billing status
>       if organization.tier.requires_stripe_billing or organization.tier.requires_whop_billing:
E       AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe_billing'

app/utils/authorization.py:204: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_ TestBillingAndTierEnforcement.test_billing_status_enforcement[past_due-302] __

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7fe02d307f10>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User testuser>, billing_status = 'past_due'
expected_status_code = 302

    @pytest.mark.parametrize("billing_status, expected_status_code", [
        ('active', 200),
        ('past_due', 302),
        ('suspended', 302),
        ('canceled', 302),
    ])
    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE
            # Update the user's organization with the test billing status
            org = test_user.organization
            org.billing_status = billing_status
            db.session.commit()
    
            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200
    
            # ACT
            # Log the user in and try to access the protected route
            with client:
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(test_user.id)
                    sess['_fresh'] = True
    
>               response = client.get('/_protected_dashboard')

tests/test_billing_and_tier_enforcement.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
.pythonlibs/lib/python3.11/site-packages/flask/testing.py:235: in open
    response = super().open(
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:915: in full_dispatch_request
    rv = self.preprocess_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1291: in preprocess_request
    rv = self.ensure_sync(before_func)()
app/middleware.py:126: in _enforce_billing_access
    has_access, reason = AuthorizationHierarchy.check_organization_access(current_user.organization)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

organization = <Organization 2>

    @staticmethod
    def check_organization_access(organization):
        """Check if organization has valid access based on subscription and billing status"""
        if not organization:
            return False, "No organization found"
    
        # Exempt organizations always have access
        if organization.effective_subscription_tier == 'exempt':
            return True, "Exempt organization"
    
        # Check subscription tier exists and is valid
        if not organization.tier:
            return False, "No valid subscription tier"
    
        # Check if tier is available and customer-facing
        if not organization.tier.is_available:
            return False, "Subscription tier is not available"
    
        # For billing-required tiers, check billing status
>       if organization.tier.requires_stripe_billing or organization.tier.requires_whop_billing:
E       AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe_billing'

app/utils/authorization.py:204: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_ TestBillingAndTierEnforcement.test_billing_status_enforcement[suspended-302] _

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7fe02d304190>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User testuser>, billing_status = 'suspended'
expected_status_code = 302

    @pytest.mark.parametrize("billing_status, expected_status_code", [
        ('active', 200),
        ('past_due', 302),
        ('suspended', 302),
        ('canceled', 302),
    ])
    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE
            # Update the user's organization with the test billing status
            org = test_user.organization
            org.billing_status = billing_status
            db.session.commit()
    
            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200
    
            # ACT
            # Log the user in and try to access the protected route
            with client:
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(test_user.id)
                    sess['_fresh'] = True
    
>               response = client.get('/_protected_dashboard')

tests/test_billing_and_tier_enforcement.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
.pythonlibs/lib/python3.11/site-packages/flask/testing.py:235: in open
    response = super().open(
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:915: in full_dispatch_request
    rv = self.preprocess_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1291: in preprocess_request
    rv = self.ensure_sync(before_func)()
app/middleware.py:126: in _enforce_billing_access
    has_access, reason = AuthorizationHierarchy.check_organization_access(current_user.organization)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

organization = <Organization 2>

    @staticmethod
    def check_organization_access(organization):
        """Check if organization has valid access based on subscription and billing status"""
        if not organization:
            return False, "No organization found"
    
        # Exempt organizations always have access
        if organization.effective_subscription_tier == 'exempt':
            return True, "Exempt organization"
    
        # Check subscription tier exists and is valid
        if not organization.tier:
            return False, "No valid subscription tier"
    
        # Check if tier is available and customer-facing
        if not organization.tier.is_available:
            return False, "Subscription tier is not available"
    
        # For billing-required tiers, check billing status
>       if organization.tier.requires_stripe_billing or organization.tier.requires_whop_billing:
E       AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe_billing'

app/utils/authorization.py:204: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_ TestBillingAndTierEnforcement.test_billing_status_enforcement[canceled-302] __

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7fe02d307210>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>
test_user = <User testuser>, billing_status = 'canceled'
expected_status_code = 302

    @pytest.mark.parametrize("billing_status, expected_status_code", [
        ('active', 200),
        ('past_due', 302),
        ('suspended', 302),
        ('canceled', 302),
    ])
    def test_billing_status_enforcement(self, app, client, test_user, billing_status, expected_status_code):
        """
        Tests that the billing middleware blocks access for non-active billing statuses.
        """
        with app.app_context():
            # ARRANGE
            # Update the user's organization with the test billing status
            org = test_user.organization
            org.billing_status = billing_status
            db.session.commit()
    
            # Create a simple protected route to test against
            @app.route('/_protected_dashboard')
            def _protected_dashboard():
                return "Welcome to the dashboard", 200
    
            # ACT
            # Log the user in and try to access the protected route
            with client:
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(test_user.id)
                    sess['_fresh'] = True
    
>               response = client.get('/_protected_dashboard')

tests/test_billing_and_tier_enforcement.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
.pythonlibs/lib/python3.11/site-packages/flask/testing.py:235: in open
    response = super().open(
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.pythonlibs/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
.pythonlibs/lib/python3.11/site-packages/flask/app.py:915: in full_dispatch_request
    rv = self.preprocess_request()
.pythonlibs/lib/python3.11/site-packages/flask/app.py:1291: in preprocess_request
    rv = self.ensure_sync(before_func)()
app/middleware.py:126: in _enforce_billing_access
    has_access, reason = AuthorizationHierarchy.check_organization_access(current_user.organization)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

organization = <Organization 2>

    @staticmethod
    def check_organization_access(organization):
        """Check if organization has valid access based on subscription and billing status"""
        if not organization:
            return False, "No organization found"
    
        # Exempt organizations always have access
        if organization.effective_subscription_tier == 'exempt':
            return True, "Exempt organization"
    
        # Check subscription tier exists and is valid
        if not organization.tier:
            return False, "No valid subscription tier"
    
        # Check if tier is available and customer-facing
        if not organization.tier.is_available:
            return False, "Subscription tier is not available"
    
        # For billing-required tiers, check billing status
>       if organization.tier.requires_stripe_billing or organization.tier.requires_whop_billing:
E       AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe_billing'

app/utils/authorization.py:204: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
_ TestBillingAndTierEnforcement.test_developer_can_masquerade_regardless_of_billing _

self = <tests.test_billing_and_tier_enforcement.TestBillingAndTierEnforcement object at 0x7fe02d2fc850>
app = <Flask 'app'>, client = <FlaskClient <Flask 'app'>>

    def test_developer_can_masquerade_regardless_of_billing(self, app, client):
        """
        Tests that developers can access customer data even if billing is bad.
        """
        with app.app_context():
            # ARRANGE: Create a developer user (NO organization)
            developer = User(
                email='dev@batchtrack.com',
                username='developer',
                user_type='developer',
                organization_id=None  # Developers have no organization
            )
            db.session.add(developer)
    
            # Create a customer org with bad billing
            customer_tier = SubscriptionTier(
                name='Pro',
                key='pro'
            )
            db.session.add(customer_tier)
            db.session.flush()  # Get the ID
    
            customer_org = Organization(
                name='Customer Org',
                subscription_tier_id=customer_tier.id,
                billing_status='past_due'  # Bad billing
            )
            db.session.add(customer_org)
            db.session.flush()  # Get the ID
    
            customer = User(
                email='customer@example.com',
                username='customer',
                organization=customer_org
            )
            db.session.add(customer)
            db.session.commit()
    
            # Create protected route
            @app.route('/_masquerade_test')
            def _masquerade_test():
                return "Developer access granted", 200
    
            # ACT: Developer accesses customer route
            with client:
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(developer.id)
                    sess['_fresh'] = True
                    sess['masquerade_org_id'] = customer_org.id  # Masquerading
    
                response = client.get('/_masquerade_test')
    
                # ASSERT: Developer should have access despite customer's bad billing
>               assert response.status_code == 200
E               assert 302 == 200
E                +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_billing_and_tier_enforcement.py:162: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     app:unit_utils.py:28 BatchTrack startup
=============================== warnings summary ===============================
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302]
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_complete_security_cascade
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py:333: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_tier_permission_is_the_hard_ceiling
  /home/runner/workspace/app/models/models.py:325: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    role = Role.query.get(assignment.role_id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[active-200] - AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe...
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[past_due-302] - AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe...
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[suspended-302] - AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe...
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_billing_status_enforcement[canceled-302] - AttributeError: 'SubscriptionTier' object has no attribute 'requires_stripe...
FAILED tests/test_billing_and_tier_enforcement.py::TestBillingAndTierEnforcement::test_developer_can_masquerade_regardless_of_billing - assert 302 == 200
=================== 5 failed, 2 passed, 9 warnings in 12.38s ===================
