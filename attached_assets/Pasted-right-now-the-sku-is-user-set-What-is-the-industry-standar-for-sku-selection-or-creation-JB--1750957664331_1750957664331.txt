right now the sku is user set. What is the industry standar for sku selection or creation?

JB

jacoby72
Assistant
8 minutes ago
In industry standards, SKU (Stock Keeping Unit) selection or creation typically follows certain principles to ensure consistency, accuracy, and efficiency in inventory management:

Uniqueness: Each SKU should represent a unique item, distinguishing it from all other items in inventory. Avoid duplicating SKUs.

Logical Structure: Develop a systematic format that makes it easy to derive information from the SKU. For example, using segments or components that indicate product type, size, and variant can be helpful.

Human-Readable: Although SKUs can be alphanumeric, keeping them somewhat human-readable helps with ease of use. For example, a SKU like "AP-4OZ-ORG" could indicate "Apple Juice, 4 oz, Organic".

Length: Keep SKUs to a manageable length. Too long SKUs can lead to errors during input and scanning.

No Special Characters: To avoid confusion in databases and systems, avoid using special characters that are not easily interpretable or may cause issues in searches.

Prefix/Suffix Usage: Implement prefixes or suffixes to indicate product categories or variants, which helps in grouping items in systems and reporting.

Automated Generation: Use algorithms or systems to automatically generate SKUs based on a set template or rule to minimize human error.

Here's an example of how you might implement an SKU generation function in your existing ProductService class, based on a structured naming convention:

import random
import string
class ProductService:
    # Existing methods...
    @staticmethod
    def generate_sku(product_name: str, variant_name: str, size_label: str) -> str:
        """Generate a unique SKU based on product details"""
        
        # Create a base SKU part from the product name and variant name
        base_sku = f"{product_name[:3].upper()}-{variant_name[:2].upper()}-{size_label[:3].upper()}"
        
        # Add a random 4-digit number to ensure uniqueness
        random_suffix = ''.join(random.choices(string.digits, k=4))
        
        return f"{base_sku}-{random_suffix}"
# Example usage:
# sku = ProductService.generate_sku("Apple Juice", "4oz", "Bottle")
# This might generate a SKU "APP-4O-BOT-1234"
You can replace the SKU generation logic in your existing get_or_create_sku method in your ProductService class to utilize this generate_sku method when a new SKU is created automatically. That ensures consistency across your inventory items.

I like the idea of an automatically created sku. derived from pars of the product name, the variant name, and the size. and then a number if those all match still

how does that sound?

JB

jacoby72
Assistant
just now
Your idea for automatically creating SKU codes derived from parts of the product name, variant name, and size sounds great! This method will help maintain a consistent and structured format for SKUs, making inventory management more efficient.

Here's how you could implement the SKU creation logic based on your description:

Use parts of the product name, variant name, and size label to form the base SKU.
Add a unique number at the end if a SKU with the same components already exists.
Here's an updated version of the get_or_create_sku method to incorporate this logic:

@staticmethod
def get_or_create_sku(product_name, variant_name, size_label, unit=None, sku_code=None, variant_description=None):
    """Get existing SKU or create new one with automatic SKU generation"""
    # Check if SKU already exists
    sku = ProductSKU.query.filter_by(
        product_name=product_name,
        variant_name=variant_name,
        size_label=size_label
    ).first()
    if sku:
        return sku
    # Generate base SKU from components
    base_sku = f"{product_name[:3].upper()}-{variant_name[:2].upper()}-{size_label[:3].upper()}"
    
    # Check for uniqueness by querying for existing SKUs with the same base
    count = 1
    unique_sku_code = base_sku
    while ProductSKU.query.filter(ProductSKU.sku_code == unique_sku_code).first():
        unique_sku_code = f"{base_sku}-{count}"
        count += 1
    
    # Get product base unit from existing SKUs
    existing_sku = ProductSKU.query.filter_by(product_name=product_name).first()
    product_base_unit = existing_sku.product_base_unit if existing_sku else (unit or 'g')
    # Create new SKU
    sku = ProductSKU(
        product_name=product_name,
        product_base_unit=product_base_unit,
        variant_name=variant_name,
        size_label=size_label,
        unit=unit or product_base_unit,
        sku_code=unique_sku_code,
        variant_description=variant_description
    )
    db.session.add(sku)
    db.session.flush()
    return sku
Changes Made:
Added a base SKU generation logic that concatenates parts of the product name, variant name, and size label.
Checks if the generated SKU code already exists and appends a count to ensure uniqueness.
This implementation will ensure that you have well-structured, unique SKUs that are easy to manage and identify. Would you like to proceed with this implementation?