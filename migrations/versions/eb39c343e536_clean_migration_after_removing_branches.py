"""Clean migration after removing branches

Revision ID: eb39c343e536
Revises: 3478c1df1783
Create Date: 2025-07-07 20:46:34.934821

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'eb39c343e536'
down_revision = '3478c1df1783'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, check if we have data in product_sku_history that needs to be migrated
    connection = op.get_bind()
    
    # Check if there are NULL inventory_item_id values
    result = connection.execute(sa.text("SELECT COUNT(*) FROM product_sku_history WHERE inventory_item_id IS NULL"))
    null_count = result.scalar()
    
    if null_count > 0:
        print(f"Found {null_count} rows with NULL inventory_item_id. Deleting them as they represent invalid data.")
        # Delete rows with NULL inventory_item_id as they represent invalid/orphaned data
        connection.execute(sa.text("DELETE FROM product_sku_history WHERE inventory_item_id IS NULL"))
    
    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        # Only drop the id column if it exists
        try:
            batch_op.drop_column('id')
        except:
            pass  # Column may already be dropped

    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        # Now it's safe to set NOT NULL since we cleaned up the data
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        
        # Handle index drops safely
        try:
            batch_op.drop_index('idx_sku_remaining')
        except:
            pass
        try:
            batch_op.drop_index('idx_sku_timestamp')
        except:
            pass
            
        batch_op.create_index('idx_inventory_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_item_timestamp', ['inventory_item_id', 'timestamp'], unique=False)
        
        # Drop sku_id column if it exists
        try:
            batch_op.drop_column('sku_id')
        except:
            pass  # Column may already be dropped

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Downgrade may not work perfectly due to data structure changes
    # This is primarily for reference
    
    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sku_id', sa.INTEGER(), nullable=True))  # Allow NULL initially
        
        try:
            batch_op.drop_index('idx_inventory_item_timestamp')
        except:
            pass
        try:
            batch_op.drop_index('idx_inventory_item_remaining')
        except:
            pass
            
        batch_op.create_index('idx_sku_timestamp', ['sku_id', 'timestamp'], unique=False)
        batch_op.create_index('idx_sku_remaining', ['sku_id', 'remaining_quantity'], unique=False)
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), nullable=True))  # Allow NULL initially

    # ### end Alembic commands ###
