"""0001 base schema (tables only)

RUNBOOK:
Dev (SQLite)
    export DATABASE_URL="sqlite:///app_dev.db"
    flask db upgrade
    SEED_PRESETS=1 flask db upgrade  # to apply seeds only

Render (Postgres)
    export DATABASE_URL="<render-url>"
    flask db upgrade

Nuke + rebuild (danger!)
    psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public; GRANT ALL ON SCHEMA public TO public;"
    flask db upgrade

Revision ID: 0001_base_schema
Revises: 
Create Date: 2025-10-21 20:24:37.172230

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0001_base_schema'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('addon',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('permission_name', sa.String(length=128), nullable=True),
    sa.Column('function_key', sa.String(length=64), nullable=True),
    sa.Column('retention_extension_days', sa.Integer(), nullable=True),
    sa.Column('billing_type', sa.String(length=32), nullable=False),
    sa.Column('stripe_lookup_key', sa.String(length=128), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )


    op.create_table('developer_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('developer_role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=32), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('feature_flag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=128), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False, server_default=sa.false()),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('feature_flag', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_feature_flag_key'), ['key'], unique=True)

    op.create_table('permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('pricing_snapshots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stripe_price_id', sa.String(length=128), nullable=False),
    sa.Column('stripe_lookup_key', sa.String(length=64), nullable=False),
    sa.Column('stripe_product_id', sa.String(length=128), nullable=False),
    sa.Column('unit_amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('interval', sa.String(length=16), nullable=False),
    sa.Column('interval_count', sa.Integer(), nullable=True),
    sa.Column('product_name', sa.String(length=128), nullable=False),
    sa.Column('product_description', sa.Text(), nullable=True),
    sa.Column('features', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_stripe_sync', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_price_id')
    )
    op.create_table('product_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('is_typically_portioned', sa.Boolean(), nullable=False),
    sa.Column('sku_name_template', sa.String(length=256), nullable=True),
    sa.Column('ui_config', sa.JSON(), nullable=True),
    sa.Column('skin_enabled', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('product_category', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_category_name'), ['name'], unique=True)



    op.create_table('stripe_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.String(length=255), nullable=False),
    sa.Column('event_type', sa.String(length=128), nullable=False),
    sa.Column('received_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('stripe_event', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stripe_event_event_id'), ['event_id'], unique=True)

    op.create_table('subscription_tier',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tier_type', sa.String(length=32), nullable=False),
    sa.Column('user_limit', sa.Integer(), nullable=False),
    sa.Column('max_users', sa.Integer(), nullable=True),
    sa.Column('max_recipes', sa.Integer(), nullable=True),
    sa.Column('max_batches', sa.Integer(), nullable=True),
    sa.Column('max_products', sa.Integer(), nullable=True),
    sa.Column('max_batchbot_requests', sa.Integer(), nullable=True),
    sa.Column('max_monthly_batches', sa.Integer(), nullable=True),
    sa.Column('retention_policy', sa.String(length=16), nullable=False),
    sa.Column('data_retention_days', sa.Integer(), nullable=True),
    sa.Column('retention_notice_days', sa.Integer(), nullable=True),
    sa.Column('storage_addon_retention_days', sa.Integer(), nullable=True),
    sa.Column('is_customer_facing', sa.Boolean(), nullable=False),
    sa.Column('billing_provider', sa.String(length=32), nullable=False),
    sa.Column('stripe_lookup_key', sa.String(length=128), nullable=True),
    sa.Column('stripe_storage_lookup_key', sa.String(length=128), nullable=True),
    sa.Column('whop_product_key', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('stripe_lookup_key', name='uq_subscription_tier_stripe_lookup_key'),
    sa.UniqueConstraint('stripe_storage_lookup_key', name='uq_subscription_tier_stripe_storage_lookup_key'),
    sa.UniqueConstraint('whop_product_key', name='uq_subscription_tier_whop_product_key')
    )
    op.create_table('developer_role_permission',
    sa.Column('developer_role_id', sa.Integer(), nullable=False),
    sa.Column('developer_permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['developer_permission_id'], ['developer_permission.id'], ),
    sa.ForeignKeyConstraint(['developer_role_id'], ['developer_role.id'], ),
    sa.PrimaryKeyConstraint('developer_role_id', 'developer_permission_id')
    )
    op.create_table('organization',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('contact_email', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('signup_source', sa.String(length=64), nullable=True),
    sa.Column('promo_code', sa.String(length=32), nullable=True),
    sa.Column('referral_code', sa.String(length=32), nullable=True),
    sa.Column('subscription_tier_id', sa.Integer(), nullable=True),
    sa.Column('whop_license_key', sa.String(length=255), nullable=True),
    sa.Column('whop_product_tier', sa.String(length=32), nullable=True),
    sa.Column('whop_verified', sa.Boolean(), nullable=True),
    sa.Column('stripe_subscription_id', sa.String(length=128), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True),
    sa.Column('billing_info', sa.Text(), nullable=True),
    sa.Column('next_billing_date', sa.Date(), nullable=True),
    sa.Column('subscription_status', sa.String(length=32), nullable=True),
    sa.Column('billing_status', sa.String(length=50), nullable=False),
    sa.Column('inventory_cost_method', sa.String(length=16), nullable=True),
    sa.Column('inventory_cost_method_changed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['subscription_tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscription_tier_permission',
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('tier_id', 'permission_id')
    )
    op.create_table('tier_allowed_addon',
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('addon_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['addon_id'], ['addon.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('tier_id', 'addon_id')
    )
    op.create_table('tier_included_addon',
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('addon_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['addon_id'], ['addon.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('tier_id', 'addon_id')
    )
    op.create_table('billing_snapshots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('confirmed_tier', sa.String(length=32), nullable=False),
    sa.Column('confirmed_status', sa.String(length=32), nullable=False),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=128), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=128), nullable=True),
    sa.Column('grace_period_days', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_stripe_sync', sa.DateTime(), nullable=False),
    sa.Column('sync_source', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('organization_addon',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('addon_id', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('source', sa.String(length=32), nullable=False),
    sa.Column('stripe_item_id', sa.String(length=128), nullable=True),
    sa.Column('current_period_end', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['addon_id'], ['addon.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('organization_addon', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_organization_addon_addon_id'), ['addon_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_organization_addon_organization_id'), ['organization_id'], unique=False)

    op.create_table('organization_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_batches', sa.Integer(), nullable=True),
    sa.Column('completed_batches', sa.Integer(), nullable=True),
    sa.Column('failed_batches', sa.Integer(), nullable=True),
    sa.Column('cancelled_batches', sa.Integer(), nullable=True),
    sa.Column('total_users', sa.Integer(), nullable=True),
    sa.Column('active_users', sa.Integer(), nullable=True),
    sa.Column('total_recipes', sa.Integer(), nullable=True),
    sa.Column('total_inventory_items', sa.Integer(), nullable=True),
    sa.Column('total_inventory_value', sa.Float(), nullable=True),
    sa.Column('total_products', sa.Integer(), nullable=True),
    sa.Column('total_products_made', sa.Float(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id')
    )
    op.create_table('storage_addon_purchase',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('stripe_session_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_price_lookup_key', sa.String(length=128), nullable=True),
    sa.Column('retention_extension_days', sa.Integer(), nullable=True),
    sa.Column('purchased_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage_addon_subscription',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=255), nullable=False),
    sa.Column('price_lookup_key', sa.String(length=128), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=False),
    sa.Column('current_period_end', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_subscription_id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('password_hash', sa.String(length=255), server_default='', nullable=True),
    sa.Column('first_name', sa.String(length=64), nullable=True),
    sa.Column('last_name', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('user_type', sa.String(length=32), nullable=True),
    sa.Column('is_organization_owner', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.false()),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True),
    sa.Column('email_verification_sent_at', sa.DateTime(), nullable=True),
    sa.Column('oauth_provider', sa.String(length=50), nullable=True),
    sa.Column('oauth_provider_id', sa.String(length=255), nullable=True),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_sent_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['deleted_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index('ix_user_org', ['organization_id'], unique=False)

    # moved: batch_timer created after batch table
    op.create_table('conversion_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('from_unit', sa.String(length=32), nullable=False),
    sa.Column('to_unit', sa.String(length=32), nullable=False),
    sa.Column('result', sa.Float(), nullable=False),
    sa.Column('conversion_type', sa.String(length=64), nullable=False),
    sa.Column('ingredient_name', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('custom_unit_mapping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_unit', sa.String(length=64), nullable=False),
    sa.Column('to_unit', sa.String(length=64), nullable=False),
    sa.Column('conversion_factor', sa.Float(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('domain_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_name', sa.String(length=128), nullable=False),
    sa.Column('occurred_at', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('entity_type', sa.String(length=64), nullable=True),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('correlation_id', sa.String(length=128), nullable=True),
    sa.Column('source', sa.String(length=64), nullable=True),
    sa.Column('schema_version', sa.Integer(), nullable=True),
    sa.Column('properties', sa.JSON(), nullable=True),
    sa.Column('is_processed', sa.Boolean(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('delivery_attempts', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('domain_event', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_domain_event_correlation_id'), ['correlation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_entity_type'), ['entity_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_event_name'), ['event_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_is_processed'), ['is_processed'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_occurred_at'), ['occurred_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_organization_id'), ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_domain_event_user_id'), ['user_id'], unique=False)

    op.create_table('ingredient_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('default_density', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_global_category', sa.Boolean(), nullable=True),
    sa.Column('show_saponification_value', sa.Boolean(), nullable=True),
    sa.Column('show_iodine_value', sa.Boolean(), nullable=True),
    sa.Column('show_melting_point', sa.Boolean(), nullable=True),
    sa.Column('show_flash_point', sa.Boolean(), nullable=True),
    sa.Column('show_ph_value', sa.Boolean(), nullable=True),
    sa.Column('show_moisture_content', sa.Boolean(), nullable=True),
    sa.Column('show_shelf_life_months', sa.Boolean(), nullable=True),
    sa.Column('show_comedogenic_rating', sa.Boolean(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('item_type', sa.String(length=32), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'item_type', 'organization_id', name='_invcat_name_type_org_uc')
    )
    op.create_table('product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('subcategory', sa.String(length=64), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('low_stock_threshold', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_discontinued', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('shopify_product_id', sa.String(length=64), nullable=True),
    sa.Column('etsy_shop_section_id', sa.String(length=64), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_category.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'organization_id', name='unique_product_name_per_org')
    )
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.create_index('ix_product_category_id', ['category_id'], unique=False)

    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.false()),
    sa.Column('is_system_role', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'organization_id', name='unique_role_name_org')
    )
    op.create_table('tag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'organization_id', name='_tag_name_org_uc')
    )
    op.create_table('unit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('symbol', sa.String(length=16), nullable=True),
    sa.Column('unit_type', sa.String(length=32), nullable=False),
    sa.Column('conversion_factor', sa.Float(), nullable=False),
    sa.Column('base_unit', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_custom', sa.Boolean(), nullable=True),
    sa.Column('is_mapped', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'organization_id', name='_unit_name_org_uc')
    )
    op.create_table('user_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('theme', sa.String(length=20), nullable=True),
    sa.Column('max_dashboard_alerts', sa.Integer(), nullable=True),
    sa.Column('show_expiration_alerts', sa.Boolean(), nullable=True),
    sa.Column('show_timer_alerts', sa.Boolean(), nullable=True),
    sa.Column('show_low_stock_alerts', sa.Boolean(), nullable=True),
    sa.Column('show_batch_alerts', sa.Boolean(), nullable=True),
    sa.Column('show_fault_alerts', sa.Boolean(), nullable=True),
    sa.Column('show_alert_badges', sa.Boolean(), nullable=True),
    sa.Column('dashboard_layout', sa.String(length=32), nullable=True),
    sa.Column('compact_view', sa.Boolean(), nullable=True),
    sa.Column('show_quick_actions', sa.Boolean(), nullable=True),
    sa.Column('timezone', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_batches', sa.Integer(), nullable=True),
    sa.Column('completed_batches', sa.Integer(), nullable=True),
    sa.Column('failed_batches', sa.Integer(), nullable=True),
    sa.Column('cancelled_batches', sa.Integer(), nullable=True),
    sa.Column('total_recipes', sa.Integer(), nullable=True),
    sa.Column('recipes_created', sa.Integer(), nullable=True),
    sa.Column('inventory_adjustments', sa.Integer(), nullable=True),
    sa.Column('inventory_items_created', sa.Integer(), nullable=True),
    sa.Column('products_created', sa.Integer(), nullable=True),
    sa.Column('total_products_made', sa.Float(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('global_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('item_type', sa.String(length=32), nullable=False),
    sa.Column('aka_names', sa.JSON(), nullable=True),
    sa.Column('density', sa.Float(), nullable=True),
    sa.Column('default_unit', sa.String(length=32), nullable=True),
    sa.Column('ingredient_category_id', sa.Integer(), nullable=True),
    sa.Column('default_is_perishable', sa.Boolean(), nullable=True),
    sa.Column('recommended_shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('capacity', sa.Float(), nullable=True),
    sa.Column('capacity_unit', sa.String(length=32), nullable=True),
    sa.Column('container_material', sa.String(length=64), nullable=True),
    sa.Column('container_type', sa.String(length=64), nullable=True),
    sa.Column('container_style', sa.String(length=64), nullable=True),
    sa.Column('container_color', sa.String(length=64), nullable=True),
    sa.Column('saponification_value', sa.Float(), nullable=True),
    sa.Column('iodine_value', sa.Float(), nullable=True),
    sa.Column('melting_point_c', sa.Float(), nullable=True),
    sa.Column('flash_point_c', sa.Float(), nullable=True),
    sa.Column('ph_value', sa.Float(), nullable=True),
    sa.Column('moisture_content_percent', sa.Float(), nullable=True),
    sa.Column('shelf_life_months', sa.Integer(), nullable=True),
    sa.Column('comedogenic_rating', sa.Integer(), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('archived_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['archived_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['ingredient_category_id'], ['ingredient_category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'item_type', name='_global_item_name_type_uc')
    )
    with op.batch_alter_table('global_item', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_global_item_ingredient_category_id'), ['ingredient_category_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_global_item_item_type'), ['item_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_global_item_name'), ['name'], unique=False)

    op.create_table('product_variant',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=32), nullable=True),
    sa.Column('material', sa.String(length=64), nullable=True),
    sa.Column('scent', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_id', 'name', name='unique_product_variant')
    )
    op.create_table('recipe',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('label_prefix', sa.String(length=8), nullable=True),
    sa.Column('qr_image', sa.String(length=128), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('is_locked', sa.Boolean(), nullable=True),
    sa.Column('predicted_yield', sa.Float(), nullable=True),
    sa.Column('predicted_yield_unit', sa.String(length=50), nullable=True),
    sa.Column('allowed_containers', sa.PickleType(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('portioning_data', sa.JSON(), nullable=True),
    sa.Column('is_portioned', sa.Boolean(), nullable=True),
    sa.Column('portion_name', sa.String(length=64), nullable=True),
    sa.Column('portion_count', sa.Integer(), nullable=True),
    sa.Column('portion_unit_id', sa.Integer(), nullable=True),
    sa.Column('category_data', sa.JSON(), nullable=True),
    sa.Column('soap_superfat', sa.Numeric(), nullable=True),
    sa.Column('soap_water_pct', sa.Numeric(), nullable=True),
    sa.Column('soap_lye_type', sa.Text(), nullable=True),
    sa.Column('candle_fragrance_pct', sa.Numeric(), nullable=True),
    sa.Column('candle_vessel_ml', sa.Numeric(), nullable=True),
    sa.Column('vessel_fill_pct', sa.Numeric(), nullable=True),
    sa.Column('baker_base_flour_g', sa.Numeric(), nullable=True),
    sa.Column('baker_water_pct', sa.Numeric(), nullable=True),
    sa.Column('baker_salt_pct', sa.Numeric(), nullable=True),
    sa.Column('baker_yeast_pct', sa.Numeric(), nullable=True),
    sa.Column('cosm_emulsifier_pct', sa.Numeric(), nullable=True),
    sa.Column('cosm_preservative_pct', sa.Numeric(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_category.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['recipe.id'], ),
    sa.ForeignKeyConstraint(['portion_unit_id'], ['unit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.create_index('ix_recipe_baker_base_flour_g', ['baker_base_flour_g'], unique=False)
        batch_op.create_index('ix_recipe_baker_salt_pct', ['baker_salt_pct'], unique=False)
        batch_op.create_index('ix_recipe_baker_water_pct', ['baker_water_pct'], unique=False)
        batch_op.create_index('ix_recipe_baker_yeast_pct', ['baker_yeast_pct'], unique=False)
        batch_op.create_index('ix_recipe_candle_fragrance_pct', ['candle_fragrance_pct'], unique=False)
        batch_op.create_index('ix_recipe_candle_vessel_ml', ['candle_vessel_ml'], unique=False)
        batch_op.create_index('ix_recipe_category_id', ['category_id'], unique=False)
        batch_op.create_index('ix_recipe_cosm_emulsifier_pct', ['cosm_emulsifier_pct'], unique=False)
        batch_op.create_index('ix_recipe_cosm_preservative_pct', ['cosm_preservative_pct'], unique=False)
        batch_op.create_index('ix_recipe_org', ['organization_id'], unique=False)
        batch_op.create_index('ix_recipe_soap_lye_type', ['soap_lye_type'], unique=False)
        batch_op.create_index('ix_recipe_soap_superfat', ['soap_superfat'], unique=False)
        batch_op.create_index('ix_recipe_soap_water_pct', ['soap_water_pct'], unique=False)
        batch_op.create_index('ix_recipe_vessel_fill_pct', ['vessel_fill_pct'], unique=False)

    # Create batch after user/organization/unit/recipe exist; omit FK to product_sku to avoid cycle
    op.create_table('batch',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('label_code', sa.String(length=32), nullable=True),
    sa.Column('batch_type', sa.String(length=32), nullable=False),
    sa.Column('projected_yield', sa.Float(), nullable=True),
    sa.Column('projected_yield_unit', sa.String(length=50), nullable=True),
    sa.Column('sku_id', sa.Integer(), nullable=True),
    sa.Column('final_quantity', sa.Float(), nullable=True),
    sa.Column('output_unit', sa.String(length=50), nullable=True),
    sa.Column('scale', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('status_reason', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('failed_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('inventory_credited', sa.Boolean(), nullable=True),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('remaining_quantity', sa.Float(), nullable=True),
    sa.Column('portioning_data', sa.JSON(), nullable=True),
    sa.Column('is_portioned', sa.Boolean(), nullable=True),
    sa.Column('portion_name', sa.String(length=64), nullable=True),
    sa.Column('projected_portions', sa.Integer(), nullable=True),
    sa.Column('final_portions', sa.Integer(), nullable=True),
    sa.Column('plan_snapshot', sa.JSON(), nullable=True),
    sa.Column('portion_unit_id', sa.Integer(), nullable=True),
    sa.Column('cost_method', sa.String(length=16), nullable=True),
    sa.Column('cost_method_locked_at', sa.DateTime(), nullable=True),
    sa.Column('vessel_fill_pct', sa.Numeric(), nullable=True),
    sa.Column('candle_fragrance_pct', sa.Numeric(), nullable=True),
    sa.Column('candle_vessel_ml', sa.Numeric(), nullable=True),
    sa.Column('soap_superfat', sa.Numeric(), nullable=True),
    sa.Column('soap_water_pct', sa.Numeric(), nullable=True),
    sa.Column('soap_lye_type', sa.Text(), nullable=True),
    sa.Column('baker_base_flour_g', sa.Numeric(), nullable=True),
    sa.Column('baker_water_pct', sa.Numeric(), nullable=True),
    sa.Column('baker_salt_pct', sa.Numeric(), nullable=True),
    sa.Column('baker_yeast_pct', sa.Numeric(), nullable=True),
    sa.Column('cosm_emulsifier_pct', sa.Numeric(), nullable=True),
    sa.Column('cosm_preservative_pct', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['portion_unit_id'], ['unit.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('label_code')
    )
    with op.batch_alter_table('batch', schema=None) as batch_op:
        batch_op.create_index('ix_batch_baker_base_flour_g', ['baker_base_flour_g'], unique=False)
        batch_op.create_index('ix_batch_baker_salt_pct', ['baker_salt_pct'], unique=False)
        batch_op.create_index('ix_batch_baker_water_pct', ['baker_water_pct'], unique=False)
        batch_op.create_index('ix_batch_baker_yeast_pct', ['baker_yeast_pct'], unique=False)
        batch_op.create_index('ix_batch_candle_fragrance_pct', ['candle_fragrance_pct'], unique=False)
        batch_op.create_index('ix_batch_candle_vessel_ml', ['candle_vessel_ml'], unique=False)
        batch_op.create_index('ix_batch_cosm_emulsifier_pct', ['cosm_emulsifier_pct'], unique=False)
        batch_op.create_index('ix_batch_cosm_preservative_pct', ['cosm_preservative_pct'], unique=False)
        batch_op.create_index('ix_batch_org', ['organization_id'], unique=False)
        batch_op.create_index('ix_batch_soap_lye_type', ['soap_lye_type'], unique=False)
        batch_op.create_index('ix_batch_soap_superfat', ['soap_superfat'], unique=False)
        batch_op.create_index('ix_batch_soap_water_pct', ['soap_water_pct'], unique=False)
        batch_op.create_index('ix_batch_vessel_fill_pct', ['vessel_fill_pct'], unique=False)

    # Now that batch exists, create batch_timer
    op.create_table('batch_timer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('duration_seconds', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # product_sku and dependent history/log tables will be created after inventory tables

    # inventory_history will be created after inventory_item exists

    # reservation will be created after inventory_item exists

    # inventory_change_log will be created after inventory_lot exists

    op.create_table('role_permission',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('user_role_assignment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('developer_role_id', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('assigned_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['developer_role_id'], ['developer_role.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('batch_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('planned_fill_efficiency', sa.Float(), nullable=True),
    sa.Column('actual_fill_efficiency', sa.Float(), nullable=True),
    sa.Column('efficiency_variance', sa.Float(), nullable=True),
    sa.Column('planned_yield_amount', sa.Float(), nullable=True),
    sa.Column('planned_yield_unit', sa.String(length=50), nullable=True),
    sa.Column('actual_yield_amount', sa.Float(), nullable=True),
    sa.Column('actual_yield_unit', sa.String(length=50), nullable=True),
    sa.Column('yield_variance_percentage', sa.Float(), nullable=True),
    sa.Column('planned_ingredient_cost', sa.Float(), nullable=True),
    sa.Column('actual_ingredient_cost', sa.Float(), nullable=True),
    sa.Column('planned_container_cost', sa.Float(), nullable=True),
    sa.Column('actual_container_cost', sa.Float(), nullable=True),
    sa.Column('total_planned_cost', sa.Float(), nullable=True),
    sa.Column('total_actual_cost', sa.Float(), nullable=True),
    sa.Column('cost_variance_percentage', sa.Float(), nullable=True),
    sa.Column('ingredient_spoilage_cost', sa.Float(), nullable=True),
    sa.Column('product_spoilage_cost', sa.Float(), nullable=True),
    sa.Column('waste_percentage', sa.Float(), nullable=True),
    sa.Column('planned_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('actual_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('duration_variance_percentage', sa.Float(), nullable=True),
    sa.Column('batch_status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('batch_id')
    )
    op.create_table('global_item_alias',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('global_item_id', sa.Integer(), nullable=False),
    sa.Column('alias', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['global_item_id'], ['global_item.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('global_item_alias', schema=None) as batch_op:
        batch_op.create_index('ix_global_item_alias_alias', ['alias'], unique=False)
        batch_op.create_index('ix_global_item_alias_global_item_id', ['global_item_id'], unique=False)

    op.create_table('inventory_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('inventory_category_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('cost_per_unit', sa.Float(), nullable=True),
    sa.Column('low_stock_threshold', sa.Float(), nullable=True),
    sa.Column('density', sa.Float(), nullable=True),
    sa.Column('type', sa.String(length=32), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.true()),
    sa.Column('is_archived', sa.Boolean(), nullable=True, server_default=sa.false()),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('capacity', sa.Float(), nullable=True),
    sa.Column('capacity_unit', sa.String(length=32), nullable=True),
    sa.Column('container_material', sa.String(length=64), nullable=True),
    sa.Column('container_type', sa.String(length=64), nullable=True),
    sa.Column('container_style', sa.String(length=64), nullable=True),
    sa.Column('container_color', sa.String(length=64), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('reference_item_name', sa.String(length=128), nullable=True),
    sa.Column('density_source', sa.String(length=32), nullable=True),
    sa.Column('intermediate', sa.Boolean(), nullable=True),
    sa.Column('saponification_value', sa.Float(), nullable=True),
    sa.Column('iodine_value', sa.Float(), nullable=True),
    sa.Column('melting_point_c', sa.Float(), nullable=True),
    sa.Column('flash_point_c', sa.Float(), nullable=True),
    sa.Column('ph_value', sa.Float(), nullable=True),
    sa.Column('moisture_content_percent', sa.Float(), nullable=True),
    sa.Column('shelf_life_months', sa.Integer(), nullable=True),
    sa.Column('comedogenic_rating', sa.Integer(), nullable=True),
    sa.Column('global_item_id', sa.Integer(), nullable=True),
    sa.Column('ownership', sa.String(length=16), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['ingredient_category.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['global_item_id'], ['global_item.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['inventory_category_id'], ['inventory_category.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'name', name='_org_name_uc')
    )
    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_inventory_item_global_item_id'), ['global_item_id'], unique=False)
        batch_op.create_index('ix_inventory_item_is_archived', ['is_archived'], unique=False)
        batch_op.create_index(batch_op.f('ix_inventory_item_name'), ['name'], unique=False)
        batch_op.create_index('ix_inventory_item_org', ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_inventory_item_organization_id'), ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_inventory_item_ownership'), ['ownership'], unique=False)
        batch_op.create_index('ix_inventory_item_type', ['type'], unique=False)

    # Create product_sku after product, product_variant, inventory_item, and batch exist
    op.create_table('product_sku',
    sa.Column('id', sa.Integer(), nullable=False, autoincrement=True),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('variant_id', sa.Integer(), nullable=True),
    sa.Column('size_label', sa.String(length=64), nullable=False),
    sa.Column('sku_code', sa.String(length=64), nullable=True),
    sa.Column('sku', sa.String(length=64), nullable=False),
    sa.Column('sku_name', sa.String(length=128), nullable=True),
    sa.Column('quantity_override', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=32), nullable=True),
    sa.Column('low_stock_threshold', sa.Float(), nullable=True),
    sa.Column('fifo_id', sa.String(length=32), nullable=True),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('container_id', sa.Integer(), nullable=True),
    sa.Column('retail_price', sa.Float(), nullable=True),
    sa.Column('wholesale_price', sa.Float(), nullable=True),
    sa.Column('profit_margin_target', sa.Float(), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('subcategory', sa.String(length=64), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_product_active', sa.Boolean(), nullable=True),
    sa.Column('is_discontinued', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('supplier_name', sa.String(length=128), nullable=True),
    sa.Column('supplier_sku', sa.String(length=64), nullable=True),
    sa.Column('supplier_cost', sa.Float(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('weight_unit', sa.String(length=16), nullable=True),
    sa.Column('dimensions', sa.String(length=64), nullable=True),
    sa.Column('barcode', sa.String(length=128), nullable=True),
    sa.Column('upc', sa.String(length=32), nullable=True),
    sa.Column('quality_status', sa.String(length=32), nullable=True),
    sa.Column('compliance_status', sa.String(length=32), nullable=True),
    sa.Column('quality_checked_by', sa.Integer(), nullable=True),
    sa.Column('quality_checked_at', sa.DateTime(), nullable=True),
    sa.Column('location_id', sa.String(length=128), nullable=True),
    sa.Column('location_name', sa.String(length=128), nullable=True),
    sa.Column('temperature_at_time', sa.Float(), nullable=True),
    sa.Column('shopify_product_id', sa.String(length=64), nullable=True),
    sa.Column('shopify_variant_id', sa.String(length=64), nullable=True),
    sa.Column('etsy_listing_id', sa.String(length=64), nullable=True),
    sa.Column('amazon_asin', sa.String(length=64), nullable=True),
    sa.Column('marketplace_sync_status', sa.String(length=32), nullable=True),
    sa.Column('marketplace_last_sync', sa.DateTime(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['product_variant.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['quality_checked_by'], ['user.id'], ),
    # batch_id FK removed to avoid circular dependency - added in 0002 as deferred
    sa.ForeignKeyConstraint(['container_id'], ['inventory_item.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sku', name='uq_product_sku_sku'),
    sa.UniqueConstraint('product_id', 'variant_id', 'size_label', 'fifo_id', name='unique_sku_combination'),
    sa.UniqueConstraint('barcode', name='unique_barcode'),
    sa.UniqueConstraint('upc', name='unique_upc')
    )
    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.create_index('ix_product_sku_inventory_item_id', ['inventory_item_id'], unique=False)
        batch_op.create_index('idx_product_variant', ['product_id', 'variant_id'], unique=False)
        batch_op.create_index('idx_active_skus', ['is_active', 'is_product_active'], unique=False)
        batch_op.create_index('idx_inventory_item', ['inventory_item_id'], unique=False)

    # Create reservation table that 0006 expects to exist
    op.create_table('reservation',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('order_id', sa.String(length=128), nullable=False),
        sa.Column('reserved_item_id', sa.Integer(), nullable=False),
        sa.Column('quantity', sa.Float(), nullable=False),
        sa.Column('unit', sa.String(length=32), nullable=False),
        sa.Column('status', sa.String(length=32), nullable=True),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=True),
        sa.Column('organization_id', sa.Integer(), nullable=True),
        sa.Column('reservation_id', sa.String(length=128), nullable=True),
        sa.Column('product_item_id', sa.Integer(), nullable=False),
        sa.Column('unit_cost', sa.Float(), nullable=True),
        sa.Column('sale_price', sa.Float(), nullable=True),
        # Fix column types to match model definitions
        sa.Column('customer', sa.String(length=128), nullable=True),
        sa.Column('source_fifo_id', sa.Integer(), nullable=True),
        sa.Column('source_batch_id', sa.Integer(), nullable=True),
        sa.Column('source', sa.String(length=64), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('released_at', sa.DateTime(), nullable=True),
        sa.Column('converted_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
        sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
        sa.ForeignKeyConstraint(['reserved_item_id'], ['inventory_item.id'], ),
        sa.ForeignKeyConstraint(['product_item_id'], ['inventory_item.id'], ),
        sa.ForeignKeyConstraint(['source_batch_id'], ['batch.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('reservation', schema=None) as batch_op:
        batch_op.create_index('idx_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_order_status', ['order_id', 'status'], unique=False)
        batch_op.create_index('idx_reserved_item_status', ['reserved_item_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_reservation_order_id'), ['order_id'], unique=False)

    # Create product_sku_history after inventory_item exists
    op.create_table('product_sku_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('change_type', sa.String(length=32), nullable=False),
    sa.Column('quantity_change', sa.Float(), nullable=False),
    sa.Column('remaining_quantity', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('unit_cost', sa.Float(), nullable=True),
    sa.Column('sale_price', sa.Float(), nullable=True),
    sa.Column('customer', sa.String(length=128), nullable=True),
    sa.Column('fifo_code', sa.String(length=64), nullable=True),
    sa.Column('fifo_reference_id', sa.Integer(), nullable=True),
    sa.Column('fifo_source', sa.String(length=128), nullable=True),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('container_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('order_id', sa.String(length=64), nullable=True),
    sa.Column('reservation_id', sa.String(length=64), nullable=True),
    sa.Column('is_reserved', sa.Boolean(), nullable=True),
    sa.Column('sale_location', sa.String(length=64), nullable=True),
    sa.Column('quantity_used', sa.Float(), nullable=True),
    sa.Column('batch_number', sa.String(length=128), nullable=True),
    sa.Column('lot_number', sa.String(length=128), nullable=True),
    sa.Column('temperature_at_time', sa.Float(), nullable=True),
    sa.Column('location_id', sa.String(length=128), nullable=True),
    sa.Column('location_name', sa.String(length=128), nullable=True),
    sa.Column('quality_status', sa.String(length=32), nullable=True),
    sa.Column('compliance_status', sa.String(length=32), nullable=True),
    sa.Column('quality_checked_by', sa.Integer(), nullable=True),
    sa.Column('marketplace_order_id', sa.String(length=128), nullable=True),
    sa.Column('marketplace_source', sa.String(length=32), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['fifo_reference_id'], ['product_sku_history.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['quality_checked_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        batch_op.create_index('idx_change_type', ['change_type'], unique=False)
        batch_op.create_index('idx_fifo_code', ['fifo_code'], unique=False)
        batch_op.create_index('idx_inventory_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_item_timestamp', ['inventory_item_id', 'timestamp'], unique=False)

    op.create_table('retention_deletion_queue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('acknowledged_at', sa.DateTime(), nullable=True),
    sa.Column('delete_after_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'recipe_id', name='uq_retention_queue_org_recipe')
    )
    # Create inventory_history after batch and inventory tables exist
    op.create_table('inventory_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('change_type', sa.String(length=50), nullable=True),
    sa.Column('quantity_change', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('remaining_quantity', sa.Float(), nullable=True),
    sa.Column('unit_cost', sa.Float(), nullable=True),
    sa.Column('fifo_reference_id', sa.Integer(), nullable=True),
    sa.Column('fifo_code', sa.String(length=32), nullable=True),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('quantity_used', sa.Float(), nullable=True),
    sa.Column('used_for_batch_id', sa.Integer(), nullable=True),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['fifo_reference_id'], ['inventory_history.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['used_for_batch_id'], ['batch.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('batch_consumable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('cost_per_unit', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('batch_consumable', schema=None) as batch_op:
        batch_op.create_index('ix_batch_consumable_batch_id', ['batch_id'], unique=False)
        batch_op.create_index('ix_batch_consumable_inventory_item_id', ['inventory_item_id'], unique=False)
        batch_op.create_index('ix_batch_consumable_organization_id', ['organization_id'], unique=False)

    op.create_table('batch_container',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('container_id', sa.Integer(), nullable=False),
    sa.Column('container_quantity', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Integer(), nullable=False),
    sa.Column('fill_quantity', sa.Float(), nullable=True),
    sa.Column('fill_unit', sa.String(length=32), nullable=True),
    sa.Column('cost_each', sa.Float(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('batch_ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('cost_per_unit', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('batch_inventory_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=32), nullable=False),
    sa.Column('quantity_change', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('old_stock', sa.Float(), nullable=False),
    sa.Column('new_stock', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('extra_batch_consumable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('cost_per_unit', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('reason', sa.String(length=20), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('extra_batch_consumable', schema=None) as batch_op:
        batch_op.create_index('ix_extra_batch_consumable_batch_id', ['batch_id'], unique=False)
        batch_op.create_index('ix_extra_batch_consumable_inventory_item_id', ['inventory_item_id'], unique=False)
        batch_op.create_index('ix_extra_batch_consumable_organization_id', ['organization_id'], unique=False)

    op.create_table('extra_batch_container',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('container_id', sa.Integer(), nullable=False),
    sa.Column('container_quantity', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Integer(), nullable=False),
    sa.Column('fill_quantity', sa.Float(), nullable=True),
    sa.Column('fill_unit', sa.String(length=32), nullable=True),
    sa.Column('cost_each', sa.Float(), nullable=True),
    sa.Column('reason', sa.String(length=20), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('extra_batch_ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity_used', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('cost_per_unit', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('freshness_snapshot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('snapshot_date', sa.Date(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('avg_days_to_usage', sa.Float(), nullable=True),
    sa.Column('avg_days_to_spoilage', sa.Float(), nullable=True),
    sa.Column('freshness_efficiency_score', sa.Float(), nullable=True),
    sa.Column('computed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('snapshot_date', 'organization_id', 'inventory_item_id', name='uq_freshness_snapshot_unique')
    )
    with op.batch_alter_table('freshness_snapshot', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_freshness_snapshot_inventory_item_id'), ['inventory_item_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_freshness_snapshot_organization_id'), ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_freshness_snapshot_snapshot_date'), ['snapshot_date'], unique=False)

    op.create_table('inventory_efficiency_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_purchased_quantity', sa.Float(), nullable=True),
    sa.Column('total_used_quantity', sa.Float(), nullable=True),
    sa.Column('total_spoiled_quantity', sa.Float(), nullable=True),
    sa.Column('total_wasted_quantity', sa.Float(), nullable=True),
    sa.Column('utilization_percentage', sa.Float(), nullable=True),
    sa.Column('spoilage_rate', sa.Float(), nullable=True),
    sa.Column('waste_rate', sa.Float(), nullable=True),
    sa.Column('total_purchase_cost', sa.Float(), nullable=True),
    sa.Column('total_spoilage_cost', sa.Float(), nullable=True),
    sa.Column('total_waste_cost', sa.Float(), nullable=True),
    sa.Column('effective_cost_per_unit', sa.Float(), nullable=True),
    sa.Column('avg_days_to_use', sa.Float(), nullable=True),
    sa.Column('avg_days_to_spoil', sa.Float(), nullable=True),
    sa.Column('freshness_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('inventory_item_id')
    )
    # Removed stray duplicate inventory_history block (actual table defined later)
    op.create_table('inventory_lot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('remaining_quantity', sa.Float(), nullable=False),
    sa.Column('original_quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('unit_cost', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('received_date', sa.DateTime(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('source_notes', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('fifo_code', sa.String(length=32), nullable=True),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('original_quantity > 0', name='check_original_quantity_positive'),
    sa.CheckConstraint('remaining_quantity <= original_quantity', name='check_remaining_not_exceeds_original'),
    sa.CheckConstraint('remaining_quantity >= 0', name='check_remaining_quantity_non_negative'),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fifo_code')
    )
    with op.batch_alter_table('inventory_lot', schema=None) as batch_op:
        batch_op.create_index('ix_inventory_lot_org', ['organization_id'], unique=False)


    # Create inventory_change_log after inventory_lot exists
    op.create_table('inventory_change_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('change_type', sa.String(length=50), nullable=False),
    sa.Column('change_category', sa.String(length=50), nullable=False),
    sa.Column('quantity_change', sa.Float(), nullable=False),
    sa.Column('cost_impact', sa.Float(), nullable=True),
    sa.Column('related_batch_id', sa.Integer(), nullable=True),
    sa.Column('related_lot_id', sa.Integer(), nullable=True),
    sa.Column('reason_code', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('item_age_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('freshness_score', sa.Float(), nullable=True),
    sa.Column('change_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['related_batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['related_lot_id'], ['inventory_lot.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('organization_leaderboard_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_recipes', sa.Integer(), nullable=True),
    sa.Column('active_recipes_count', sa.Integer(), nullable=True),
    sa.Column('most_popular_recipe_id', sa.Integer(), nullable=True),
    sa.Column('avg_recipe_success_rate', sa.Float(), nullable=True),
    sa.Column('total_batches_completed', sa.Integer(), nullable=True),
    sa.Column('avg_batch_completion_time', sa.Float(), nullable=True),
    sa.Column('avg_fill_efficiency', sa.Float(), nullable=True),
    sa.Column('highest_fill_efficiency', sa.Float(), nullable=True),
    sa.Column('active_users_count', sa.Integer(), nullable=True),
    sa.Column('most_productive_user_id', sa.Integer(), nullable=True),
    sa.Column('avg_batches_per_user', sa.Float(), nullable=True),
    sa.Column('most_used_container_size', sa.Float(), nullable=True),
    sa.Column('most_used_container_id', sa.Integer(), nullable=True),
    sa.Column('avg_cost_per_batch', sa.Float(), nullable=True),
    sa.Column('lowest_cost_per_unit', sa.Float(), nullable=True),
    sa.Column('highest_cost_per_unit', sa.Float(), nullable=True),
    sa.Column('avg_spoilage_rate', sa.Float(), nullable=True),
    sa.Column('inventory_turnover_rate', sa.Float(), nullable=True),
    sa.Column('recipes_shared_count', sa.Integer(), nullable=True),
    sa.Column('recipes_sold_count', sa.Integer(), nullable=True),
    sa.Column('community_rating', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['most_popular_recipe_id'], ['recipe.id'], ),
    sa.ForeignKeyConstraint(['most_productive_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['most_used_container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id')
    )
    # Removed stray duplicate product_sku_history block (actual table defined later)

    op.create_table('recipe_consumable',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('order_position', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe_ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('order_position', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_batches_planned', sa.Integer(), nullable=True),
    sa.Column('total_batches_completed', sa.Integer(), nullable=True),
    sa.Column('total_batches_failed', sa.Integer(), nullable=True),
    sa.Column('success_rate_percentage', sa.Float(), nullable=True),
    sa.Column('avg_fill_efficiency', sa.Float(), nullable=True),
    sa.Column('avg_yield_variance', sa.Float(), nullable=True),
    sa.Column('avg_cost_variance', sa.Float(), nullable=True),
    sa.Column('avg_cost_per_batch', sa.Float(), nullable=True),
    sa.Column('avg_cost_per_unit', sa.Float(), nullable=True),
    sa.Column('total_spoilage_cost', sa.Float(), nullable=True),
    sa.Column('most_used_container_id', sa.Integer(), nullable=True),
    sa.Column('avg_containers_needed', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_batch_date', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['most_used_container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('recipe_id')
    )
    # Removed stray duplicate reservation block (actual table defined earlier)

    # moved: inventory_change_log created after batch/inventory_lot tables
    op.create_table('unified_inventory_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('change_type', sa.String(length=50), nullable=False),
    sa.Column('quantity_change', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=False),
    sa.Column('affected_lot_id', sa.Integer(), nullable=True),
    sa.Column('remaining_quantity', sa.Float(), nullable=True),
    sa.Column('unit_cost', sa.Float(), nullable=True),
    sa.Column('valuation_method', sa.String(length=16), nullable=True),
    sa.Column('fifo_reference_id', sa.Integer(), nullable=True),
    sa.Column('fifo_code', sa.String(length=32), nullable=True),
    sa.Column('batch_id', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('quantity_used', sa.Float(), nullable=True),
    sa.Column('used_for_batch_id', sa.Integer(), nullable=True),
    sa.Column('is_perishable', sa.Boolean(), nullable=True),
    sa.Column('shelf_life_days', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('location_id', sa.String(length=128), nullable=True),
    sa.Column('location_name', sa.String(length=128), nullable=True),
    sa.Column('temperature_at_time', sa.Float(), nullable=True),
    sa.Column('quality_status', sa.String(length=32), nullable=True),
    sa.Column('compliance_status', sa.String(length=32), nullable=True),
    sa.Column('quality_checked_by', sa.Integer(), nullable=True),
    sa.Column('customer', sa.String(length=255), nullable=True),
    sa.Column('sale_price', sa.Float(), nullable=True),
    sa.Column('order_id', sa.String(length=255), nullable=True),
    sa.Column('reservation_id', sa.String(length=64), nullable=True),
    sa.Column('is_reserved', sa.Boolean(), nullable=True),
    sa.Column('sale_location', sa.String(length=64), nullable=True),
    sa.Column('marketplace_order_id', sa.String(length=128), nullable=True),
    sa.Column('marketplace_source', sa.String(length=32), nullable=True),
    sa.Column('batch_number', sa.String(length=128), nullable=True),
    sa.Column('lot_number', sa.String(length=128), nullable=True),
    sa.Column('container_id', sa.Integer(), nullable=True),
    sa.Column('fifo_source', sa.String(length=128), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['affected_lot_id'], ['inventory_lot.id'], ),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['container_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['fifo_reference_id'], ['unified_inventory_history.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['quality_checked_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['used_for_batch_id'], ['batch.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('unified_inventory_history', schema=None) as batch_op:
        batch_op.create_index('idx_unified_change_type', ['change_type'], unique=False)
        batch_op.create_index('idx_unified_expiration', ['expiration_date'], unique=False)
        batch_op.create_index('idx_unified_fifo_code', ['fifo_code'], unique=False)
        batch_op.create_index('idx_unified_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_unified_item_timestamp', ['inventory_item_id', 'timestamp'], unique=False)
        batch_op.create_index('ix_unified_history_org', ['organization_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_change_type'), ['change_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_expiration_date'), ['expiration_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_inventory_item_id'), ['inventory_item_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_timestamp'), ['timestamp'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    from migrations.postgres_helpers import is_postgresql
    from sqlalchemy import text, inspect

    # Get connection and inspector
    bind = op.get_bind()
    inspector = inspect(bind)

    if is_postgresql():
        # Use CASCADE to drop with dependencies in proper order
        try:
            # Try to drop subscription_tier and related dependencies first
            bind.execute(text("""
                DROP TABLE IF EXISTS tier_included_addon CASCADE;
                DROP TABLE IF EXISTS tier_allowed_addon CASCADE;
                DROP TABLE IF EXISTS subscription_tier_permission CASCADE;
                DROP TABLE IF EXISTS organization CASCADE;
                DROP TABLE IF EXISTS subscription_tier CASCADE;
            """))

            # Drop other tables in dependency order
            bind.execute(text("""
                DROP TABLE IF EXISTS unified_inventory_history CASCADE;
                DROP TABLE IF EXISTS recipe_stats CASCADE;
                DROP TABLE IF EXISTS recipe_ingredient CASCADE;
                DROP TABLE IF EXISTS recipe_consumable CASCADE;
                DROP TABLE IF EXISTS organization_leaderboard_stats CASCADE;
                DROP TABLE IF EXISTS inventory_change_log CASCADE;
                DROP TABLE IF EXISTS inventory_lot CASCADE;
                DROP TABLE IF EXISTS inventory_efficiency_stats CASCADE;
                DROP TABLE IF EXISTS freshness_snapshot CASCADE;
                DROP TABLE IF EXISTS extra_batch_ingredient CASCADE;
                DROP TABLE IF EXISTS extra_batch_container CASCADE;
                DROP TABLE IF EXISTS extra_batch_consumable CASCADE;
                DROP TABLE IF EXISTS batch_inventory_log CASCADE;
                DROP TABLE IF EXISTS batch_ingredient CASCADE;
                DROP TABLE IF EXISTS batch_container CASCADE;
                DROP TABLE IF EXISTS batch_consumable CASCADE;
                DROP TABLE IF EXISTS retention_deletion_queue CASCADE;
                DROP TABLE IF EXISTS product_sku_history CASCADE;
                DROP TABLE IF EXISTS reservation CASCADE;
                DROP TABLE IF EXISTS product_sku CASCADE;
                DROP TABLE IF EXISTS inventory_history CASCADE;
                DROP TABLE IF EXISTS batch_stats CASCADE;
                DROP TABLE IF EXISTS user_role_assignment CASCADE;
                DROP TABLE IF EXISTS role_permission CASCADE;
                DROP TABLE IF EXISTS batch_timer CASCADE;
                DROP TABLE IF EXISTS batch CASCADE;
                DROP TABLE IF EXISTS recipe CASCADE;
                DROP TABLE IF EXISTS product_variant CASCADE;
                DROP TABLE IF EXISTS global_item_alias CASCADE;
                DROP TABLE IF EXISTS inventory_item CASCADE;
                DROP TABLE IF EXISTS global_item CASCADE;
                DROP TABLE IF EXISTS user_stats CASCADE;
                DROP TABLE IF EXISTS user_preferences CASCADE;
                DROP TABLE IF EXISTS unit CASCADE;
                DROP TABLE IF EXISTS tag CASCADE;
                DROP TABLE IF EXISTS role CASCADE;
                DROP TABLE IF EXISTS product CASCADE;
                DROP TABLE IF EXISTS inventory_category CASCADE;
                DROP TABLE IF EXISTS ingredient_category CASCADE;
                DROP TABLE IF EXISTS domain_event CASCADE;
                DROP TABLE IF EXISTS custom_unit_mapping CASCADE;
                DROP TABLE IF EXISTS conversion_log CASCADE;
                DROP TABLE IF EXISTS "user" CASCADE;
                DROP TABLE IF EXISTS storage_addon_subscription CASCADE;
                DROP TABLE IF EXISTS storage_addon_purchase CASCADE;
                DROP TABLE IF EXISTS organization_stats CASCADE;
                DROP TABLE IF EXISTS organization_addon CASCADE;
                DROP TABLE IF EXISTS billing_snapshots CASCADE;
                DROP TABLE IF EXISTS developer_role_permission CASCADE;
                DROP TABLE IF EXISTS product_category CASCADE;
                DROP TABLE IF EXISTS pricing_snapshots CASCADE;
                DROP TABLE IF EXISTS stripe_event CASCADE;
                DROP TABLE IF EXISTS feature_flag CASCADE;
                DROP TABLE IF EXISTS permission CASCADE;
                DROP TABLE IF EXISTS developer_role CASCADE;
                DROP TABLE IF EXISTS developer_permission CASCADE;
                DROP TABLE IF EXISTS addon CASCADE;
            """))

            print("   ✅ Successfully dropped all tables with CASCADE")

        except Exception as e:
            print(f"   ⚠️  Error during CASCADE drop: {e}")
            # If CASCADE fails, try individual drops
            tables = inspector.get_table_names()
            for table in tables:
                try:
                    bind.execute(text(f'DROP TABLE IF EXISTS "{table}" CASCADE'))
                    print(f"   ✅ Dropped table {table}")
                except Exception as table_err:
                    print(f"   ⚠️  Could not drop table {table}: {table_err}")
    else:
        # SQLite - just drop tables in reverse dependency order
        tables_to_drop = [
            'unified_inventory_history', 'recipe_stats', 'recipe_ingredient', 'recipe_consumable',
            'organization_leaderboard_stats', 'inventory_change_log', 'inventory_lot',
            'inventory_efficiency_stats', 'freshness_snapshot', 'extra_batch_ingredient',
            'extra_batch_container', 'extra_batch_consumable', 'batch_inventory_log',
            'batch_ingredient', 'batch_container', 'batch_consumable', 'retention_deletion_queue',
            'product_sku_history', 'reservation', 'product_sku', 'inventory_history',
            'batch_stats', 'user_role_assignment', 'role_permission', 'batch_timer',
            'batch', 'recipe', 'product_variant', 'global_item_alias', 'inventory_item',
            'global_item', 'user_stats', 'user_preferences', 'unit', 'tag', 'role',
            'product', 'inventory_category', 'ingredient_category', 'domain_event',
            'custom_unit_mapping', 'conversion_log', 'user', 'storage_addon_subscription',
            'storage_addon_purchase', 'organization_stats', 'organization_addon',
            'billing_snapshots', 'tier_included_addon', 'tier_allowed_addon',
            'subscription_tier_permission', 'organization', 'developer_role_permission',
            'subscription_tier', 'product_category', 'pricing_snapshots', 'stripe_event',
            'feature_flag', 'permission', 'developer_role', 'developer_permission', 'addon'
        ]

        for table in tables_to_drop:
            try:
                op.drop_table(table)
                print(f"   ✅ Dropped table {table}")
            except Exception as e:
                print(f"   ℹ️  Table {table} does not exist or could not be dropped: {e}")

    # ### end Alembic commands ###