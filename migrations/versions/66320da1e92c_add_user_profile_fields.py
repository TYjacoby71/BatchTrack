"""Add user profile fields

Revision ID: 66320da1e92c
Revises: 244c8a376a74
Create Date: 2025-06-13 19:38:30.073064

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '66320da1e92c'
down_revision = '244c8a376a74'
branch_labels = None
depends_on = None


def upgrade():
    # Create organization table first
    op.create_table('organization',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('subscription_tier', sa.String(length=32), default='free'),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), default=True)
    )
    
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('first_name', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('last_name', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('email', sa.String(length=120), nullable=True))
        batch_op.add_column(sa.Column('phone', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('subscription_class', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(), nullable=True))

    # Create personal organizations for existing users
    connection = op.get_bind()
    
    # Get all existing users
    users = connection.execute(sa.text("SELECT id, username FROM user")).fetchall()
    
    for user in users:
        # Create personal organization for each user
        org_result = connection.execute(sa.text(
            "INSERT INTO organization (name, subscription_tier, is_active) VALUES (:name, 'free', 1)"
        ), {"name": f"{user.username}'s Organization"})
        
        # Get the organization ID (SQLite)
        org_id = connection.execute(sa.text("SELECT last_insert_rowid()")).scalar()
        
        # Update user with organization_id
        connection.execute(sa.text(
            "UPDATE user SET organization_id = :org_id WHERE id = :user_id"
        ), {"org_id": org_id, "user_id": user.id})

    # Make organization_id NOT NULL after backfilling
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('organization_id', nullable=False)
        batch_op.create_foreign_key('fk_user_organization', 'organization', ['organization_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('last_login')
        batch_op.drop_column('created_at')
        batch_op.drop_column('subscription_class')
        batch_op.drop_column('phone')
        batch_op.drop_column('email')
        batch_op.drop_column('last_name')
        batch_op.drop_column('first_name')

    # ### end Alembic commands ###
