
"""Add statistics models

Revision ID: 7fbece7d5bfd
Revises: final_merge_all_heads
Create Date: 2025-07-18 19:32:07.171754

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7fbece7d5bfd'
down_revision = 'final_merge_all_heads'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create organization_stats table
    op.create_table('organization_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_batches', sa.Integer(), nullable=True),
    sa.Column('completed_batches', sa.Integer(), nullable=True),
    sa.Column('failed_batches', sa.Integer(), nullable=True),
    sa.Column('cancelled_batches', sa.Integer(), nullable=True),
    sa.Column('total_users', sa.Integer(), nullable=True),
    sa.Column('active_users', sa.Integer(), nullable=True),
    sa.Column('total_recipes', sa.Integer(), nullable=True),
    sa.Column('total_inventory_items', sa.Integer(), nullable=True),
    sa.Column('total_inventory_value', sa.Float(), nullable=True),
    sa.Column('total_products', sa.Integer(), nullable=True),
    sa.Column('total_products_made', sa.Float(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', name='uq_organization_stats_org_id')
    )
    
    # Create user_stats table
    op.create_table('user_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('total_batches', sa.Integer(), nullable=True),
    sa.Column('completed_batches', sa.Integer(), nullable=True),
    sa.Column('failed_batches', sa.Integer(), nullable=True),
    sa.Column('cancelled_batches', sa.Integer(), nullable=True),
    sa.Column('total_recipes', sa.Integer(), nullable=True),
    sa.Column('recipes_created', sa.Integer(), nullable=True),
    sa.Column('inventory_adjustments', sa.Integer(), nullable=True),
    sa.Column('inventory_items_created', sa.Integer(), nullable=True),
    sa.Column('products_created', sa.Integer(), nullable=True),
    sa.Column('total_products_made', sa.Float(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Handle role table updates safely
    try:
        # Check if _alembic_tmp_role exists and drop it if it does
        op.drop_table('_alembic_tmp_role')
    except:
        pass  # Table doesn't exist, continue
    
    # Update role table with batch operations for SQLite compatibility
    with op.batch_alter_table('role', schema=None) as batch_op:
        # Add unique constraint with explicit name
        try:
            batch_op.create_unique_constraint('uq_role_name_organization', ['name', 'organization_id'])
        except:
            pass  # Constraint might already exist
        
        # Add foreign key constraints
        try:
            batch_op.create_foreign_key('fk_role_created_by', 'user', ['created_by'], ['id'])
        except:
            pass  # Foreign key might already exist
            
        try:
            batch_op.create_foreign_key('fk_role_organization', 'organization', ['organization_id'], ['id'])
        except:
            pass  # Foreign key might already exist

    # Update user table - remove old columns if they exist
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Try to drop old foreign key constraint if it exists
        try:
            batch_op.drop_constraint('fk_user_role_id', type_='foreignkey')
        except:
            pass  # Constraint might not exist
        
        # Drop old columns if they exist
        try:
            batch_op.drop_column('role_id')
        except:
            pass  # Column might not exist
            
        try:
            batch_op.drop_column('subscription_class')
        except:
            pass  # Column might not exist
            
        try:
            batch_op.drop_column('is_owner')
        except:
            pass  # Column might not exist

    # Update user_preferences table
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        # Update timezone column type
        batch_op.alter_column('timezone',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=True)
        
        # Drop index if it exists
        try:
            batch_op.drop_index('ix_user_preferences_organization_id')
        except:
            pass  # Index might not exist

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Restore user_preferences table
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        try:
            batch_op.create_index('ix_user_preferences_organization_id', ['organization_id'], unique=False)
        except:
            pass
        batch_op.alter_column('timezone',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)

    # Restore user table
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('subscription_class', sa.VARCHAR(length=32), nullable=True))
        batch_op.add_column(sa.Column('is_owner', sa.BOOLEAN(), nullable=True))
        try:
            batch_op.create_foreign_key('fk_user_role_id', 'role', ['role_id'], ['id'])
        except:
            pass

    # Restore role table
    with op.batch_alter_table('role', schema=None) as batch_op:
        try:
            batch_op.drop_constraint('fk_role_organization', type_='foreignkey')
        except:
            pass
        try:
            batch_op.drop_constraint('fk_role_created_by', type_='foreignkey')
        except:
            pass
        try:
            batch_op.drop_constraint('uq_role_name_organization', type_='unique')
        except:
            pass

    # Drop statistics tables
    op.drop_table('user_stats')
    op.drop_table('organization_stats')
    
    # ### end Alembic commands ###
