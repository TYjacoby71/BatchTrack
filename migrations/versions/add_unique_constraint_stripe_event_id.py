
"""add unique constraint on stripe event id

Revision ID: add_unique_constraint_stripe
Revises: 'fix_product_sku_name_column'
Create Date: 2025-08-11 20:06:30.000000

"""
from alembic import op
import sqlalchemy as sa
import sys, os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from postgres_helpers import ensure_unique_constraint_or_index, table_exists


# revision identifiers, used by Alembic.
revision = 'add_unique_constraint_stripe'
down_revision = 'fix_product_sku_name_column'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First ensure the stripe_event table exists
    from sqlalchemy import inspect
    bind = op.get_bind()
    inspector = inspect(bind)
    
    if 'stripe_event' not in inspector.get_table_names():
        print("Creating stripe_event table...")
        op.create_table('stripe_event',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('event_id', sa.String(length=255), nullable=False),
            sa.Column('event_type', sa.String(length=128), nullable=False),
            sa.Column('received_at', sa.DateTime(), nullable=False),
            sa.Column('processed_at', sa.DateTime(), nullable=True),
            sa.Column('status', sa.String(length=32), nullable=True),
            sa.Column('error_message', sa.Text(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_stripe_event_event_id'), 'stripe_event', ['event_id'], unique=False)
        print("âœ… Created stripe_event table")
    
    # Ensure uniqueness (constraint on PG, unique index on SQLite)
    ensure_unique_constraint_or_index('stripe_event', 'uq_stripe_event_event_id', ['event_id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove unique constraint on stripe_event.event_id using batch mode for SQLite compatibility
    from sqlalchemy import inspect
    bind = op.get_bind()
    inspector = inspect(bind)
    
    if 'stripe_event' in inspector.get_table_names():
        with op.batch_alter_table('stripe_event', schema=None) as batch_op:
            batch_op.drop_constraint('uq_stripe_event_event_id', type_='unique')
    # ### end Alembic commands ###
