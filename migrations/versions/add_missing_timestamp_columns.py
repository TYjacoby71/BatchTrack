
"""add missing timestamp columns

Revision ID: add_missing_timestamps
Revises: f3b0e59fe9c1
Create Date: 2025-01-31 23:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = 'add_missing_timestamps'
down_revision = 'f3b0e59fe9c1'
branch_labels = None
depends_on = None


def column_exists(table_name, column_name):
    """Check if a column exists in a table"""
    bind = op.get_bind()
    inspector = inspect(bind)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add missing columns to User table (only if they don't exist)
    if not column_exists('user', 'first_name'):
        op.add_column('user', sa.Column('first_name', sa.String(length=100), nullable=True))
    if not column_exists('user', 'last_name'):
        op.add_column('user', sa.Column('last_name', sa.String(length=100), nullable=True))
    if not column_exists('user', 'phone'):
        op.add_column('user', sa.Column('phone', sa.String(length=20), nullable=True))
    if not column_exists('user', 'is_organization_owner'):
        op.add_column('user', sa.Column('is_organization_owner', sa.Boolean(), nullable=True))
    if not column_exists('user', 'updated_at'):
        op.add_column('user', sa.Column('updated_at', sa.DateTime(), nullable=True))

    # Add missing columns to Organization table  
    if not column_exists('organization', 'contact_email'):
        op.add_column('organization', sa.Column('contact_email', sa.String(length=120), nullable=True))
    if not column_exists('organization', 'subscription_tier_id'):
        op.add_column('organization', sa.Column('subscription_tier_id', sa.Integer(), nullable=True))
    if not column_exists('organization', 'updated_at'):
        op.add_column('organization', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Add foreign key constraint for subscription_tier_id (only if column was added)
    if not column_exists('organization', 'subscription_tier_id'):
        try:
            op.create_foreign_key(
                'fk_organization_subscription_tier', 
                'organization',
                'subscription_tier', 
                ['subscription_tier_id'], 
                ['id']
            )
        except Exception as e:
            print(f"Warning: Could not create foreign key constraint: {e}")

    # Add missing columns to Role table
    if not column_exists('role', 'is_system_role'):
        op.add_column('role', sa.Column('is_system_role', sa.Boolean(), nullable=True))
    if not column_exists('role', 'created_at'):
        op.add_column('role', sa.Column('created_at', sa.DateTime(), nullable=True))
    if not column_exists('role', 'updated_at'):
        op.add_column('role', sa.Column('updated_at', sa.DateTime(), nullable=True))

    # Add missing columns to UserRoleAssignment table
    if not column_exists('user_role_assignment', 'organization_id'):
        op.add_column('user_role_assignment', sa.Column('organization_id', sa.Integer(), nullable=True))
    if not column_exists('user_role_assignment', 'developer_role_id'):
        op.add_column('user_role_assignment', sa.Column('developer_role_id', sa.Integer(), nullable=True))
    if not column_exists('user_role_assignment', 'is_active'):
        op.add_column('user_role_assignment', sa.Column('is_active', sa.Boolean(), nullable=True))

    # Add foreign key constraints for UserRoleAssignment (only if columns were added)
    try:
        if not column_exists('user_role_assignment', 'organization_id'):
            op.create_foreign_key(
                'fk_user_role_assignment_organization', 
                'user_role_assignment',
                'organization', 
                ['organization_id'], 
                ['id']
            )
        if not column_exists('user_role_assignment', 'developer_role_id'):
            op.create_foreign_key(
                'fk_user_role_assignment_developer_role', 
                'user_role_assignment',
                'developer_role', 
                ['developer_role_id'], 
                ['id']
            )
    except Exception as e:
        print(f"Warning: Could not create foreign key constraints: {e}")

    # Add missing key column to SubscriptionTier
    if not column_exists('subscription_tier', 'key'):
        op.add_column('subscription_tier', sa.Column('key', sa.String(length=50), nullable=True))

    print("âœ… Migration completed: Added missing columns that didn't already exist")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Remove SubscriptionTier additions
    if column_exists('subscription_tier', 'key'):
        op.drop_column('subscription_tier', 'key')

    # Remove UserRoleAssignment additions
    try:
        op.drop_constraint('fk_user_role_assignment_developer_role', 'user_role_assignment', type_='foreignkey')
        op.drop_constraint('fk_user_role_assignment_organization', 'user_role_assignment', type_='foreignkey')
    except Exception as e:
        print(f"Warning: Could not drop foreign key constraints: {e}")
    
    if column_exists('user_role_assignment', 'is_active'):
        op.drop_column('user_role_assignment', 'is_active')
    if column_exists('user_role_assignment', 'developer_role_id'):
        op.drop_column('user_role_assignment', 'developer_role_id')
    if column_exists('user_role_assignment', 'organization_id'):
        op.drop_column('user_role_assignment', 'organization_id')

    # Remove Role additions
    if column_exists('role', 'updated_at'):
        op.drop_column('role', 'updated_at')
    if column_exists('role', 'created_at'):
        op.drop_column('role', 'created_at')
    if column_exists('role', 'is_system_role'):
        op.drop_column('role', 'is_system_role')

    # Remove Organization additions
    try:
        op.drop_constraint('fk_organization_subscription_tier', 'organization', type_='foreignkey')
    except Exception as e:
        print(f"Warning: Could not drop foreign key constraint: {e}")
    
    if column_exists('organization', 'updated_at'):
        op.drop_column('organization', 'updated_at')
    if column_exists('organization', 'subscription_tier_id'):
        op.drop_column('organization', 'subscription_tier_id')
    if column_exists('organization', 'contact_email'):
        op.drop_column('organization', 'contact_email')

    # Remove User additions
    if column_exists('user', 'updated_at'):
        op.drop_column('user', 'updated_at')
    if column_exists('user', 'is_organization_owner'):
        op.drop_column('user', 'is_organization_owner')
    if column_exists('user', 'phone'):
        op.drop_column('user', 'phone')
    if column_exists('user', 'last_name'):
        op.drop_column('user', 'last_name')
    if column_exists('user', 'first_name'):
        op.drop_column('user', 'first_name')

    # ### end Alembic commands ###
