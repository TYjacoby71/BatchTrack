"""empty message

Revision ID: d953779b55a3
Revises: 20250912_01
Create Date: 2025-09-16 21:08:49.172551

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect, text


# revision identifiers, used by Alembic.
revision = 'd953779b55a3'
down_revision = '20250912_01'
branch_labels = None
depends_on = None


def table_exists(table_name):
    """Check if a table exists"""
    bind = op.get_bind()
    inspector = inspect(bind)
    return table_name in inspector.get_table_names()


def column_exists(table_name, column_name):
    """Check if a column exists in a table"""
    if not table_exists(table_name):
        return False
    bind = op.get_bind()
    inspector = inspect(bind)
    try:
        columns = [col['name'] for col in inspector.get_columns(table_name)]
        return column_name in columns
    except Exception:
        return False


def index_exists(table_name, index_name):
    """Check if an index exists on a table"""
    try:
        bind = op.get_bind()
        result = bind.execute(text("""
            SELECT COUNT(*)
            FROM pg_indexes
            WHERE tablename = :table_name
            AND indexname = :index_name
        """), {"table_name": table_name, "index_name": index_name})
        return result.scalar() > 0
    except Exception:
        return False

def safe_add_column(table_name, column_name, column_def):
    """Safely add a column to a table if it doesn't exist."""
    if not column_exists(table_name, column_name):
        print(f"      Adding column '{column_name}' to table '{table_name}'...")
        with op.batch_alter_table(table_name, schema=None) as batch_op:
            batch_op.add_column(column_def)
        print(f"      ✅ Column '{column_name}' added to table '{table_name}'.")
    else:
        print(f"      ✅ Column '{column_name}' already exists in table '{table_name}' - skipping.")

def safe_drop_column(table_name, column_name):
    """Safely drop a column from a table if it exists."""
    if column_exists(table_name, column_name):
        print(f"      Dropping column '{column_name}' from table '{table_name}'...")
        with op.batch_alter_table(table_name, schema=None) as batch_op:
            batch_op.drop_column(column_name)
        print(f"      ✅ Column '{column_name}' dropped from table '{table_name}'.")
    else:
        print(f"      ⚠️ Column '{column_name}' does not exist in table '{table_name}', skipping drop.")

def safe_create_index(table_name, index_name, columns, unique=False):
    """Safely create an index on a table if it doesn't exist."""
    if not index_exists(table_name, index_name):
        print(f"      Creating index '{index_name}' on table '{table_name}'...")
        with op.batch_alter_table(table_name, schema=None) as batch_op:
            batch_op.create_index(batch_op.f(index_name), columns, unique=unique)
        print(f"      ✅ Index '{index_name}' created on table '{table_name}'.")
    else:
        print(f"      ✅ Index '{index_name}' already exists on table '{table_name}' - skipping.")

def safe_drop_index(table_name, index_name):
    """Safely drop an index from a table if it exists."""
    if index_exists(table_name, index_name):
        print(f"      Dropping index '{index_name}' from table '{table_name}'...")
        with op.batch_alter_table(table_name, schema=None) as batch_op:
            batch_op.drop_index(index_name)
        print(f"      ✅ Index '{index_name}' dropped from table '{table_name}'.")
    else:
        print(f"      ⚠️ Index '{index_name}' does not exist on table '{table_name}', skipping drop.")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    print("=== Creating storage and retention tables ===")

    if not table_exists('storage_addon_purchase'):
        print("   Creating storage_addon_purchase table...")
        op.create_table('storage_addon_purchase',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('stripe_session_id', sa.String(length=255), nullable=True),
        sa.Column('stripe_price_lookup_key', sa.String(length=128), nullable=True),
        sa.Column('retention_extension_days', sa.Integer(), nullable=True),
        sa.Column('purchased_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        print("   ✅ storage_addon_purchase table created")
    else:
        print("   ✅ storage_addon_purchase table already exists - skipping")

    if not table_exists('storage_addon_subscription'):
        print("   Creating storage_addon_subscription table...")
        op.create_table('storage_addon_subscription',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('stripe_subscription_id', sa.String(length=255), nullable=False),
        sa.Column('price_lookup_key', sa.String(length=128), nullable=True),
        sa.Column('status', sa.String(length=32), nullable=False),
        sa.Column('current_period_end', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('stripe_subscription_id')
        )
        print("   ✅ storage_addon_subscription table created")
    else:
        print("   ✅ storage_addon_subscription table already exists - skipping")

    if not table_exists('retention_deletion_queue'):
        print("   Creating retention_deletion_queue table...")
        op.create_table('retention_deletion_queue',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('recipe_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(length=16), nullable=False),
        sa.Column('acknowledged_at', sa.DateTime(), nullable=True),
        sa.Column('delete_after_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
        sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('organization_id', 'recipe_id', name='uq_retention_queue_org_recipe')
        )
        print("   ✅ retention_deletion_queue table created")
    else:
        print("   ✅ retention_deletion_queue table already exists - skipping")

    with op.batch_alter_table('batch_stats', schema=None) as batch_op:
        safe_drop_index('batch_stats', 'idx_batch_stats_org')
        safe_drop_index('batch_stats', 'idx_batch_stats_recipe')

    with op.batch_alter_table('domain_event', schema=None) as batch_op:
        safe_drop_index('domain_event', 'ix_domain_event_entity')
        safe_drop_index('domain_event', 'ix_domain_event_org')
        safe_drop_index('domain_event', 'ix_domain_event_user')
        safe_create_index('domain_event', 'ix_domain_event_entity_id', ['entity_id'], unique=False)
        safe_create_index('domain_event', 'ix_domain_event_entity_type', ['entity_type'], unique=False)
        safe_create_index('domain_event', 'ix_domain_event_organization_id', ['organization_id'], unique=False)
        safe_create_index('domain_event', 'ix_domain_event_user_id', ['user_id'], unique=False)

    with op.batch_alter_table('freshness_snapshot', schema=None) as batch_op:
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_date')
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_item')
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_org')
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_inventory_item_id', ['inventory_item_id'], unique=False)
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_organization_id', ['organization_id'], unique=False)
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_snapshot_date', ['snapshot_date'], unique=False)

    with op.batch_alter_table('global_item', schema=None) as batch_op:
        safe_drop_index('global_item', 'ix_global_item_is_archived')
        if column_exists('global_item', 'archived_by'):
            batch_op.drop_constraint(None, type_='foreignkey') # This might need adjustment based on constraint name if it's not auto-generated
        safe_add_column('global_item', 'archived_by', sa.Column('archived_by', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'user', ['archived_by'], ['id'])
        safe_drop_column('global_item', 'suggested_inventory_category_id')


    with op.batch_alter_table('inventory_change_log', schema=None) as batch_op:
        safe_drop_index('inventory_change_log', 'idx_change_log_item_date')
        safe_drop_index('inventory_change_log', 'idx_change_log_type_date')

    with op.batch_alter_table('inventory_efficiency_stats', schema=None) as batch_op:
        safe_drop_index('inventory_efficiency_stats', 'idx_inventory_efficiency_org')

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        safe_drop_index('inventory_item', 'ix_inventory_item_inventory_category_id')

    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # Add timestamp columns to recipe table
    safe_add_column('recipe', 'created_at', sa.Column('created_at', sa.DateTime(), nullable=True))
    safe_add_column('recipe', 'updated_at', sa.Column('updated_at', sa.DateTime(), nullable=True))

    with op.batch_alter_table('recipe_consumable', schema=None) as batch_op:
        safe_drop_index('recipe_consumable', 'ix_recipe_consumable_organization_id')

    with op.batch_alter_table('recipe_stats', schema=None) as batch_op:
        safe_drop_index('recipe_stats', 'idx_recipe_stats_org')

    with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
        safe_add_column('subscription_tier', 'data_retention_days', sa.Column('data_retention_days', sa.Integer(), nullable=True))
        safe_add_column('subscription_tier', 'retention_notice_days', sa.Column('retention_notice_days', sa.Integer(), nullable=True))
        safe_add_column('subscription_tier', 'storage_addon_retention_days', sa.Column('storage_addon_retention_days', sa.Integer(), nullable=True))
        safe_add_column('subscription_tier', 'stripe_storage_lookup_key', sa.Column('stripe_storage_lookup_key', sa.String(length=128), nullable=True))
        safe_create_index('subscription_tier', 'uq_subscription_tier_stripe_storage_lookup_key', ['stripe_storage_lookup_key'], unique=True)

    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.alter_column('conversion_factor',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        safe_drop_index('user', 'ix_user_organization_id')

    # Create stripe_event table with existence check
    if not table_exists('stripe_event'):
        print("   Creating stripe_event table...")
        op.create_table('stripe_event',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('event_id', sa.String(length=255), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('type', sa.String(length=128), nullable=False),
        sa.Column('data', sa.JSON(), nullable=True),
        sa.Column('received_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('event_id')
        )
        print("   ✅ stripe_event table created successfully")
    else:
        print("   ✅ stripe_event table already exists - skipping creation")

    # ### end Alembic commands ###


def downgrade():
    """Remove stripe_event table with existence check"""
    from sqlalchemy import inspect

    # Get database connection and inspector
    connection = op.get_bind()
    inspector = inspect(connection)

    def table_exists(table_name):
        """Check if a table exists"""
        try:
            return table_name in inspector.get_table_names()
        except Exception:
            return False

    print("=== Removing stripe_event table ===")

    # ### commands auto generated by Alembic - please adjust! ###
    if table_exists('stripe_event'):
        print("   Dropping stripe_event table...")
        op.drop_table('stripe_event')
        print("   ✅ stripe_event table dropped successfully")
    else:
        print("   ⚠️  stripe_event table doesn't exist, skipping")
    # ### end Alembic commands ###

    with op.batch_alter_table('user', schema=None) as batch_op:
        safe_create_index('user', 'ix_user_organization_id', ['organization_id'], unique=False)

    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.alter_column('conversion_factor',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)

    with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
        safe_drop_index('subscription_tier', 'uq_subscription_tier_stripe_storage_lookup_key')
        safe_drop_column('subscription_tier', 'stripe_storage_lookup_key')
        safe_drop_column('subscription_tier', 'storage_addon_retention_days')
        safe_drop_column('subscription_tier', 'retention_notice_days')
        safe_drop_column('subscription_tier', 'data_retention_days')

    with op.batch_alter_table('recipe_stats', schema=None) as batch_op:
        safe_create_index('recipe_stats', 'idx_recipe_stats_org', ['organization_id'], unique=False)

    with op.batch_alter_table('recipe_consumable', schema=None) as batch_op:
        safe_create_index('recipe_consumable', 'ix_recipe_consumable_organization_id', ['organization_id'], unique=False)

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        safe_drop_column('recipe', 'updated_at')
        safe_drop_column('recipe', 'created_at')

    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        safe_create_index('inventory_item', 'ix_inventory_item_inventory_category_id', ['inventory_category_id'], unique=False)

    with op.batch_alter_table('inventory_efficiency_stats', schema=None) as batch_op:
        safe_create_index('inventory_efficiency_stats', 'idx_inventory_efficiency_org', ['organization_id'], unique=False)

    with op.batch_alter_table('inventory_change_log', schema=None) as batch_op:
        safe_create_index('inventory_change_log', 'idx_change_log_type_date', ['change_type', 'change_date'], unique=False)
        safe_create_index('inventory_change_log', 'idx_change_log_item_date', ['inventory_item_id', 'change_date'], unique=False)

    with op.batch_alter_table('global_item', schema=None) as batch_op:
        safe_create_index('global_item', 'ix_global_item_is_archived', ['is_archived'], unique=False)
        # This is a placeholder. Actual constraint name or type might need adjustment.
        # Assuming it's a foreign key constraint on 'archived_by'
        try:
            op.execute(text("ALTER TABLE global_item DROP CONSTRAINT IF EXISTS global_item_archived_by_fkey"))
        except Exception as e:
            print(f"        Warning: Could not drop constraint: {e}")
        safe_add_column('global_item', 'suggested_inventory_category_id', sa.Column('suggested_inventory_category_id', sa.INTEGER(), autoincrement=False, nullable=True))


    with op.batch_alter_table('freshness_snapshot', schema=None) as batch_op:
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_snapshot_date')
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_organization_id')
        safe_drop_index('freshness_snapshot', 'ix_freshness_snapshot_inventory_item_id')
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_org', ['organization_id'], unique=False)
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_item', ['inventory_item_id'], unique=False)
        safe_create_index('freshness_snapshot', 'ix_freshness_snapshot_date', ['snapshot_date'], unique=False)

    with op.batch_alter_table('domain_event', schema=None) as batch_op:
        safe_drop_index('domain_event', 'ix_domain_event_entity_id')
        safe_drop_index('domain_event', 'ix_domain_event_entity_type')
        safe_drop_index('domain_event', 'ix_domain_event_organization_id')
        safe_drop_index('domain_event', 'ix_domain_event_user_id')
        safe_create_index('domain_event', 'ix_domain_event_user', ['user_id'], unique=False)
        safe_create_index('domain_event', 'ix_domain_event_org', ['organization_id'], unique=False)
        safe_create_index('domain_event', 'ix_domain_event_entity', ['entity_type', 'entity_id'], unique=False)

    with op.batch_alter_table('batch_stats', schema=None) as batch_op:
        safe_create_index('batch_stats', 'idx_batch_stats_recipe', ['recipe_id'], unique=False)
        safe_create_index('batch_stats', 'idx_batch_stats_org', ['organization_id'], unique=False)

    if table_exists('retention_deletion_queue'):
        print("   Dropping retention_deletion_queue table...")
        op.drop_table('retention_deletion_queue')
        print("   ✅ retention_deletion_queue table dropped successfully")
    else:
        print("   ⚠️ retention_deletion_queue table doesn't exist, skipping")

    if table_exists('storage_addon_subscription'):
        print("   Dropping storage_addon_subscription table...")
        op.drop_table('storage_addon_subscription')
        print("   ✅ storage_addon_subscription table dropped successfully")
    else:
        print("   ⚠️ storage_addon_subscription table doesn't exist, skipping")

    if table_exists('storage_addon_purchase'):
        print("   Dropping storage_addon_purchase table...")
        op.drop_table('storage_addon_purchase')
        print("   ✅ storage_addon_purchase table dropped successfully")
    else:
        print("   ⚠️ storage_addon_purchase table doesn't exist, skipping")
    # ### end Alembic commands ###