"""Add missing FIFO and expiration fields

Revision ID: 8f193ade2856
Revises: e2fac90b4ab4
Create Date: 2025-06-18 01:00:00.544975

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8f193ade2856'
down_revision = 'e2fac90b4ab4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recipe_ingredient',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=32), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('order_position', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('recipe_ingredients')
    with op.batch_alter_table('batch', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('created_by')

    with op.batch_alter_table('batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_size', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('container_quantity', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('fill_quantity', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('fill_unit', sa.String(length=32), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('cost_each')
        batch_op.drop_column('quantity_used')
        batch_op.drop_column('container_id')

    with op.batch_alter_table('batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('inventory_item_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('quantity_used', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('total_cost', sa.Float(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'inventory_item', ['inventory_item_id'], ['id'])
        batch_op.drop_column('ingredient_id')
        batch_op.drop_column('amount_used')
        batch_op.drop_column('created_by')

    with op.batch_alter_table('batch_inventory_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('inventory_item_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('action', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('unit', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('old_stock', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('new_stock', sa.Float(), nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'inventory_item', ['inventory_item_id'], ['id'])
        batch_op.drop_column('notes')
        batch_op.drop_column('reason')
        batch_op.drop_column('created_by')

    with op.batch_alter_table('batch_timer', schema=None) as batch_op:
        batch_op.alter_column('batch_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               nullable=False)
        batch_op.alter_column('duration_seconds',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('conversion_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('conversion_type', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('ingredient_name', sa.String(length=128), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('density_used')
        batch_op.drop_column('ingredient_id')

    with op.batch_alter_table('custom_unit_mapping', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ingredient_item_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('unit_name', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('conversion_factor', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('base_unit', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'inventory_item', ['ingredient_item_id'], ['id'])
        batch_op.drop_column('from_unit')
        batch_op.drop_column('multiplier')
        batch_op.drop_column('to_unit')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('extra_batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_size', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('container_quantity', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('fill_quantity', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('fill_unit', sa.String(length=32), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('cost_each')
        batch_op.drop_column('quantity_used')
        batch_op.drop_column('container_id')

    with op.batch_alter_table('extra_batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('quantity_used', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('total_cost', sa.Float(), nullable=True))
        batch_op.drop_column('quantity')

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('color', sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.drop_column('default_density')

    with op.batch_alter_table('inventory_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('fifo_code', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('batch_id', sa.Integer(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'batch', ['batch_id'], ['id'])
        batch_op.drop_column('is_perishable')
        batch_op.drop_column('expiration_date')
        batch_op.drop_column('used_for_batch_id')
        batch_op.drop_column('shelf_life_days')
        batch_op.drop_column('quantity_used')

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_stock', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('stock_unit', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               nullable=False)
        batch_op.drop_column('unit')
        batch_op.drop_column('is_archived')
        batch_op.drop_column('is_perishable')
        batch_op.drop_column('expiration_date')
        batch_op.drop_column('storage_amount')
        batch_op.drop_column('intermediate')
        batch_op.drop_column('shelf_life_days')
        batch_op.drop_column('quantity')
        batch_op.drop_column('type')
        batch_op.drop_column('storage_unit')

    with op.batch_alter_table('product_event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('event_type',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=32),
               nullable=False)
        batch_op.drop_column('note')

    with op.batch_alter_table('product_inventory', schema=None) as batch_op:
        batch_op.add_column(sa.Column('variant_id', sa.Integer(), nullable=False))
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('quantity',
               existing_type=sa.FLOAT(),
               nullable=False)
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               nullable=False)
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'product_variation', ['variant_id'], ['id'])
        batch_op.drop_column('container_id')
        batch_op.drop_column('variant')
        batch_op.drop_column('expiration_date')
        batch_op.drop_column('sku')
        batch_op.drop_column('batch_id')
        batch_op.drop_column('timestamp')
        batch_op.drop_column('created_by')
        batch_op.drop_column('notes')
        batch_op.drop_column('batch_cost_per_unit')
        batch_op.drop_column('size_label')

    with op.batch_alter_table('product_variation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.create_unique_constraint('unique_product_variation', ['product_id', 'name'])
        batch_op.drop_column('sku')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.add_column(sa.Column('color', sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=64),
               nullable=False)
        batch_op.drop_column('created_at')

    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.add_column(sa.Column('symbol', sa.String(length=16), nullable=False))
        batch_op.add_column(sa.Column('conversion_factor', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('base_unit',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('is_mapped')
        batch_op.drop_column('multiplier_to_base')
        batch_op.drop_column('is_custom')
        batch_op.drop_column('user_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('is_custom', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('multiplier_to_base', sa.FLOAT(), nullable=False))
        batch_op.add_column(sa.Column('is_mapped', sa.BOOLEAN(), nullable=True))
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.alter_column('base_unit',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
        batch_op.drop_column('is_active')
        batch_op.drop_column('conversion_factor')
        batch_op.drop_column('symbol')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DATETIME(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=32),
               nullable=True)
        batch_op.drop_column('is_active')
        batch_op.drop_column('description')
        batch_op.drop_column('color')

    with op.batch_alter_table('product_variation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sku', sa.VARCHAR(length=64), nullable=True))
        batch_op.drop_constraint('unique_product_variation', type_='unique')
        batch_op.drop_column('is_active')

    with op.batch_alter_table('product_inventory', schema=None) as batch_op:
        batch_op.add_column(sa.Column('size_label', sa.VARCHAR(length=100), nullable=True))
        batch_op.add_column(sa.Column('batch_cost_per_unit', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('notes', sa.TEXT(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('timestamp', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('batch_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('sku', sa.VARCHAR(length=100), nullable=True))
        batch_op.add_column(sa.Column('expiration_date', sa.DATE(), nullable=True))
        batch_op.add_column(sa.Column('variant', sa.VARCHAR(length=100), nullable=True))
        batch_op.add_column(sa.Column('container_id', sa.INTEGER(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'batch', ['batch_id'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('quantity',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('variant_id')

    with op.batch_alter_table('product_event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('note', sa.TEXT(), nullable=True))
        batch_op.alter_column('event_type',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('description')

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('storage_unit', sa.VARCHAR(length=50), nullable=True))
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=32), nullable=True))
        batch_op.add_column(sa.Column('quantity', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('shelf_life_days', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('intermediate', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('storage_amount', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('expiration_date', sa.DATE(), nullable=True))
        batch_op.add_column(sa.Column('is_perishable', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('is_archived', sa.BOOLEAN(), nullable=True))
        batch_op.add_column(sa.Column('unit', sa.VARCHAR(length=32), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('stock_unit')
        batch_op.drop_column('current_stock')

    with op.batch_alter_table('inventory_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('quantity_used', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('shelf_life_days', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('used_for_batch_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('expiration_date', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('is_perishable', sa.BOOLEAN(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'batch', ['used_for_batch_id'], ['id'])
        batch_op.drop_column('batch_id')
        batch_op.drop_column('fifo_code')

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('default_density', sa.FLOAT(), nullable=False))
        batch_op.drop_column('is_active')
        batch_op.drop_column('color')
        batch_op.drop_column('description')

    with op.batch_alter_table('extra_batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('quantity', sa.FLOAT(), nullable=False))
        batch_op.drop_column('total_cost')
        batch_op.drop_column('quantity_used')

    with op.batch_alter_table('extra_batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('quantity_used', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('cost_each', sa.FLOAT(), nullable=True))
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.drop_column('fill_unit')
        batch_op.drop_column('fill_quantity')
        batch_op.drop_column('container_quantity')
        batch_op.drop_column('container_size')

    with op.batch_alter_table('custom_unit_mapping', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('to_unit', sa.VARCHAR(length=64), nullable=False))
        batch_op.add_column(sa.Column('multiplier', sa.FLOAT(), nullable=False))
        batch_op.add_column(sa.Column('from_unit', sa.VARCHAR(length=64), nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('notes')
        batch_op.drop_column('base_unit')
        batch_op.drop_column('conversion_factor')
        batch_op.drop_column('unit_name')
        batch_op.drop_column('ingredient_item_id')

    with op.batch_alter_table('conversion_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ingredient_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('density_used', sa.FLOAT(), nullable=True))
        batch_op.create_foreign_key(None, 'inventory_item', ['ingredient_id'], ['id'])
        batch_op.drop_column('ingredient_name')
        batch_op.drop_column('conversion_type')

    with op.batch_alter_table('batch_timer', schema=None) as batch_op:
        batch_op.alter_column('duration_seconds',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.alter_column('batch_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('batch_inventory_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('reason', sa.VARCHAR(length=32), nullable=False))
        batch_op.add_column(sa.Column('notes', sa.TEXT(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('new_stock')
        batch_op.drop_column('old_stock')
        batch_op.drop_column('unit')
        batch_op.drop_column('action')
        batch_op.drop_column('inventory_item_id')

    with op.batch_alter_table('batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('amount_used', sa.FLOAT(), nullable=False))
        batch_op.add_column(sa.Column('ingredient_id', sa.INTEGER(), nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['ingredient_id'], ['id'])
        batch_op.drop_column('total_cost')
        batch_op.drop_column('quantity_used')
        batch_op.drop_column('inventory_item_id')

    with op.batch_alter_table('batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('quantity_used', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('cost_each', sa.FLOAT(), nullable=True))
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.drop_column('fill_unit')
        batch_op.drop_column('fill_quantity')
        batch_op.drop_column('container_quantity')
        batch_op.drop_column('container_size')

    with op.batch_alter_table('batch', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), nullable=True))
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])

    op.create_table('recipe_ingredients',
    sa.Column('recipe_id', sa.INTEGER(), nullable=False),
    sa.Column('inventory_item_id', sa.INTEGER(), nullable=False),
    sa.Column('amount', sa.FLOAT(), nullable=False),
    sa.Column('unit', sa.VARCHAR(length=32), nullable=False),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'inventory_item_id')
    )
    op.drop_table('recipe_ingredient')
    # ### end Alembic commands ###
