"""empty message

Revision ID: 8867e6002494
Revises: 20251009_1
Create Date: 2025-10-09 20:24:24.382516

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = '8867e6002494'
down_revision = '20251009_1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tier_included_addon',
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('addon_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['addon_id'], ['addon.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('tier_id', 'addon_id')
    )
    with op.batch_alter_table('global_item_alias', schema=None) as batch_op:
        batch_op.drop_index('ix_global_item_alias_alias')
        batch_op.drop_index('ix_global_item_alias_global_item_id')
        batch_op.drop_index('ix_global_item_alias_tsv', postgresql_using='gin')

    op.drop_table('global_item_alias')
    with op.batch_alter_table('batch', schema=None) as batch_op:
        batch_op.drop_index('ix_batch_baker_base_flour_g')
        batch_op.drop_index('ix_batch_baker_salt_pct')
        batch_op.drop_index('ix_batch_baker_water_pct')
        batch_op.drop_index('ix_batch_baker_yeast_pct')
        batch_op.drop_index('ix_batch_candle_fragrance_pct')
        batch_op.drop_index('ix_batch_candle_vessel_ml')
        batch_op.drop_index('ix_batch_cosm_emulsifier_pct')
        batch_op.drop_index('ix_batch_cosm_preservative_pct')
        batch_op.drop_index('ix_batch_org')
        batch_op.drop_index('ix_batch_soap_lye_type')
        batch_op.drop_index('ix_batch_soap_superfat')
        batch_op.drop_index('ix_batch_soap_water_pct')
        batch_op.drop_index('ix_batch_vessel_fill_pct')
        batch_op.drop_column('candle_vessel_ml')
        batch_op.drop_column('soap_water_pct')
        batch_op.drop_column('counts')
        batch_op.drop_column('baker_yeast_pct')
        batch_op.drop_column('soap_superfat')
        batch_op.drop_column('cosm_emulsifier_pct')
        batch_op.drop_column('vessel_fill_pct')
        batch_op.drop_column('baker_base_flour_g')
        batch_op.drop_column('baker_water_pct')
        batch_op.drop_column('soap_lye_type')
        batch_op.drop_column('candle_fragrance_pct')
        batch_op.drop_column('cosm_preservative_pct')
        batch_op.drop_column('baker_salt_pct')

    with op.batch_alter_table('batch_consumable', schema=None) as batch_op:
        batch_op.drop_index('ix_batch_consumable_batch_id')
        batch_op.drop_index('ix_batch_consumable_inventory_item_id')
        batch_op.drop_index('ix_batch_consumable_organization_id')

    with op.batch_alter_table('extra_batch_consumable', schema=None) as batch_op:
        batch_op.drop_index('ix_extra_batch_consumable_batch_id')
        batch_op.drop_index('ix_extra_batch_consumable_inventory_item_id')
        batch_op.drop_index('ix_extra_batch_consumable_organization_id')

    with op.batch_alter_table('global_item', schema=None) as batch_op:
        batch_op.drop_index('ix_global_item_aka_gin', postgresql_using='gin')
        batch_op.drop_column('container_shape')
        batch_op.drop_column('default_days_until_expiration')
        batch_op.drop_column('container_volume_unit')
        batch_op.drop_column('container_closure_type')
        batch_op.drop_column('container_volume')
        batch_op.drop_column('container_dimensions')

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.drop_column('show_flash_point_c')
        batch_op.drop_column('show_melting_point_c')
        batch_op.drop_column('show_moisture_content_percent')

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.drop_index('ix_inventory_item_org')
        batch_op.drop_column('container_shape')
        batch_op.drop_column('container_volume_unit')
        batch_op.drop_column('reference_guide_url')
        batch_op.drop_column('reference_item_type')
        batch_op.drop_column('container_closure_type')
        batch_op.drop_column('container_volume')
        batch_op.drop_column('container_dimensions')

    with op.batch_alter_table('inventory_lot', schema=None) as batch_op:
        batch_op.drop_index('ix_inventory_lot_org')

    with op.batch_alter_table('organization_addon', schema=None) as batch_op:
        batch_op.drop_index('ix_organization_addon_addon')
        batch_op.drop_index('ix_organization_addon_org')
        batch_op.create_index(batch_op.f('ix_organization_addon_addon_id'), ['addon_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_organization_addon_organization_id'), ['organization_id'], unique=False)

    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.drop_index('ix_product_category_id')
        batch_op.drop_column('category')

    with op.batch_alter_table('product_category', schema=None) as batch_op:
        batch_op.drop_index('ix_product_category_lower_name')

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.drop_index('ix_recipe_baker_base_flour_g')
        batch_op.drop_index('ix_recipe_baker_salt_pct')
        batch_op.drop_index('ix_recipe_baker_water_pct')
        batch_op.drop_index('ix_recipe_baker_yeast_pct')
        batch_op.drop_index('ix_recipe_candle_fragrance_pct')
        batch_op.drop_index('ix_recipe_candle_vessel_ml')
        batch_op.drop_index('ix_recipe_category_data_gin', postgresql_using='gin')
        batch_op.drop_index('ix_recipe_category_id')
        batch_op.drop_index('ix_recipe_cosm_emulsifier_pct')
        batch_op.drop_index('ix_recipe_cosm_preservative_pct')
        batch_op.drop_index('ix_recipe_org')
        batch_op.drop_index('ix_recipe_soap_lye_type')
        batch_op.drop_index('ix_recipe_soap_superfat')
        batch_op.drop_index('ix_recipe_soap_water_pct')
        batch_op.drop_index('ix_recipe_vessel_fill_pct')
        batch_op.drop_column('candle_vessel_ml')
        batch_op.drop_column('soap_water_pct')
        batch_op.drop_column('counts')
        batch_op.drop_column('baker_yeast_pct')
        batch_op.drop_column('soap_superfat')
        batch_op.drop_column('cosm_emulsifier_pct')
        batch_op.drop_column('vessel_fill_pct')
        batch_op.drop_column('baker_base_flour_g')
        batch_op.drop_column('baker_water_pct')
        batch_op.drop_column('soap_lye_type')
        batch_op.drop_column('candle_fragrance_pct')
        batch_op.drop_column('cosm_preservative_pct')
        batch_op.drop_column('baker_salt_pct')

    with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
        batch_op.drop_column('allowed_addon_keys')

    with op.batch_alter_table('unified_inventory_history', schema=None) as batch_op:
        batch_op.drop_index('ix_unified_history_org')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.drop_index('ix_user_org')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    from sqlalchemy import text

    # Helper function to check if index exists
    def index_exists(index_name):
        bind = op.get_bind()
        result = bind.execute(text("""
            SELECT EXISTS(
                SELECT 1 FROM pg_class c 
                JOIN pg_namespace n ON n.oid = c.relnamespace 
                WHERE c.relname = :index_name AND c.relkind = 'i'
            )
        """), {"index_name": index_name})
        return result.scalar()

    with op.batch_alter_table('user', schema=None) as batch_op:
        if not index_exists('ix_user_org'):
            batch_op.create_index('ix_user_org', ['organization_id'], unique=False)
        batch_op.alter_column('is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))

    with op.batch_alter_table('unified_inventory_history', schema=None) as batch_op:
        if not index_exists('ix_unified_history_org'):
            batch_op.create_index('ix_unified_history_org', ['organization_id'], unique=False)

    # Check if column exists before trying to add it
    bind = op.get_bind()
    inspector = inspect(bind)
    columns = [col['name'] for col in inspector.get_columns('subscription_tier')]

    if 'allowed_addon_keys' not in columns:
        with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
            batch_op.add_column(sa.Column('allowed_addon_keys', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))

    # Check and add recipe columns only if they don't exist
    recipe_columns = [col['name'] for col in inspector.get_columns('recipe')]

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        for col_name, col_def in recipe_columns_to_add:
            if col_name not in recipe_columns:
                batch_op.add_column(col_def)

        # Create indexes only if they don't exist
        recipe_indexes_to_add = [
            'ix_recipe_vessel_fill_pct',
            'ix_recipe_soap_water_pct', 
            'ix_recipe_soap_superfat',
            'ix_recipe_soap_lye_type',
            'ix_recipe_org',
            'ix_recipe_cosm_preservative_pct',
            'ix_recipe_cosm_emulsifier_pct',
            'ix_recipe_category_id',
            'ix_recipe_category_data_gin',
            'ix_recipe_candle_vessel_ml',
            'ix_recipe_candle_fragrance_pct',
            'ix_recipe_baker_yeast_pct',
            'ix_recipe_baker_water_pct',
            'ix_recipe_baker_salt_pct',
            'ix_recipe_baker_base_flour_g'
        ]

        for index_name in recipe_indexes_to_add:
            if not index_exists(index_name):
                if index_name == 'ix_recipe_vessel_fill_pct':
                    batch_op.create_index('ix_recipe_vessel_fill_pct', ['vessel_fill_pct'], unique=False)
                elif index_name == 'ix_recipe_soap_water_pct':
                    batch_op.create_index('ix_recipe_soap_water_pct', ['soap_water_pct'], unique=False)
                elif index_name == 'ix_recipe_soap_superfat':
                    batch_op.create_index('ix_recipe_soap_superfat', ['soap_superfat'], unique=False)
                elif index_name == 'ix_recipe_soap_lye_type':
                    batch_op.create_index('ix_recipe_soap_lye_type', ['soap_lye_type'], unique=False)
                elif index_name == 'ix_recipe_org':
                    batch_op.create_index('ix_recipe_org', ['organization_id'], unique=False)
                elif index_name == 'ix_recipe_cosm_preservative_pct':
                    batch_op.create_index('ix_recipe_cosm_preservative_pct', ['cosm_preservative_pct'], unique=False)
                elif index_name == 'ix_recipe_cosm_emulsifier_pct':
                    batch_op.create_index('ix_recipe_cosm_emulsifier_pct', ['cosm_emulsifier_pct'], unique=False)
                elif index_name == 'ix_recipe_category_id':
                    batch_op.create_index('ix_recipe_category_id', ['category_id'], unique=False)
                elif index_name == 'ix_recipe_category_data_gin':
                    batch_op.create_index('ix_recipe_category_data_gin', [sa.literal_column('(category_data::jsonb)')], unique=False, postgresql_using='gin')
                elif index_name == 'ix_recipe_candle_vessel_ml':
                    batch_op.create_index('ix_recipe_candle_vessel_ml', ['candle_vessel_ml'], unique=False)
                elif index_name == 'ix_recipe_candle_fragrance_pct':
                    batch_op.create_index('ix_recipe_candle_fragrance_pct', ['candle_fragrance_pct'], unique=False)
                elif index_name == 'ix_recipe_baker_yeast_pct':
                    batch_op.create_index('ix_recipe_baker_yeast_pct', ['baker_yeast_pct'], unique=False)
                elif index_name == 'ix_recipe_baker_water_pct':
                    batch_op.create_index('ix_recipe_baker_water_pct', ['baker_water_pct'], unique=False)
                elif index_name == 'ix_recipe_baker_salt_pct':
                    batch_op.create_index('ix_recipe_baker_salt_pct', ['baker_salt_pct'], unique=False)
                elif index_name == 'ix_recipe_baker_base_flour_g':
                    batch_op.create_index('ix_recipe_baker_base_flour_g', ['baker_base_flour_g'], unique=False)

    with op.batch_alter_table('product_category', schema=None) as batch_op:
        if not index_exists('ix_product_category_lower_name'):
            batch_op.create_index('ix_product_category_lower_name', [sa.literal_column('lower(name::text)')], unique=True)

    # Check and add product columns only if they don't exist
    product_columns = [col['name'] for col in inspector.get_columns('product')]

    with op.batch_alter_table('product', schema=None) as batch_op:
        if 'category' not in product_columns:
            batch_op.add_column(sa.Column('category', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
        if not index_exists('ix_product_category_id'):
            batch_op.create_index('ix_product_category_id', ['category_id'], unique=False)

    with op.batch_alter_table('organization_addon', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_organization_addon_organization_id'))
        batch_op.drop_index(batch_op.f('ix_organization_addon_addon_id'))
        batch_op.create_index('ix_organization_addon_org', ['organization_id'], unique=False)
        batch_op.create_index('ix_organization_addon_addon', ['addon_id'], unique=False)

    with op.batch_alter_table('inventory_lot', schema=None) as batch_op:
        if not index_exists('ix_inventory_lot_org'):
            batch_op.create_index('ix_inventory_lot_org', ['organization_id'], unique=False)

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_dimensions', sa.VARCHAR(length=128), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_closure_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reference_item_type', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reference_guide_url', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_volume_unit', sa.VARCHAR(length=16), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_shape', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
        if not index_exists('ix_inventory_item_org'):
            batch_op.create_index('ix_inventory_item_org', ['organization_id'], unique=False)

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('show_moisture_content_percent', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('show_melting_point_c', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('show_flash_point_c', sa.BOOLEAN(), autoincrement=False, nullable=True))

    with op.batch_alter_table('global_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_dimensions', sa.VARCHAR(length=128), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_closure_type', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_volume_unit', sa.VARCHAR(length=16), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('default_days_until_expiration', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_shape', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
        if not index_exists('ix_global_item_aka_gin'):
            batch_op.create_index('ix_global_item_aka_gin', [sa.literal_column('(aka_names::jsonb)')], unique=False, postgresql_using='gin')

    with op.batch_alter_table('extra_batch_consumable', schema=None) as batch_op:
        if not index_exists('ix_extra_batch_consumable_organization_id'):
            batch_op.create_index('ix_extra_batch_consumable_organization_id', ['organization_id'], unique=False)
        if not index_exists('ix_extra_batch_consumable_inventory_item_id'):
            batch_op.create_index('ix_extra_batch_consumable_inventory_item_id', ['inventory_item_id'], unique=False)
        if not index_exists('ix_extra_batch_consumable_batch_id'):
            batch_op.create_index('ix_extra_batch_consumable_batch_id', ['batch_id'], unique=False)

    with op.batch_alter_table('batch_consumable', schema=None) as batch_op:
        if not index_exists('ix_batch_consumable_organization_id'):
            batch_op.create_index('ix_batch_consumable_organization_id', ['organization_id'], unique=False)
        if not index_exists('ix_batch_consumable_inventory_item_id'):
            batch_op.create_index('ix_batch_consumable_inventory_item_id', ['inventory_item_id'], unique=False)
        if not index_exists('ix_batch_consumable_batch_id'):
            batch_op.create_index('ix_batch_consumable_batch_id', ['batch_id'], unique=False)

    # Check and add batch columns only if they don't exist
    batch_columns = [col['name'] for col in inspector.get_columns('batch')]

    batch_columns_to_add = [
        ('baker_salt_pct', sa.Column('baker_salt_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'baker_salt_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('cosm_preservative_pct', sa.Column('cosm_preservative_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'cosm_preservative_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('candle_fragrance_pct', sa.Column('candle_fragrance_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'candle_fragrance_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('soap_lye_type', sa.Column('soap_lye_type', sa.TEXT(), sa.Computed("((plan_snapshot -> 'category_extension'::text) ->> 'soap_lye_type'::text)", persisted=True), autoincrement=False, nullable=True)),
        ('baker_water_pct', sa.Column('baker_water_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'baker_water_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('baker_base_flour_g', sa.Column('baker_base_flour_g', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'baker_base_flour_g'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('vessel_fill_pct', sa.Column('vessel_fill_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'vessel_fill_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('cosm_emulsifier_pct', sa.Column('cosm_emulsifier_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'cosm_emulsifier_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('soap_superfat', sa.Column('soap_superfat', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'soap_superfat'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('baker_yeast_pct', sa.Column('baker_yeast_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'baker_yeast_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('counts', sa.Column('counts', sa.INTEGER(), autoincrement=False, nullable=True)),
        ('soap_water_pct', sa.Column('soap_water_pct', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'soap_water_pct'::text))::numeric", persisted=True), autoincrement=False, nullable=True)),
        ('candle_vessel_ml', sa.Column('candle_vessel_ml', sa.NUMERIC(), sa.Computed("(((plan_snapshot -> 'category_extension'::text) ->> 'candle_vessel_ml'::text))::numeric", persisted=True), autoincrement=False, nullable=True))
    ]

    with op.batch_alter_table('batch', schema=None) as batch_op:
        for col_name, col_def in batch_columns_to_add:
            if col_name not in batch_columns:
                batch_op.add_column(col_def)

        # Create batch indexes only if they don't exist
        batch_indexes_to_add = [
            'ix_batch_vessel_fill_pct',
            'ix_batch_soap_water_pct',
            'ix_batch_soap_superfat', 
            'ix_batch_soap_lye_type',
            'ix_batch_org',
            'ix_batch_cosm_preservative_pct',
            'ix_batch_cosm_emulsifier_pct',
            'ix_batch_candle_vessel_ml',
            'ix_batch_candle_fragrance_pct',
            'ix_batch_baker_yeast_pct',
            'ix_batch_baker_water_pct',
            'ix_batch_baker_salt_pct',
            'ix_batch_baker_base_flour_g'
        ]

        for index_name in batch_indexes_to_add:
            if not index_exists(index_name):
                if index_name == 'ix_batch_vessel_fill_pct':
                    batch_op.create_index('ix_batch_vessel_fill_pct', ['vessel_fill_pct'], unique=False)
                elif index_name == 'ix_batch_soap_water_pct':
                    batch_op.create_index('ix_batch_soap_water_pct', ['soap_water_pct'], unique=False)
                elif index_name == 'ix_batch_soap_superfat':
                    batch_op.create_index('ix_batch_soap_superfat', ['soap_superfat'], unique=False)
                elif index_name == 'ix_batch_soap_lye_type':
                    batch_op.create_index('ix_batch_soap_lye_type', ['soap_lye_type'], unique=False)
                elif index_name == 'ix_batch_org':
                    batch_op.create_index('ix_batch_org', ['organization_id'], unique=False)
                elif index_name == 'ix_batch_cosm_preservative_pct':
                    batch_op.create_index('ix_batch_cosm_preservative_pct', ['cosm_preservative_pct'], unique=False)
                elif index_name == 'ix_batch_cosm_emulsifier_pct':
                    batch_op.create_index('ix_batch_cosm_emulsifier_pct', ['cosm_emulsifier_pct'], unique=False)
                elif index_name == 'ix_batch_candle_vessel_ml':
                    batch_op.create_index('ix_batch_candle_vessel_ml', ['candle_vessel_ml'], unique=False)
                elif index_name == 'ix_batch_candle_fragrance_pct':
                    batch_op.create_index('ix_batch_candle_fragrance_pct', ['candle_fragrance_pct'], unique=False)
                elif index_name == 'ix_batch_baker_yeast_pct':
                    batch_op.create_index('ix_batch_baker_yeast_pct', ['baker_yeast_pct'], unique=False)
                elif index_name == 'ix_batch_baker_water_pct':
                    batch_op.create_index('ix_batch_baker_water_pct', ['baker_water_pct'], unique=False)
                elif index_name == 'ix_batch_baker_salt_pct':
                    batch_op.create_index('ix_batch_baker_salt_pct', ['baker_salt_pct'], unique=False)
                elif index_name == 'ix_batch_baker_base_flour_g':
                    batch_op.create_index('ix_batch_baker_base_flour_g', ['baker_base_flour_g'], unique=False)

    op.create_table('global_item_alias',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('global_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('alias', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['global_item_id'], ['global_item.id'], name='global_item_alias_global_item_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='global_item_alias_pkey')
    )
    with op.batch_alter_table('global_item_alias', schema=None) as batch_op:
        if not index_exists('ix_global_item_alias_tsv'):
            batch_op.create_index('ix_global_item_alias_tsv', [sa.literal_column("to_tsvector('simple'::regconfig, alias)")], unique=False, postgresql_using='gin')
        if not index_exists('ix_global_item_alias_global_item_id'):
            batch_op.create_index('ix_global_item_alias_global_item_id', ['global_item_id'], unique=False)
        if not index_exists('ix_global_item_alias_alias'):
            batch_op.create_index('ix_global_item_alias_alias', ['alias'], unique=False)

    op.drop_table('tier_included_addon')
    # ### end Alembic commands ###