
"""fix_product_sku_history_schema

Revision ID: fix_product_sku_history
Revises: 3478c1df1783
Create Date: 2025-01-08 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fix_product_sku_history'
down_revision = '3478c1df1783'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        # Add the new inventory_item_id column
        batch_op.add_column(sa.Column('inventory_item_id', sa.Integer(), nullable=True))
        
        # Create foreign key constraint
        batch_op.create_foreign_key('fk_product_sku_history_inventory_item', 'product_sku', ['inventory_item_id'], ['inventory_item_id'])
        
        # Drop old indexes that reference sku_id
        batch_op.drop_index('idx_sku_remaining')
        batch_op.drop_index('idx_sku_timestamp')
        
        # Create new indexes for inventory_item_id
        batch_op.create_index('idx_inventory_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_item_timestamp', ['inventory_item_id', 'timestamp'], unique=False)
    
    # Populate inventory_item_id with data from sku_id
    # This maps the old sku_id to the new inventory_item_id
    op.execute("""
        UPDATE product_sku_history 
        SET inventory_item_id = (
            SELECT inventory_item_id 
            FROM product_sku 
            WHERE product_sku.inventory_item_id = product_sku_history.sku_id
        )
        WHERE sku_id IS NOT NULL
    """)
    
    # Now make inventory_item_id NOT NULL and drop sku_id
    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        batch_op.alter_column('inventory_item_id', nullable=False)
        
        # Drop the old sku_id column and its foreign key
        batch_op.drop_constraint('product_sku_history_ibfk_1', type_='foreignkey')
        batch_op.drop_column('sku_id')
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        # Add back sku_id column
        batch_op.add_column(sa.Column('sku_id', sa.Integer(), nullable=True))
        
        # Drop new indexes
        batch_op.drop_index('idx_inventory_item_remaining')
        batch_op.drop_index('idx_inventory_item_timestamp')
        
        # Create old indexes
        batch_op.create_index('idx_sku_remaining', ['sku_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_sku_timestamp', ['sku_id', 'timestamp'], unique=False)
        
        # Drop foreign key and column
        batch_op.drop_constraint('fk_product_sku_history_inventory_item', type_='foreignkey')
        batch_op.drop_column('inventory_item_id')
        
        # Recreate old foreign key
        batch_op.create_foreign_key('product_sku_history_ibfk_1', 'product_sku', ['sku_id'], ['inventory_item_id'])
    
    # ### end Alembic commands ###
