"""empty message

Revision ID: edb302e17958
Revises: add_perm_category_col
Create Date: 2025-08-25 17:39:36.793965

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'edb302e17958'
down_revision = 'add_perm_category_col'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('developer_role_permission',
    sa.Column('developer_role_id', sa.Integer(), nullable=False),
    sa.Column('developer_permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['developer_permission_id'], ['developer_permission.id'], ),
    sa.ForeignKeyConstraint(['developer_role_id'], ['developer_role.id'], ),
    sa.PrimaryKeyConstraint('developer_role_id', 'developer_permission_id')
    )
    op.create_table('subscription_tier_permission',
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['tier_id'], ['subscription_tier.id'], ),
    sa.PrimaryKeyConstraint('tier_id', 'permission_id')
    )
    op.drop_table('pricing_snapshot')
    op.drop_table('billing_snapshot')
    with op.batch_alter_table('batch', schema=None) as batch_op:
        # Be defensive: in SQLite or fresh DBs this FK name may not exist
        try:
            batch_op.drop_constraint('batch_sku_id_fkey', type_='foreignkey')
        except Exception:
            pass
        try:
            batch_op.create_foreign_key('fk_batch_sku_id', 'product_sku', ['sku_id'], ['id'])
        except Exception:
            pass
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('container_quantity', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('quantity_used', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('fill_quantity', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('fill_unit', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('cost_each', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('container_size')
        batch_op.drop_column('qr_code')
        batch_op.drop_column('label_printed')
        batch_op.drop_column('container_unit')
        batch_op.drop_column('quantity_filled')
        batch_op.drop_column('container_name')
        batch_op.drop_column('notes')

    with op.batch_alter_table('batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('fifo_deduction_log')

    with op.batch_alter_table('batch_inventory_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('action', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('quantity_change', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('old_stock', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('new_stock', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.drop_constraint('batch_inventory_log_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('cost_per_unit')
        batch_op.drop_column('total_cost')
        batch_op.drop_column('quantity_after')
        batch_op.drop_column('quantity_before')
        batch_op.drop_column('user_id')
        batch_op.drop_column('quantity_used')

    with op.batch_alter_table('batch_timer', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=128), nullable=False))
        batch_op.add_column(sa.Column('duration_seconds', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('status', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('batch_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('is_active')
        batch_op.drop_column('timer_name')
        batch_op.drop_column('duration_minutes')
        batch_op.drop_column('notes')

    with op.batch_alter_table('billing_snapshots', schema=None) as batch_op:
        batch_op.alter_column('organization_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('confirmed_tier',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
        batch_op.alter_column('confirmed_status',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
        batch_op.alter_column('period_start',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('period_end',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('last_stripe_sync',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('conversion_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('amount', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('result', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('conversion_type', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('ingredient_name', sa.String(length=128), nullable=True))
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('from_unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.alter_column('to_unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.drop_column('conversion_factor')
        batch_op.drop_column('category_density')
        batch_op.drop_column('from_amount')
        batch_op.drop_column('to_amount')

    with op.batch_alter_table('custom_unit_mapping', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('from_unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('to_unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.drop_constraint('custom_unit_mapping_ingredient_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('ingredient_id')

    with op.batch_alter_table('developer_permission', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)

    with op.batch_alter_table('developer_role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)

    with op.batch_alter_table('extra_batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('container_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('container_quantity', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('quantity_used', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('fill_quantity', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('fill_unit', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('cost_each', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('reason', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('container_size')
        batch_op.drop_column('container_unit')
        batch_op.drop_column('quantity_filled')
        batch_op.drop_column('container_name')
        batch_op.drop_column('notes')

    with op.batch_alter_table('extra_batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.drop_constraint('extra_batch_ingredient_added_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('added_at')
        batch_op.drop_column('reason')
        batch_op.drop_column('added_by')

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('color', sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column('default_density', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('density')

    with op.batch_alter_table('inventory_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('note', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('used_for_batch_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('change_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('quantity_change',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.alter_column('remaining_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('fifo_code',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('expiration_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_index('idx_inventory_history_fifo_code')
        batch_op.drop_index('idx_inventory_history_item_remaining')
        batch_op.drop_index('idx_inventory_history_timestamp')
        batch_op.create_foreign_key(None, 'inventory_history', ['fifo_reference_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['inventory_item_id'], ['id'])
        batch_op.create_foreign_key(None, 'batch', ['used_for_batch_id'], ['id'])
        batch_op.create_foreign_key(None, 'batch', ['batch_id'], ['id'])

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('density', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('type', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('is_archived', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('is_perishable', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('shelf_life_days', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('storage_amount', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('storage_unit', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('intermediate', sa.Boolean(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.create_unique_constraint(None, ['name'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('updated_at')
        batch_op.drop_column('item_type')
        batch_op.drop_column('storage_location')
        batch_op.drop_column('supplier')
        batch_op.drop_column('batch_code')
        batch_op.drop_column('fifo_code')
        batch_op.drop_column('purchase_date')
        batch_op.drop_column('notes')

    with op.batch_alter_table('inventory_lot', schema=None) as batch_op:
        batch_op.drop_index('idx_inventory_lot_batch')
        batch_op.drop_index('idx_inventory_lot_expiration')
        batch_op.drop_index('idx_inventory_lot_item_remaining')
        batch_op.drop_index('idx_inventory_lot_organization')
        batch_op.drop_index('idx_inventory_lot_received_date')

    with op.batch_alter_table('organization', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('contact_email',
               existing_type=sa.VARCHAR(length=120),
               type_=sa.String(length=256),
               existing_nullable=True)
        batch_op.alter_column('subscription_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('billing_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_constraint('organization_stripe_customer_id_key', type_='unique')
        batch_op.drop_constraint('fk_organization_subscription_tier_id', type_='foreignkey')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('timezone')
        batch_op.drop_column('subscription_item_id')
        batch_op.drop_column('subscription_end_date')
        batch_op.drop_column('subscription_start_date')
        batch_op.drop_column('billing_cycle')

    with op.batch_alter_table('organization_stats', schema=None) as batch_op:
        batch_op.add_column(sa.Column('completed_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('failed_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('cancelled_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('active_users', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_inventory_value', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('total_products', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_products_made', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(), nullable=True))
        batch_op.drop_column('avg_batch_cost')
        batch_op.drop_column('last_batch_date')
        batch_op.drop_column('total_production_value')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('permission', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('pricing_snapshots', schema=None) as batch_op:
        batch_op.alter_column('stripe_price_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
        batch_op.alter_column('stripe_lookup_key',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
        batch_op.alter_column('stripe_product_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
        batch_op.alter_column('unit_amount',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('interval',
               existing_type=sa.VARCHAR(length=16),
               nullable=False)
        batch_op.alter_column('product_name',
               existing_type=sa.VARCHAR(length=128),
               nullable=False)
        batch_op.alter_column('last_stripe_sync',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.create_unique_constraint(None, ['stripe_price_id'])
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('base_unit', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('subcategory', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('low_stock_threshold', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('is_discontinued', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('shopify_product_id', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('etsy_shop_section_id', sa.String(length=64), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('category',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.create_unique_constraint('unique_product_name_per_org', ['name', 'organization_id'])
        batch_op.drop_constraint('product_base_recipe_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('base_recipe_id')
        batch_op.drop_column('image_url')

    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sku', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('quantity_override', sa.Float(), nullable=True))
        batch_op.alter_column('size_label',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=64),
               nullable=False)
        batch_op.alter_column('fifo_id',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('barcode',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               existing_nullable=True)
        batch_op.alter_column('upc',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('location_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=128),
               existing_nullable=True)
        batch_op.create_index('idx_active_skus', ['is_active', 'is_product_active'], unique=False)
        batch_op.create_index('idx_inventory_item', ['inventory_item_id'], unique=False)
        batch_op.create_index('idx_product_variant', ['product_id', 'variant_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_product_sku_inventory_item_id'), ['inventory_item_id'], unique=False)
        batch_op.create_unique_constraint('unique_barcode', ['barcode'])
        batch_op.create_unique_constraint('unique_sku_combination', ['product_id', 'variant_id', 'size_label', 'fifo_id'])
        batch_op.create_unique_constraint('unique_upc', ['upc'])
        batch_op.create_unique_constraint(None, ['barcode'])
        batch_op.create_unique_constraint(None, ['upc'])
        batch_op.create_unique_constraint(None, ['sku'])
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.create_foreign_key(None, 'batch', ['batch_id'], ['id'])
        batch_op.create_foreign_key(None, 'product_variant', ['variant_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['quality_checked_by'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.create_foreign_key(None, 'product', ['product_id'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['inventory_item_id'], ['id'])

    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('change_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.alter_column('quantity_change',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               nullable=False)
        batch_op.create_index('idx_change_type', ['change_type'], unique=False)
        batch_op.create_index('idx_fifo_code', ['fifo_code'], unique=False)
        batch_op.create_index('idx_inventory_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_item_timestamp', ['inventory_item_id', 'timestamp'], unique=False)
        batch_op.drop_constraint('product_sku_history_user_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('product_sku_history_sku_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'inventory_item', ['inventory_item_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['quality_checked_by'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['container_id'], ['id'])
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.create_foreign_key(None, 'product_sku_history', ['fifo_reference_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('quantity_after')
        batch_op.drop_column('quantity_before')
        batch_op.drop_column('sku_id')
        batch_op.drop_column('user_id')
        batch_op.drop_column('reason')

    with op.batch_alter_table('product_variant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('color', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('material', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('scent', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.create_unique_constraint('unique_product_variant', ['product_id', 'name'])
        batch_op.drop_constraint('product_variant_recipe_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('cost_modifier')
        batch_op.drop_column('price_modifier')
        batch_op.drop_column('recipe_id')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.add_column(sa.Column('label_prefix', sa.String(length=8), nullable=True))
        batch_op.add_column(sa.Column('qr_image', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('parent_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('is_locked', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('predicted_yield', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('predicted_yield_unit', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('allowed_containers', sa.PickleType(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               nullable=True)
        batch_op.create_foreign_key(None, 'recipe', ['parent_id'], ['id'])
        batch_op.drop_column('tags')
        batch_op.drop_column('created_at')
        batch_op.drop_column('base_yield')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('description')
        batch_op.drop_column('version')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')
        batch_op.drop_column('yield_unit')

    with op.batch_alter_table('recipe_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('order_position', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=True))
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('order_index')
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('reservation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('order_id', sa.String(length=128), nullable=False))
        batch_op.add_column(sa.Column('reservation_id', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('product_item_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('reserved_item_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('unit_cost', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('sale_price', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('customer', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('source_fifo_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('source_batch_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('status', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('source', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('released_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('converted_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('unit',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.create_index('idx_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_order_status', ['order_id', 'status'], unique=False)
        batch_op.create_index('idx_reserved_item_status', ['reserved_item_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_reservation_order_id'), ['order_id'], unique=False)
        batch_op.drop_constraint('reservation_inventory_item_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('reservation_batch_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('reservation_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'inventory_item', ['product_item_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(None, 'batch', ['source_batch_id'], ['id'])
        batch_op.create_foreign_key(None, 'inventory_item', ['reserved_item_id'], ['id'])
        batch_op.drop_column('updated_at')
        batch_op.drop_column('batch_id')
        batch_op.drop_column('user_id')
        batch_op.drop_column('inventory_item_id')
        batch_op.drop_column('reservation_type')
        batch_op.drop_column('reference_id')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.create_unique_constraint('unique_role_name_org', ['name', 'organization_id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('stripe_event', schema=None) as batch_op:
        batch_op.drop_constraint('uq_stripe_event_event_id', type_='unique')
        batch_op.drop_index('ix_stripe_event_event_id')
        batch_op.create_index(batch_op.f('ix_stripe_event_event_id'), ['event_id'], unique=True)

    with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
        batch_op.alter_column('billing_provider',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
        batch_op.drop_index('uq_subscription_tier_name')
        batch_op.drop_index('uq_subscription_tier_stripe_lookup_key')
        batch_op.create_unique_constraint('uq_subscription_tier_stripe_lookup_key', ['stripe_lookup_key'])
        batch_op.drop_index('uq_subscription_tier_whop_product_key')
        batch_op.create_unique_constraint('uq_subscription_tier_whop_product_key', ['whop_product_key'])
        batch_op.drop_column('price_yearly')
        batch_op.drop_column('whop_product_name')
        batch_op.drop_column('features')
        batch_op.drop_column('is_active')
        batch_op.drop_column('display_name')
        batch_op.drop_column('price_monthly')
        batch_op.drop_column('max_organizations')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.create_unique_constraint('_tag_name_org_uc', ['name', 'organization_id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('unified_inventory_history', schema=None) as batch_op:
        batch_op.alter_column('remaining_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('fifo_code',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('quantity_used',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('is_perishable',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('is_reserved',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_change_type'), ['change_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_expiration_date'), ['expiration_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_inventory_item_id'), ['inventory_item_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_unified_inventory_history_timestamp'), ['timestamp'], unique=False)

    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.add_column(sa.Column('base_unit', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('is_custom', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('is_mapped', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('symbol',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=16),
               existing_nullable=True)
        batch_op.alter_column('unit_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=32),
               existing_nullable=False)
        batch_op.drop_index('ix_unit_name')
        batch_op.drop_index('ix_unit_symbol')
        batch_op.create_unique_constraint('_unit_name_org_uc', ['name', 'organization_id'])
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        batch_op.drop_column('is_base_unit')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        batch_op.alter_column('user_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.drop_constraint('user_email_key', type_='unique')
        batch_op.drop_column('google_id')
        batch_op.drop_column('password_reset_expires')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('max_dashboard_alerts', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('show_expiration_alerts', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_timer_alerts', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_low_stock_alerts', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_batch_alerts', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_fault_alerts', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_alert_badges', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('compact_view', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('show_quick_actions', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('dashboard_layout',
               existing_type=sa.TEXT(),
               type_=sa.String(length=32),
               existing_nullable=True)
        batch_op.alter_column('timezone',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=True)
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('date_format')
        batch_op.drop_column('email_notifications')
        batch_op.drop_column('theme')

    with op.batch_alter_table('user_role_assignment', schema=None) as batch_op:
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('user_stats', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organization_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('total_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('completed_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('failed_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('cancelled_batches', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_recipes', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('recipes_created', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('inventory_adjustments', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('inventory_items_created', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('products_created', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_products_made', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.drop_constraint('user_stats_user_id_key', type_='unique')
        batch_op.create_foreign_key(None, 'organization', ['organization_id'], ['id'])
        batch_op.drop_column('total_batches_created')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('total_recipes_created')
        batch_op.drop_column('last_login')
        batch_op.drop_column('last_batch_date')
        batch_op.drop_column('preferred_units')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_stats', schema=None) as batch_op:
        batch_op.add_column(sa.Column('preferred_units', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_batch_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('total_recipes_created', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('total_batches_created', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_unique_constraint('user_stats_user_id_key', ['user_id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('last_updated')
        batch_op.drop_column('total_products_made')
        batch_op.drop_column('products_created')
        batch_op.drop_column('inventory_items_created')
        batch_op.drop_column('inventory_adjustments')
        batch_op.drop_column('recipes_created')
        batch_op.drop_column('total_recipes')
        batch_op.drop_column('cancelled_batches')
        batch_op.drop_column('failed_batches')
        batch_op.drop_column('completed_batches')
        batch_op.drop_column('total_batches')
        batch_op.drop_column('organization_id')

    with op.batch_alter_table('user_role_assignment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))

    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.add_column(sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('date_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('timezone',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('dashboard_layout',
               existing_type=sa.String(length=32),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('show_quick_actions')
        batch_op.drop_column('compact_view')
        batch_op.drop_column('show_alert_badges')
        batch_op.drop_column('show_fault_alerts')
        batch_op.drop_column('show_batch_alerts')
        batch_op.drop_column('show_low_stock_alerts')
        batch_op.drop_column('show_timer_alerts')
        batch_op.drop_column('show_expiration_alerts')
        batch_op.drop_column('max_dashboard_alerts')
        batch_op.drop_column('organization_id')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('password_reset_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('google_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.create_unique_constraint('user_email_key', ['email'])
        batch_op.alter_column('is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('user_type',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        batch_op.alter_column('last_name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('first_name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=80),
               existing_nullable=False)

    with op.batch_alter_table('unit', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_base_unit', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('_unit_name_org_uc', type_='unique')
        batch_op.create_index('ix_unit_symbol', ['symbol'], unique=False)
        batch_op.create_index('ix_unit_name', ['name'], unique=False)
        batch_op.alter_column('unit_type',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.alter_column('symbol',
               existing_type=sa.String(length=16),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('is_mapped')
        batch_op.drop_column('is_custom')
        batch_op.drop_column('is_active')
        batch_op.drop_column('base_unit')

    with op.batch_alter_table('unified_inventory_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_unified_inventory_history_timestamp'))
        batch_op.drop_index(batch_op.f('ix_unified_inventory_history_inventory_item_id'))
        batch_op.drop_index(batch_op.f('ix_unified_inventory_history_expiration_date'))
        batch_op.drop_index(batch_op.f('ix_unified_inventory_history_change_type'))
        batch_op.alter_column('is_reserved',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('is_perishable',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('quantity_used',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('fifo_code',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
        batch_op.alter_column('remaining_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('_tag_name_org_uc', type_='unique')
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('is_active')
        batch_op.drop_column('description')

    with op.batch_alter_table('subscription_tier', schema=None) as batch_op:
        batch_op.add_column(sa.Column('max_organizations', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_monthly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('features', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('whop_product_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_yearly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.drop_constraint('uq_subscription_tier_whop_product_key', type_='unique')
        batch_op.create_index('uq_subscription_tier_whop_product_key', ['whop_product_key'], unique=True)
        batch_op.drop_constraint('uq_subscription_tier_stripe_lookup_key', type_='unique')
        batch_op.create_index('uq_subscription_tier_stripe_lookup_key', ['stripe_lookup_key'], unique=True)
        batch_op.create_index('uq_subscription_tier_name', ['name'], unique=True)
        batch_op.alter_column('billing_provider',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)

    with op.batch_alter_table('stripe_event', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stripe_event_event_id'))
        batch_op.create_index('ix_stripe_event_event_id', ['event_id'], unique=False)
        batch_op.create_unique_constraint('uq_stripe_event_event_id', ['event_id'])

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('unique_role_name_org', type_='unique')
        batch_op.alter_column('description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=80),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('is_active')

    with op.batch_alter_table('reservation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('reference_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reservation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('inventory_item_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('reservation_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key('reservation_batch_id_fkey', 'batch', ['batch_id'], ['id'])
        batch_op.create_foreign_key('reservation_inventory_item_id_fkey', 'inventory_item', ['inventory_item_id'], ['id'])
        batch_op.drop_index(batch_op.f('ix_reservation_order_id'))
        batch_op.drop_index('idx_reserved_item_status')
        batch_op.drop_index('idx_order_status')
        batch_op.drop_index('idx_expires_at')
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('converted_at')
        batch_op.drop_column('released_at')
        batch_op.drop_column('source')
        batch_op.drop_column('status')
        batch_op.drop_column('source_batch_id')
        batch_op.drop_column('source_fifo_id')
        batch_op.drop_column('customer')
        batch_op.drop_column('sale_price')
        batch_op.drop_column('unit_cost')
        batch_op.drop_column('reserved_item_id')
        batch_op.drop_column('product_item_id')
        batch_op.drop_column('reservation_id')
        batch_op.drop_column('order_id')

    with op.batch_alter_table('recipe_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('organization_id')
        batch_op.drop_column('order_position')

    with op.batch_alter_table('recipe', schema=None) as batch_op:
        batch_op.add_column(sa.Column('yield_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('base_yield', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.drop_column('allowed_containers')
        batch_op.drop_column('predicted_yield_unit')
        batch_op.drop_column('predicted_yield')
        batch_op.drop_column('is_locked')
        batch_op.drop_column('parent_id')
        batch_op.drop_column('qr_image')
        batch_op.drop_column('label_prefix')

    with op.batch_alter_table('product_variant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('recipe_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_modifier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cost_modifier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('product_variant_recipe_id_fkey', 'recipe', ['recipe_id'], ['id'])
        batch_op.drop_constraint('unique_product_variant', type_='unique')
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('organization_id')
        batch_op.drop_column('created_by')
        batch_op.drop_column('scent')
        batch_op.drop_column('material')
        batch_op.drop_column('color')

    with op.batch_alter_table('product_sku_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('sku_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('quantity_before', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('quantity_after', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('product_sku_history_sku_id_fkey', 'product_sku', ['sku_id'], ['id'])
        batch_op.create_foreign_key('product_sku_history_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.drop_index('idx_inventory_item_timestamp')
        batch_op.drop_index('idx_inventory_item_remaining')
        batch_op.drop_index('idx_fifo_code')
        batch_op.drop_index('idx_change_type')
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('quantity_change',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('change_type',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('inventory_item_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('organization_id')

    with op.batch_alter_table('product_sku', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint('unique_upc', type_='unique')
        batch_op.drop_constraint('unique_sku_combination', type_='unique')
        batch_op.drop_constraint('unique_barcode', type_='unique')
        batch_op.drop_index(batch_op.f('ix_product_sku_inventory_item_id'))
        batch_op.drop_index('idx_product_variant')
        batch_op.drop_index('idx_inventory_item')
        batch_op.drop_index('idx_active_skus')
        batch_op.alter_column('location_id',
               existing_type=sa.String(length=128),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.alter_column('upc',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
        batch_op.alter_column('barcode',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
        batch_op.alter_column('fifo_id',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
        batch_op.alter_column('size_label',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=32),
               nullable=True)
        batch_op.drop_column('quantity_override')
        batch_op.drop_column('sku')

    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('base_recipe_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('product_base_recipe_id_fkey', 'recipe', ['base_recipe_id'], ['id'])
        batch_op.drop_constraint('unique_product_name_per_org', type_='unique')
        batch_op.alter_column('category',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('etsy_shop_section_id')
        batch_op.drop_column('shopify_product_id')
        batch_op.drop_column('created_by')
        batch_op.drop_column('is_discontinued')
        batch_op.drop_column('low_stock_threshold')
        batch_op.drop_column('subcategory')
        batch_op.drop_column('base_unit')

    with op.batch_alter_table('pricing_snapshots', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('last_stripe_sync',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('product_name',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
        batch_op.alter_column('interval',
               existing_type=sa.VARCHAR(length=16),
               nullable=True)
        batch_op.alter_column('unit_amount',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('stripe_product_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)
        batch_op.alter_column('stripe_lookup_key',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.alter_column('stripe_price_id',
               existing_type=sa.VARCHAR(length=128),
               nullable=True)

    with op.batch_alter_table('permission', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.alter_column('description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('is_active')

    with op.batch_alter_table('organization_stats', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('total_production_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_batch_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('avg_batch_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.drop_column('last_updated')
        batch_op.drop_column('total_products_made')
        batch_op.drop_column('total_products')
        batch_op.drop_column('total_inventory_value')
        batch_op.drop_column('active_users')
        batch_op.drop_column('cancelled_batches')
        batch_op.drop_column('failed_batches')
        batch_op.drop_column('completed_batches')

    with op.batch_alter_table('organization', schema=None) as batch_op:
        batch_op.add_column(sa.Column('billing_cycle', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_item_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_organization_subscription_tier_id', 'subscription_tier', ['subscription_tier_id'], ['id'], ondelete='SET NULL')
        batch_op.create_unique_constraint('organization_stripe_customer_id_key', ['stripe_customer_id'])
        batch_op.alter_column('billing_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('subscription_status',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('contact_email',
               existing_type=sa.String(length=256),
               type_=sa.VARCHAR(length=120),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('inventory_lot', schema=None) as batch_op:
        batch_op.create_index('idx_inventory_lot_received_date', ['received_date'], unique=False)
        batch_op.create_index('idx_inventory_lot_organization', ['organization_id'], unique=False)
        batch_op.create_index('idx_inventory_lot_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_lot_expiration', ['expiration_date'], unique=False)
        batch_op.create_index('idx_inventory_lot_batch', ['batch_id'], unique=False)

    with op.batch_alter_table('inventory_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('purchase_date', sa.DATE(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('fifo_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('batch_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('supplier', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('storage_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('item_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('intermediate')
        batch_op.drop_column('created_by')
        batch_op.drop_column('storage_unit')
        batch_op.drop_column('storage_amount')
        batch_op.drop_column('shelf_life_days')
        batch_op.drop_column('is_perishable')
        batch_op.drop_column('is_archived')
        batch_op.drop_column('is_active')
        batch_op.drop_column('type')
        batch_op.drop_column('density')

    with op.batch_alter_table('inventory_history', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_index('idx_inventory_history_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_inventory_history_item_remaining', ['inventory_item_id', 'remaining_quantity'], unique=False)
        batch_op.create_index('idx_inventory_history_fifo_code', ['fifo_code'], unique=False)
        batch_op.alter_column('expiration_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
        batch_op.alter_column('fifo_code',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('remaining_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('quantity_change',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('change_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_column('organization_id')
        batch_op.drop_column('used_for_batch_id')
        batch_op.drop_column('note')

    with op.batch_alter_table('ingredient_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('density', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('is_active')
        batch_op.drop_column('default_density')
        batch_op.drop_column('color')
        batch_op.drop_column('description')

    with op.batch_alter_table('extra_batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('added_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('extra_batch_ingredient_added_by_fkey', 'user', ['added_by'], ['id'])
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('organization_id')

    with op.batch_alter_table('extra_batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('quantity_filled', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('label_printed', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('qr_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('organization_id')
        batch_op.drop_column('reason')
        batch_op.drop_column('cost_each')
        batch_op.drop_column('fill_unit')
        batch_op.drop_column('fill_quantity')
        batch_op.drop_column('quantity_used')
        batch_op.drop_column('container_quantity')
        batch_op.drop_column('container_id')

    with op.batch_alter_table('developer_role', schema=None) as batch_op:
        batch_op.alter_column('description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=80),
               existing_nullable=False)
        batch_op.drop_column('is_active')
        batch_op.drop_column('category')

    with op.batch_alter_table('developer_permission', schema=None) as batch_op:
        batch_op.alter_column('description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('is_active')
        batch_op.drop_column('category')

    with op.batch_alter_table('custom_unit_mapping', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ingredient_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('custom_unit_mapping_ingredient_id_fkey', 'inventory_item', ['ingredient_id'], ['id'])
        batch_op.alter_column('to_unit',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('from_unit',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('created_by')

    with op.batch_alter_table('conversion_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('to_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('from_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('category_density', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('conversion_factor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.alter_column('to_unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('from_unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('ingredient_name')
        batch_op.drop_column('conversion_type')
        batch_op.drop_column('result')
        batch_op.drop_column('amount')

    with op.batch_alter_table('billing_snapshots', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.alter_column('last_stripe_sync',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('period_end',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('period_start',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('confirmed_status',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)
        batch_op.alter_column('confirmed_tier',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)
        batch_op.alter_column('organization_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('batch_timer', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('timer_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('batch_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('organization_id')
        batch_op.drop_column('status')
        batch_op.drop_column('duration_seconds')
        batch_op.drop_column('name')

    with op.batch_alter_table('batch_inventory_log', schema=None) as batch_op:
        batch_op.add_column(sa.Column('quantity_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('quantity_before', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('quantity_after', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('total_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cost_per_unit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('batch_inventory_log_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('organization_id')
        batch_op.drop_column('new_stock')
        batch_op.drop_column('old_stock')
        batch_op.drop_column('quantity_change')
        batch_op.drop_column('action')

    with op.batch_alter_table('batch_ingredient', schema=None) as batch_op:
        batch_op.add_column(sa.Column('fifo_deduction_log', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('unit',
               existing_type=sa.String(length=32),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.drop_column('organization_id')

    with op.batch_alter_table('batch_container', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('quantity_filled', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('label_printed', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('qr_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('container_size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('organization_id')
        batch_op.drop_column('cost_each')
        batch_op.drop_column('fill_unit')
        batch_op.drop_column('fill_quantity')
        batch_op.drop_column('quantity_used')
        batch_op.drop_column('container_quantity')
        batch_op.drop_column('container_id')

    with op.batch_alter_table('batch', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('batch_sku_id_fkey', 'product_sku', ['sku_id'], ['id'])

    op.create_table('billing_snapshot',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('batch_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipe_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inventory_item_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('snapshot_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('billing_period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('billing_period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tier_at_snapshot', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name='billing_snapshot_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='billing_snapshot_pkey')
    )
    op.create_table('pricing_snapshot',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inventory_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cost_per_unit_at_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('quantity_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('snapshot_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], name='pricing_snapshot_batch_id_fkey'),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item.id'], name='pricing_snapshot_inventory_item_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pricing_snapshot_pkey')
    )
    op.drop_table('subscription_tier_permission')
    op.drop_table('developer_role_permission')
    # ### end Alembic commands ###