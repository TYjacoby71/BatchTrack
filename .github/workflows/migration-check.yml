
name: Migration Safety Check
on: 
  push:
  pull_request:
  workflow_dispatch:

jobs:
  drift-check:
    runs-on: ubuntu-latest
    env:
      FLASK_APP: wsgi:app           # make sure this is correct for your app
      PYTHONPATH: ${{ github.workspace }}
      SQLALCHEMY_DISABLE_CREATE_ALL: "1"  # ensure app doesn't call db.create_all()
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt

      - name: Schema drift check (ephemeral SQLite)
        run: |
          set -euo pipefail
          DB_FILE="$(mktemp -u).db"
          export DATABASE_URL="sqlite:///$DB_FILE"

          echo "🧪 Creating ephemeral database for drift check..."
          
          # Clean temp artifacts just in case
          rm -f "$DB_FILE" || true
          rm -f migrations/versions/*test_check*.py || true

          # Build schema strictly via Alembic migrations
          echo "🔧 Running migrations to build schema..."

          flask db upgrade
          flask db migrate -m "test_migration_check" --rev-id test_check >/dev/null 2>&1 || true
          # Ask Alembic if current models would generate new migrations
          echo "🔍 Checking if models match migration-built schema..."
          flask db migrate -m "test_migration_check" --rev-id test_check >/dev/null 2>&1 || true

          # Check if a migration file was actually created
          if compgen -G 'migrations/versions/*test_check*.py' > /dev/null; then
            echo "❌ SCHEMA DRIFT DETECTED!"
            echo "Your models don't match your migrations. Generated migration:"
            cat migrations/versions/*test_check*.py
            echo ""
            echo "💡 Fix this by running 'flask db migrate -m \"description\"' locally"
            echo "   and committing the new migration file."
            exit 1
          fi

          echo "✅ No schema drift detected - models match migrations!"
          
          # Cleanup
          rm -f "$DB_FILE"

          rm -f migrations/versions/*test_check*.py || true

      - name: Check for multiple migration heads
        run: |

          export DATABASE_URL="sqlite:///$(mktemp -u).db"
          flask db upgrade
          heads_count=$(flask db heads | wc -l)
          if [ "$heads_count" -gt 1 ]; then
            echo "❌ Multiple migration heads detected!"
            echo "Migration heads found:"
            flask db heads
            echo ""
            echo "💡 Fix this by merging heads: flask db merge heads"

            exit 1
          fi


      - name: Validate migration sequence
        run: |
          export DATABASE_URL="sqlite:///$(mktemp -u).db"
          echo "🔄 Testing full migration sequence..."
          
          # Test that migrations can run from scratch
          flask db upgrade
          
          # Test that migrations are reversible (downgrade one step)
          current_head=$(flask db current)
          if [ ! -z "$current_head" ]; then
            echo "📉 Testing migration reversibility..."
            flask db downgrade -1
            flask db upgrade
            echo "✅ Migration reversibility confirmed"
          fi
          
          echo "✅ Migration sequence validation complete"

  migrate-staging:
    if: github.ref == 'refs/heads/develop'
    needs: drift-check
    runs-on: ubuntu-latest
    environment: staging
    env:
      FLASK_APP: wsgi:app
      PYTHONPATH: ${{ github.workspace }}
      DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt

      - name: Backup staging database (recommended)
        run: |
          echo "🔒 Ensure you have automated snapshots enabled for your staging database"
          echo "   If using managed Postgres, verify backup/snapshot policies are active"

      - name: Run migrations on staging
        run: |
          echo "🚀 Running migrations on staging database..."
          flask db upgrade

      - name: Staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          python - <<'EOF'
          import os
          import sqlalchemy as sa
          
          print("🔍 Connecting to staging database...")
          engine = sa.create_engine(os.environ["DATABASE_URL"])
          
          with engine.connect() as conn:
              print("✅ Database connection successful")
              
              # 1) Ensure key tables exist and are accessible
              key_tables = ["user", "organization", "product", "inventory_item", "recipe", "batch"]
              for table in key_tables:
                  try:
                      result = conn.execute(sa.text(f"SELECT 1 FROM {table} LIMIT 1"))
                      print(f"✅ Table '{table}' accessible")
                  except Exception as e:
                      print(f"❌ Table '{table}' check failed: {e}")
                      raise
              
              # 2) Check critical NOT NULL constraints
              null_checks = [
                  ("user", "email", "User emails must not be null"),
                  ("organization", "name", "Organization names must not be null"),
                  ("inventory_item", "name", "Inventory item names must not be null"),
              ]
              
              for table, column, description in null_checks:
                  try:
                      result = conn.execute(sa.text(f"SELECT COUNT(*) FROM {table} WHERE {column} IS NULL"))
                      null_count = result.scalar()
                      if null_count > 0:
                          print(f"❌ {description}: found {null_count} null values")
                          raise ValueError(f"Data integrity violation: {description}")
                      else:
                          print(f"✅ {description} - OK")
                  except Exception as e:
                      print(f"❌ Integrity check failed for {table}.{column}: {e}")
                      raise
              
              # 3) Check foreign key integrity on critical relationships
              fk_checks = [
                  ("SELECT COUNT(*) FROM inventory_item WHERE organization_id IS NOT NULL AND organization_id NOT IN (SELECT id FROM organization)", "inventory_item -> organization FK"),
                  ("SELECT COUNT(*) FROM batch WHERE recipe_id IS NOT NULL AND recipe_id NOT IN (SELECT id FROM recipe)", "batch -> recipe FK"),
              ]
              
              for query, description in fk_checks:
                  try:
                      result = conn.execute(sa.text(query))
                      orphan_count = result.scalar()
                      if orphan_count > 0:
                          print(f"❌ {description}: found {orphan_count} orphaned records")
                          raise ValueError(f"Referential integrity violation: {description}")
                      else:
                          print(f"✅ {description} - OK")
                  except Exception as e:
                      print(f"❌ FK integrity check failed: {e}")
                      raise

          print("🎉 All staging smoke tests passed!")
          print("📊 Staging database is healthy and ready")
          EOF

      - name: Report staging migration success
        run: |
          echo "✅ Staging migration completed successfully!"
          echo "📈 Database schema updated and validated"
          echo "🔐 Long-term test data preserved"
          echo ""
          echo "🚦 Ready for production deployment after manual review"

